"""
Rotate background color of highlights for text
"""


import re
# Import deque for rotating through background colors
from collections import deque 
# Import tkinter library
from tkinter import filedialog
from tkinter import *

class FuzzySearch:
    def word_search(self):
        win = Tk()
        # win.geometry("750x450")

        text = Text(win)
        text.pack()

        # How close do words need to be inside a sentence to be detected.
        proximity = 5

        # Tkinter formatting tags to rotate through
        highlights = ['highlight1', 'highlight2', 'highlight3', 'highlight4', 'highlight5', 'highlight6']
        highlights = deque(highlights) 

        # Define the color codes for highlighting the text in a textfield  
        text.tag_config('highlight1', background='red')
        text.tag_config('highlight2', background='orange')
        text.tag_config('highlight3', background='yellow')
        text.tag_config('highlight4', background='green')
        text.tag_config('highlight5', background='blue')
        text.tag_config('highlight6', background='purple')

        # Reset color to default
        # t.tag_delete('failed')     

        # Use the filedialog module to allow the user to select the file to search
        filename = filedialog.askopenfilename()

        # Load a file of phrases to search the text file for
        # This will be pre-selected, rather than user-selected
        with open('redundant_phrases.txt', 'r') as pairs_file:
            # Break pairs into individual words, stripped of spaces
            redundancies = [line.replace(" ", "").strip().split(',') for line in pairs_file]

        # Line counter for use in the highlighting
        line_count = 0


        # Open the file to be searched
        with open(filename, 'r') as file:

            # Read the file line by line
            for line in file:
                line_count += 1
                text.insert(END, line)
                
            # Iterate through every possible redundancy in redundant_phrases.txt
            for phrase1, phrase2 in redundancies: 
                
                # Check if both words are in the line within the specified proximity
                if phrase1 and phrase2 in line:
                    words = re.findall(r"[\w']+|[.,!?;]", line)
                    # Unicode version: re.findall(r"\w+|[^\w\s]", text, re.UNICODE)

                    if abs(words.index(phrase1) - words.index(phrase2)) <= proximity:
                        # If the words are found within proximity, highlight them in the line and print the result                       
                        idx1 = '{}.{}'.format(line_count, line.index(phrase1))
                        pos1 = '{}.{}'.format(line_count, line.index(phrase1) + len(phrase1)) 
                        idx2 = '{}.{}'.format(line_count, line.index(phrase2))
                        pos2 = '{}.{}'.format(line_count, line.index(phrase2) + len(phrase2))

                        text.tag_add(highlights[0], idx1, pos1)
                        text.tag_add(highlights[0], idx2, pos2)

                        # Rotate through highlighting tags
                        highlights.rotate(1)

            win.mainloop()


if __name__ == '__main__':
    FuzzySearch().word_search()

