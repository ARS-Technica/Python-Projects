"""
Attempt to highlight the correct portion of the text.
Figured out the correct format for highlighting. (Line.Word)
"""


import re
# Import tkinter library
from tkinter import filedialog
from tkinter import *

class FuzzySearch:
    def word_search(self, phrase):
        win = Tk()
        # win.geometry("750x450")
        
        text = Text(win)
        text.pack()

        # How close do words need to be inside a sentence to be detected.
        proximity = 5

        # Define the color codes for highlighting the text in a terminal
        color1 = '\033[48;2;255;0;0m'   # Red background
        color2 = '\033[48;2;0;255;0m'   # Green background
        reset_color = '\033[0m'         # Reset color to default  
        
        # Define the color codes for highlighting the text in a textfield
        text.tag_config('redundant', background='red')    # Red background
        
        # Reset color to default
        # t.tag_delete('failed')     
                
        # Use the filedialog module to allow the user to select the file to search
        filename = filedialog.askopenfilename()
        
        # Line counter for use in the highlighting
        line = 0


        # Open the file to be searched
        with open(filename, 'r') as file:

            # Read the file line by line
            for line in file:
                line += 1
                text.insert(END, line)

                # Check if both words are in the line within the specified proximity
                if phrase[0] and phrase[1] in line:
                    words = re.findall(r"[\w']+|[.,!?;]", line)
                    # Unicode version: re.findall(r"\w+|[^\w\s]", text, re.UNICODE)

                    if abs(words.index(phrase[0]) - words.index(phrase[1])) <= proximity:
                        # If the words are found within proximity, highlight them in the line and print the result                       

                        print(line.index(phrase[0]), len(phrase[0]))
                        #print('Word at line index:', line[line.index(phrase[0])])
                        print('Word at word index:', words[words.index(phrase[0])], '\n')
                        
                        print(line.index(phrase[1]), len(phrase[1]))
                        #print('Word at line index:', line[line.index(phrase[1])])
                        print('Word at word index:', words[words.index(phrase[1])], '\n')

                        #idx0 = float(str(line) + str(words.index(phrase[0])))
                        #pos0 = '{}+{}c'.format(idx0, len(phrase[0])) 
                        #idx1 = words.index(phrase[1])
                        #pos1 = '{}+{}c'.format(idx1, len(phrase[1])) 

                        #text.tag_add('redundant', idx0, pos0)
                        #text.tag_add('redundant', idx1, pos1)
                        
                        text.tag_add('redundant', 1.126, 1.131)
                        text.tag_add('redundant', 1.136, 1.142)

            win.mainloop()


if __name__ == '__main__':
    FuzzySearch().word_search(phrase = ('first', 'second'))

