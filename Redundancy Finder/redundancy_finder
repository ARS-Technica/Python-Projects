"""
Expanding Tkinter code.
Adding text field to application for desktop use.
"""


import re
from tkinter import filedialog
from tkinter import *

class FuzzySearch:
    def word_search(self, phrase):
        root = Tk()
        textwin = Text(root)
        textwin.pack()

        # How close do words need to be inside a sentence to be detected.
        proximity = 5

        # Define the color codes for highlighting the text in a terminal
        color1 = '\033[48;2;255;0;0m'   # Red background
        color2 = '\033[48;2;0;255;0m'   # Green background
        reset_color = '\033[0m'         # Reset color to default  
        
        # Define the color codes for highlighting the text in a textfield
        textwin.tag_config('failed', background='red')    # Red background
        
        # Reset color to default
        # t.tag_delete('failed')     
                
        # Use the filedialog module to allow the user to select the file to search
        filename = filedialog.askopenfilename()


        # Open the file to be searched
        with open(filename, 'r') as file:

            # Read the file line by line
            for line in file:
                textwin.insert(END, line)


                '''
                # Check if both words are in the line within the specified proximity
                if phrase[0] and phrase[1] in line:
                    words = re.findall(r"[\w']+|[.,!?;]", line)
                    # Unicode version: re.findall(r"\w+|[^\w\s]", text, re.UNICODE)

                    if abs(words.index(phrase[0]) - words.index(phrase[1])) <= proximity:
                        # If the words are found within proximity, highlight them in the line and print the result                       
                        highlighted = line.replace(phrase[0], f'{color1}{phrase[0]}{reset_color}').replace(phrase[1], f'{color2}{phrase[1]}{reset_color}')
                        print(highlighted, end='')
                '''


                '''



                def search(text_widget, keyword, tag):
                    pos = '1.0'

                    while True:
                        idx = text_widget.search(keyword, pos, END)
                        if not idx: break

                        pos = '{}+{}c'.format(idx, len(keyword))
                        text_widget.tag_add(tag, idx, pos)

                search(textwin, 'Failed', 'failed') 
                '''   

            root.mainloop()


if __name__ == '__main__':
    FuzzySearch().word_search(phrase = ('first', 'second'))

