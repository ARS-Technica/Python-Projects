"""
Load the two words in the redundant phrase from an external file,
rather than calling the phrase as part of the function call.

This should allow the redundancy finder to search each line for a long 
list of redundancies, rather than searching for one at a time.
"""


import re
# Import tkinter library
from tkinter import filedialog
from tkinter import *

class FuzzySearch:
    def word_search(self, phrase):
        win = Tk()
        # win.geometry("750x450")
        
        text = Text(win)
        text.pack()

        # How close do words need to be inside a sentence to be detected.
        proximity = 5

        # Define the color codes for highlighting the text in a textfield
        text.tag_config('redundant', background='red')    # Red background

        # Reset color to default
        # t.tag_delete('failed')     

        # Use the filedialog module to allow the user to select the file to search
        filename = filedialog.askopenfilename()

        # Load a file of phrases to search the text file for
        # This will be pre-selected, rather than user-selected
        with open('redundant_phrases.txt', 'r') as pairs_file:
            redundancies = [line.strip().split(',') for line in pairs_file]

        print(redundancies)

        # Line counter for use in the highlighting
        line_count = 0


        # Open the file to be searched
        with open(filename, 'r') as file:

            # Read the file line by line
            for line in file:
                line_count += 1
                text.insert(END, line)

                # Check if both words are in the line within the specified proximity
                if phrase[0] and phrase[1] in line:
                    words = re.findall(r"[\w']+|[.,!?;]", line)
                    # Unicode version: re.findall(r"\w+|[^\w\s]", text, re.UNICODE)

                    if abs(words.index(phrase[0]) - words.index(phrase[1])) <= proximity:
                        # If the words are found within proximity, highlight them in the line and print the result                       
                        idx0 = '{}.{}'.format(line_count, line.index(phrase[0]))
                        pos0 = '{}.{}'.format(line_count, line.index(phrase[0]) + len(phrase[0])) 
                        idx1 = '{}.{}'.format(line_count, line.index(phrase[1]))
                        pos1 = '{}.{}'.format(line_count, line.index(phrase[1]) + len(phrase[1]))

                        text.tag_add('redundant', idx0, pos0)
                        text.tag_add('redundant', idx1, pos1)

            win.mainloop()


if __name__ == '__main__':
    FuzzySearch().word_search(phrase = ('first', 'second'))

