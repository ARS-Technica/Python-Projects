# A Python function for parsing regular expression with a library like regex or simple parsing to explain what a user's regex input does in plain English next to it?


import re
import sre_parse
from sre_parse import SubPattern


CATEGORY_MAP = {
    "category_digit": "a digit (0-9)",
    "category_not_digit": "a non-digit character",
    "category_space": "a whitespace character (space, tab, or newline)",
    "category_not_space": "a non-whitespace character",
    "category_word": "a word character (letter, digit, or underscore)",
    "category_not_word": "a non-word character",
}


def explain_regex(pattern):
    try:
        parsed = sre_parse.parse(pattern)
    except re.error as e:
        return f"Invalid regex: {e}"

    def _explain(parsed_pattern):
        # If it's a SubPattern object, turn it into list of tokens
        if isinstance(parsed_pattern, SubPattern):
            parsed_pattern = list(parsed_pattern)

        parts = []
        for t_type, t_value in parsed_pattern:
            t_name = str(t_type)

            if t_name == "LITERAL":

            elif t_name == "ANY":

            elif t_name == "IN":  # Character set

            elif t_name == "MAX_REPEAT":

            elif t_name == "SUBPATTERN":

            elif t_name == "BRANCH":  # Alternation (|)

            elif t_name == "CATEGORY":

            elif t_name == "AT":

            else:
                # If itâ€™s a SubPattern again, recurse



# Example
print(explain_regex(r"^\d{3}-[A-Z]{2}$"))

# Matches the start of the string, a digit (0-9) exactly 3 times, the character '-', A-Z exactly 2 times, the end of the string
