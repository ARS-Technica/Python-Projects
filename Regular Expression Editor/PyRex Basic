"""
The goal of this project is to better familarize myself
with both Python's Tkinter and Regular Expression libraries.

Once finished, this project will allow users to text regular
expressions on a test bed of sample text while simultaneously
offering a cheatsheet of common regex expressions and 
storage for a rolodex of their the most useful regex snippets.
"""


# Made Treeview Widgets collapsable


# TODO: Restore "Clear" Button 
# TODO: Create export options
# TODO: Create "View" Menu with laout options
# TODO: Place Regex String beneath text windows    
# TODO: Cheetsheet in extenable panel below interface
# TODO: Make search Apply to larger text widget for integration into Text Editor


# Syntax Highlighting for Regex Input
# Add line numbers to match results.
# Save and Load Regular Expressions 
# Menu Options: Add "Save Regex" and "Load Regex" options in the File menu.
# Search History 
# Resizable Widgets
    # Allow the regex_input, test_string_input, and match_result widgets to resize dynamically with the window.
# Add alternating row colors for better readability.
# Regex Validation
    # Provide real-time feedback if the entered regex is invalid, instead of waiting for the "Match" button.
    # Use re.compile() to check the validity of the regex whenever it is edited.
# Refactor into Classes
    # RegexEditor: Main application class.
    # RegexTester: Handles regex matching logic.
    # TreeviewManager: Manages the Treeview widgets.


import tkinter as tk
from tkinter import ttk
import re
import tkinter.filedialog as filedialog
from tkinter import simpledialog, messagebox

categories = {
    "Category 0": {"Key1": "Value1", "Key2": "Value2"},
    "Category 1": {"Key3": "Value3", "Key4": "Value4"},
}

def create_window():
    window = tk.Tk()
    window.title("PyRex Regular Expression Editor")
    window.geometry("900x600")

    # Create menu, toolbar, and widgets
    create_menu(window)
    create_toolbar(window)
    create_widgets(window)

    window.mainloop()

def create_menu(window):
    menu_bar = tk.Menu(window)

    file_menu = tk.Menu(menu_bar, tearoff=0)
    file_menu.add_command(label="Export to File", command=export_results)
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=window.destroy)

    search_menu = tk.Menu(menu_bar, tearoff=0)
    global match_mode_var
    match_mode_var = tk.IntVar(value=0)  # 0 = "Instance", 1 = "Sentence"

    search_menu.add_checkbutton(
        label="Match Instances", variable=match_mode_var, onvalue=0, offvalue=1, command=lambda: toggle_search_mode(0)
    )
    search_menu.add_checkbutton(
        label="Match Sentences", variable=match_mode_var, onvalue=1, offvalue=0, command=lambda: toggle_search_mode(1)
    )

    menu_bar.add_cascade(label="File", menu=file_menu)
    menu_bar.add_cascade(label="Search", menu=search_menu)

    window.config(menu=menu_bar)

def create_toolbar(window):
    toolbar = ttk.Frame(window, padding="5", relief="raised")
    toolbar.grid(row=0, column=0, sticky=(tk.W, tk.E))

    # Add Regular Expressions toggle button
    toggle_button = ttk.Button(toolbar, text="Regular Expressions", command=toggle_treeview_section)
    toggle_button.grid(row=0, column=0, padx=5)

def create_widgets(window):
    global treeview_frame, main_frame

    window.columnconfigure(0, weight=1)
    window.rowconfigure(1, weight=1)

    main_frame = ttk.Frame(window, padding="5")
    main_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    main_frame.columnconfigure(0, weight=1)
    main_frame.columnconfigure(1, weight=1)
    main_frame.rowconfigure(1, weight=1)
    main_frame.rowconfigure(2, weight=3)

    create_regex_input(main_frame)
    create_test_string_field(main_frame)
    create_match_results_field(main_frame)
    create_buttons(main_frame)

    # Treeview section in collapsible frame
    treeview_frame = ttk.Frame(main_frame, padding="5")
    treeview_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
    treeview_frame.columnconfigure(0, weight=1)
    treeview_frame.columnconfigure(1, weight=1)

    # Create the Treeview widgets
    category_tree = create_category_treeview(treeview_frame)
    category_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
    category_tree.bind("<<TreeviewSelect>>", lambda event: on_category_select(event, key_value_tree))

    key_value_tree = create_key_value_treeview(treeview_frame)
    key_value_tree.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))

def toggle_treeview_section():
    """Toggles the visibility of the Treeview section."""
    global treeview_frame

    if treeview_frame.winfo_ismapped():  # If the Treeview frame is visible
        treeview_frame.grid_remove()  # Hide the Treeview frame
    else:
        treeview_frame.grid()  # Show the Treeview frame

    adjust_window_size()

def adjust_window_size():
    """Adjusts the window size dynamically to fit visible widgets."""
    main_frame.update_idletasks()
    width = main_frame.winfo_width()
    height = main_frame.winfo_height()
    main_frame.winfo_toplevel().geometry(f"{width}x{height}")

def create_regex_input(parent):
    global regex_input
    ttk.Label(parent, text="Regular Expression:").grid(row=0, column=0, sticky=tk.W)
    regex_input = tk.Text(parent, height=3, wrap="word")
    regex_input.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
    regex_input.insert("end", "[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}")

def create_test_string_field(parent):
    global test_string_input
    ttk.Label(parent, text="Test String:").grid(row=2, column=0, sticky=tk.W)
    test_string_input = tk.Text(parent, height=10, wrap="word")
    test_string_input.grid(row=3, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
    test_string_input.insert("end", "Alice's email is alice@example.com.")

def create_match_results_field(parent):
    global match_result
    ttk.Label(parent, text="Match Results:").grid(row=2, column=1, sticky=tk.W)
    match_result = tk.Text(parent, height=10, wrap="word", state="disabled")
    match_result.grid(row=3, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))

def create_buttons(parent):
    ttk.Button(parent, text="Match", command=perform_match).grid(row=4, column=0, pady=10)
    ttk.Button(parent, text="Clear Fields", command=clear_fields).grid(row=4, column=1, pady=10)

def create_category_treeview(parent):
    """Creates the Category Treeview with styles."""
    tree = ttk.Treeview(parent, show="tree", selectmode="browse")
    for category in categories.keys():
        tree.insert("", "end", text=category)
    return tree

def create_key_value_treeview(parent):
    """Creates the Key-Value Treeview with styles."""
    tree = ttk.Treeview(parent, columns=("Key", "Value"), show="headings")
    tree.heading("Key", text="Key")
    tree.heading("Value", text="Value")
    return tree

def on_category_select(event, key_value_tree):
    """Handles selection in the Category Treeview."""
    selected_item = category_tree.focus()
    if selected_item:
        category = category_tree.item(selected_item, "text")
        display_key_value_pairs(category, key_value_tree)

def display_key_value_pairs(category, key_value_tree):
    key_value_tree.delete(*key_value_tree.get_children())
    if category in categories:
        for key, value in categories[category].items():
            key_value_tree.insert("", "end", values=(key, value))

def clear_fields():
    regex_input.delete("1.0", tk.END)
    test_string_input.delete("1.0", tk.END)
    match_result.config(state="normal")
    match_result.delete("1.0", tk.END)
    match_result.config(state="disabled")

def perform_match():
    pass  # Placeholder

def export_results():
    pass  # Placeholder

if __name__ == "__main__":
    create_window()

