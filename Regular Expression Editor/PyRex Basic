"""
The goal of this project is to better familarize myself
with both Python's Tkinter and Regular Expression libraries.

Once finished, this project will allow users to text regular
expressions on a test bed of sample text while simultaneously
offering a cheatsheet of common regex expressions and 
storage for a rolodex of their the most useful regex snippets.
""" 

"""
Note: 
Now there's too much space at the bottom of the window.  When I press the Regular 
Expressions button in this program, the test_string_input text widget shrinks 
in height.
"""

# regex_input shrinks when Treeview panel is toggled on.


import tkinter as tk
from tkinter import ttk
import re

import tkinter.filedialog as filedialog # To export search results as an .rtf
from tkinter import simpledialog
from tkinter import messagebox

# Example data for the Treeview
categories = {
    'Category 0': {'Key1': 'Value1', 'Key2': 'Value2', 'Key3': 'Value3', 'Key4': 'Value4', 'Key5': 'Value5', 'Key6': 'Value6', 'Key7': 'Value7', 'Key8': 'Value8', 'Key9': 'Value9', 'Key10': 'Value10', 'Key11': 'Value11', 'Key12': 'Value12', 'Key13': 'Value13', 'Key14': 'Value14', 'Key15': 'Value15', 'Key16': 'Value16', 'Key17': 'Value17', 'Key18': 'Value18', 'Key19': 'Value19', 'Key20': 'Value20', 'Key21': 'Value21', 'Key22': 'Value22', 'Key23': 'Value23', 'Key24': 'Value24', 'Key25': 'Value25'}, 
    'Category 1': {'Key26': 'Value26', 'Key27': 'Value27', 'Key28': 'Value28', 'Key29': 'Value29', 'Key30': 'Value30', 'Key31': 'Value31', 'Key32': 'Value32', 'Key33': 'Value33', 'Key34': 'Value34', 'Key35': 'Value35', 'Key36': 'Value36', 'Key37': 'Value37', 'Key38': 'Value38', 'Key39': 'Value39', 'Key40': 'Value40', 'Key41': 'Value41', 'Key42': 'Value42', 'Key43': 'Value43', 'Key44': 'Value44', 'Key45': 'Value45', 'Key46': 'Value46', 'Key47': 'Value47', 'Key48': 'Value48', 'Key49': 'Value49', 'Key50': 'Value50'}, 
    'Category 2': {'Key51': 'Value51', 'Key52': 'Value52', 'Key53': 'Value53', 'Key54': 'Value54', 'Key55': 'Value55', 'Key56': 'Value56', 'Key57': 'Value57', 'Key58': 'Value58', 'Key59': 'Value59', 'Key60': 'Value60', 'Key61': 'Value61', 'Key62': 'Value62', 'Key63': 'Value63', 'Key64': 'Value64', 'Key65': 'Value65', 'Key66': 'Value66', 'Key67': 'Value67', 'Key68': 'Value68', 'Key69': 'Value69', 'Key70': 'Value70', 'Key71': 'Value71', 'Key72': 'Value72', 'Key73': 'Value73', 'Key74': 'Value74', 'Key75': 'Value75'}, 
}

# Global variable to track toggle state
treeview_visible = False
 

# User Interface --------------------------------------------------------------

def create_window():
    """Creates the main window for the application."""
    global root, treeview_frame

    root = tk.Tk()
    root.title("PyRex Regular Expression Editor")
    root.geometry("900x600")

    # Create menu, toolbar, and main widgets
    create_menu(root)
    create_toolbar(root)
    create_widgets(root)

    # Start the main event loop
    root.mainloop()


def create_menu(window):
    """Creates the main menu."""
    menu_bar = tk.Menu(window)

    # File menu
    file_menu = tk.Menu(menu_bar, tearoff=0)
    file_menu.add_command(label="Export to File", command=export_results)
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=window.destroy)

    # Search menu
    search_menu = tk.Menu(menu_bar, tearoff=0)

    # Toggle between Match Results being returned as Instances or Sentences
    global match_mode_var
    # Create variable for Match Results checkbutton
    # Global variable to track the match mode
    match_mode_var = tk.IntVar(value=0)  # 0 = "Instance", 1 = "Sentence"

    # Add mutually exclusive checkbuttons with toggle logic
    search_menu.add_checkbutton(
        label="Match Instances",
        variable=match_mode_var,
        onvalue=0,
        offvalue=1,
        command=lambda: toggle_search_mode(0)
    )
    search_menu.add_checkbutton(
        label="Match Sentences",
        variable=match_mode_var,
        onvalue=1,
        offvalue=0,
        command=lambda: toggle_search_mode(1)
    )

    # Add menus to the menu bar
    menu_bar.add_cascade(label="File", menu=file_menu)
    menu_bar.add_cascade(label="Search", menu=search_menu)

    window.config(menu=menu_bar)


def create_toolbar(window):
    """Creates a toolbar at the top of the window (for Treeview toggle button)"""
    toolbar = ttk.Frame(window, padding="5")
    toolbar.grid(row=0, column=0, sticky="ew")

    # Toggle button for the Treeview section
    toggle_button = ttk.Button(
        toolbar,
        text="Regular Expressions",
        command=toggle_treeview_visibility
    )
    toggle_button.pack(side="left", padx=5)



def create_widgets(window):
    """Creates the main UI components with fixed widget sizes."""
    global main_frame, treeview_frame, regex_input, test_string_input, match_result

    # Configure window grid
    window.columnconfigure(0, weight=1)  # Single column
    window.rowconfigure(1, weight=1)    # Main frame (static widgets)
    window.rowconfigure(2, weight=0)    # Treeview frame (toggling widget)

    # Toolbar for Regular Expressions Button
    toolbar = ttk.Frame(window, padding="5")
    toolbar.grid(row=0, column=0, sticky="ew")
    ttk.Button(
        toolbar,
        text="Regular Expressions",
        command=toggle_treeview_visibility
    ).pack(side="left", padx=5)

    # Main Frame (Fixed Widgets)
    main_frame = ttk.Frame(window, padding="5")
    main_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    # Configure main_frame grid
    main_frame.columnconfigure(0, weight=1)
    main_frame.columnconfigure(1, weight=1)
    main_frame.rowconfigure(0, weight=0)  # Regular Expression label (fixed)
    main_frame.rowconfigure(1, weight=0)  # Regular Expression input (fixed)
    main_frame.rowconfigure(2, weight=0)  # Test String/Match Results labels (fixed)
    main_frame.rowconfigure(3, weight=1)  # Test String/Match Results widgets (expandable)
    main_frame.rowconfigure(4, weight=0)  # Buttons row (fixed)

    # Regular Expression Input
    ttk.Label(main_frame, text="Regular Expression:").grid(row=0, column=0, columnspan=2, sticky=tk.W, pady=(5, 2))
    regex_input = tk.Text(main_frame, height=3, wrap="word")
    regex_input.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(2, 5))

    # Test String and Match Results Side by Side
    ttk.Label(main_frame, text="Test String:").grid(row=2, column=0, sticky=tk.W, pady=(5, 2))
    ttk.Label(main_frame, text="Match Results:").grid(row=2, column=1, sticky=tk.W, pady=(5, 2))

    test_string_input = tk.Text(main_frame, height=10, wrap="word")
    test_string_input.grid(row=3, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))

    match_result = tk.Text(main_frame, height=10, wrap="word", state="disabled")
    match_result.grid(row=3, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))

    # Buttons
    button_frame = ttk.Frame(main_frame)
    button_frame.grid(row=4, column=0, columnspan=2, sticky=tk.EW)
    button_frame.columnconfigure(0, weight=1)
    button_frame.columnconfigure(1, weight=1)
    ttk.Button(button_frame, text="Match", command=perform_match).grid(row=0, column=0, pady=5, sticky=tk.W)
    ttk.Button(button_frame, text="Clear Fields", command=clear_fields).grid(row=0, column=1, pady=5, sticky=tk.E)

    # Treeview Panel (Collapsible)
    treeview_frame = ttk.Frame(window, padding="0")
    treeview_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
    treeview_frame.columnconfigure(0, weight=1)
    treeview_frame.columnconfigure(1, weight=1)
    create_treeview_section(treeview_frame)
    treeview_frame.grid_remove()  # Start hidden



'''
def create_widgets(window):
    """Creates the main UI components."""
    global main_frame, treeview_frame

    window.columnconfigure(0, weight=1)
    window.rowconfigure(1, weight=1)

    # Main Frame
    main_frame = ttk.Frame(window, padding="5")
    main_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    main_frame.columnconfigure(0, weight=1)  # Match button
    main_frame.columnconfigure(1, weight=1)  # Clear Fields button
    main_frame.rowconfigure(1, weight=1)  # Regex and Test String section

    # Create collapsible Treeview Frame (initially hidden)
    treeview_frame = ttk.Frame(window, padding="5")
    treeview_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
    treeview_frame.columnconfigure(0, weight=1)
    treeview_frame.columnconfigure(1, weight=1)
    create_treeview_section(treeview_frame)
    treeview_frame.grid_remove()  # Start hidden

    # Add Regex Input, Test String, and Match Result Fields
    create_regex_input(main_frame)
    create_test_string_field(main_frame)
    create_match_results_field(main_frame)
    create_buttons(main_frame)
'''

def create_regex_input(parent):
    global regex_input
    ttk.Label(parent, text="Regular Expression:").grid(row=0, column=0, sticky=tk.W)
    regex_input = tk.Text(parent, height=3, wrap="word")
    regex_input.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
    
    # regex_input.insert("end", "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}") # Find Email Addresses
    # regex_input.insert("end", "https?://[^\s]+") # Find URLs
    # regex_input.insert("end", "[A|B][a-z]+")  # Find Words Starting with 'A' or 'B'
    regex_input.insert("end", "[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}")  # Find Domains


def create_test_string_field(parent):
    global test_string_input

    # Test String
    ttk.Label(parent, text="Test String:").grid(row=2, column=0, sticky=tk.W)
    test_string_input = tk.Text(parent, height=10, wrap="word")
    test_string_input.grid(row=3, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    test_string_input.insert("end",     
    """Alice's email is alice@example.com, and Bob's email is bob@example.org. Contact us at support@company.com or visit our website: https://www.example.com."""
    )


def create_match_results_field(parent):
    global match_result

    # Match Results
    ttk.Label(parent, text="Match Results:").grid(row=2, column=1, sticky=tk.W)
    match_result = tk.Text(parent, height=10, wrap="word", state="disabled")
    match_result.grid(row=3, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))


def create_buttons(parent):
    ttk.Button(parent, text="Match", command=perform_match).grid(row=4, column=0, pady=10)
    ttk.Button(parent, text="Clear Fields", command=clear_fields).grid(row=4, column=1, pady=10)
 

# /User Interface -------------------------------------------------------------

# Matching Functions ----------------------------------------------------------

def perform_match(*args):
    pass

def match_instances(*args):
    pass
        

def match_sentences(*args):
    pass

def clear_fields():
    pass

def export_results():
    pass

def update_match_result(text):
    pass

# /Matching Functions ---------------------------------------------------------

# Treeview Functions ---------------------------------------------------------

def create_treeview_section(parent):
    global category_tree, key_value_tree

    # Category Treeview (Left)
    category_tree = create_category_treeview(parent)
    category_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
    category_tree.bind("<<TreeviewSelect>>", lambda event: on_category_select(event, key_value_tree))

    # Key-Value Treeview (Right)
    key_value_tree = create_key_value_treeview(parent)
    key_value_tree.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))


def create_category_treeview(parent):
    tree = ttk.Treeview(parent, show="tree", selectmode="browse")
    scrollbar = ttk.Scrollbar(parent, orient="vertical", command=tree.yview)
    scrollbar.grid(row=0, column=1, sticky="ns")
    tree.configure(yscrollcommand=scrollbar.set)

    for category in categories.keys():
        tree.insert("", "end", text=category)

    return tree


def create_key_value_treeview(parent):
    """Creates the Key-Value Treeview with styles and alternating row colors."""
    tree = ttk.Treeview(parent, columns=("Key", "Value"), show="headings")
    tree.heading("Key", text="Key")
    tree.heading("Value", text="Value")
    tree.column("Key", width=50, anchor="w")
    tree.column("Value", width=300, anchor="w")

    scrollbar = ttk.Scrollbar(parent, orient="vertical", command=tree.yview)
    scrollbar.grid(row=0, column=2, sticky="ns")
    tree.configure(yscrollcommand=scrollbar.set)

    apply_row_styles(tree)
    configure_hover_effect(tree)

    # Bind double-click to append the key to the regex_input
    tree.bind("<Double-Button-1>", lambda event: on_key_double_click(event, tree))

    return tree

            
def display_key_value_pairs(category, key_value_tree):
    """Populates the Key-Value Treeview with keys and values from the selected category."""

    key_value_tree.delete(*key_value_tree.get_children())  # Clear existing data
    
    if category in categories:
        for key, value in categories[category].items():
            key_value_tree.insert("", "end", values=(key, value))  # Add both key and value

        
def on_category_select(event, key_value_tree):
    """Handles selection in the Category Treeview."""

    selected_item = category_tree.focus()

    if selected_item:
        category = category_tree.item(selected_item, "text")
        display_key_value_pairs(category, key_value_tree)
        apply_row_styles(key_value_tree)  # Apply styles to the rows


def on_key_double_click(event, tree):
    """Handles double-clicks on the Key-Value Treeview by appending the key to the regex_input field."""
    # Get the selected item
    selected_item = tree.focus()
    if not selected_item:
        return  # No item selected

    # Retrieve the key from the selected row
    selected_values = tree.item(selected_item, "values")
    if selected_values:
        key = selected_values[0]  # The key is in the first column

        # Append the key to the regex_input
        current_text = regex_input.get("1.0", tk.END).strip()  # Get current content
        new_text = current_text + key  # Append the key
        regex_input.delete("1.0", tk.END)  # Clear the current content
        regex_input.insert("1.0", new_text)  # Insert the updated content


def toggle_treeview_visibility():
    """Toggles the visibility of the Treeview frame."""
    global treeview_visible, treeview_frame

    treeview_visible = not treeview_visible

    if treeview_visible:
        treeview_frame.grid()  # Show the frame
    else:
        treeview_frame.grid_remove()  # Hide the frame
 
# /Treeview Functions ---------------------------------------------------------

# Treeview Styling Functions -----------------------------------------------

def apply_row_styles(tree):
    pass


def on_double_click(event):
    pass

# Treeview Styling Functions -----------------------------------------------


if __name__ == "__main__":
    create_window()

