"""
The goal of this project is to better familarize myself
with both Python's Tkinter and Regular Expression libraries.

Once finished, this project will allow users to text regular
expressions on a test bed of sample text while simultaneously
offering a cheatsheet of common regex expressions and 
storage for a rolodex of their the most useful regex snippets.
""" 


# Trying to keep all other widgets static when Treeview panel is toggled on


import tkinter as tk
from tkinter import ttk

# Example data for the Treeview
categories = {
    'Category 0': {'Key1': 'Value1', 'Key2': 'Value2', 'Key3': 'Value3'},
    'Category 1': {'Key4': 'Value4', 'Key5': 'Value5'},
}

# Track Treeview visibility state
treeview_visible = False
original_height = 400  # Initial window height
expanded_height = 600  # Height when Treeview panel is expanded


def create_window():
    """Creates the main window for the application."""
    global root, treeview_frame

    root = tk.Tk()
    root.title("PyRex Regular Expression Editor")
    root.geometry(f"900x{original_height}")  # Set initial size

    # Create menu, toolbar, and main widgets
    create_menu(root)
    create_toolbar(root)
    create_widgets(root)

    root.mainloop()


def create_menu(window):
    """Creates the main menu."""
    menu_bar = tk.Menu(window)

    # File menu
    file_menu = tk.Menu(menu_bar, tearoff=0)
    file_menu.add_command(label="Export to File", command=lambda: None)  # Placeholder
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=window.destroy)

    # Search menu
    search_menu = tk.Menu(menu_bar, tearoff=0)
    global match_mode_var
    match_mode_var = tk.IntVar(value=0)  # 0 = "Instance", 1 = "Sentence"

    search_menu.add_checkbutton(
        label="Match Instances", variable=match_mode_var, onvalue=0, offvalue=1
    )
    search_menu.add_checkbutton(
        label="Match Sentences", variable=match_mode_var, onvalue=1, offvalue=0
    )

    menu_bar.add_cascade(label="File", menu=file_menu)
    menu_bar.add_cascade(label="Search", menu=search_menu)

    window.config(menu=menu_bar)


def create_toolbar(window):
    """Creates a toolbar with a toggle button for the Treeview widgets."""
    toolbar = ttk.Frame(window, padding="5")
    toolbar.grid(row=0, column=0, sticky="ew")

    # Toggle button for the Treeview section
    toggle_button = ttk.Button(
        toolbar,
        text="Regular Expressions",
        command=toggle_treeview_visibility
    )
    toggle_button.pack(side="left", padx=5)


def create_widgets(window):
    """Creates the main UI components."""
    global main_frame, treeview_frame

    window.columnconfigure(0, weight=1)
    window.rowconfigure(1, weight=1)

    # Main Frame
    main_frame = ttk.Frame(window, padding="5")
    main_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    # Configure grid layout for main_frame
    main_frame.columnconfigure(0, weight=1)
    main_frame.columnconfigure(1, weight=1)

    # Fix row weights to prevent resizing of text widgets
    main_frame.rowconfigure(1, weight=0)  # Regex input fixed height
    main_frame.rowconfigure(2, weight=0)  # Labels fixed height
    main_frame.rowconfigure(3, weight=1)  # Test String and Match Result fixed height

    # Create collapsible Treeview Frame (hidden initially)
    treeview_frame = ttk.Frame(window, padding="0")  # Remove extra padding
    treeview_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
    treeview_frame.columnconfigure(0, weight=1)
    treeview_frame.columnconfigure(1, weight=1)
    treeview_frame.rowconfigure(0, weight=1)  # Ensure Treeview rows are resizable
    create_treeview_section(treeview_frame)
    treeview_frame.grid_remove()  # Start hidden

    # Add Regex Input, Test String, and Match Result Fields
    create_regex_input(main_frame)
    create_test_string_field(main_frame)
    create_match_results_field(main_frame)
    create_buttons(main_frame)


def toggle_treeview_visibility():
    """Toggles the visibility of the Treeview frame and adjusts the window size."""
    global treeview_visible, treeview_frame

    treeview_visible = not treeview_visible

    if treeview_visible:
        # Show Treeview and expand window
        treeview_frame.grid()
        root.geometry(f"900x{expanded_height}")
    else:
        # Hide Treeview and shrink window
        treeview_frame.grid_remove()
        root.geometry(f"900x{original_height}")


def create_regex_input(parent):
    global regex_input
    ttk.Label(parent, text="Regular Expression:").grid(row=0, column=0, sticky=tk.W)
    regex_input = tk.Text(parent, height=2, wrap="word")  # Fixed height
    regex_input.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E))


def create_test_string_field(parent):
    global test_string_input

    # Test String
    ttk.Label(parent, text="Test String:").grid(row=1, column=0, sticky=tk.W, pady=(5, 5))
    test_string_input = tk.Text(parent, height=10, wrap="word")
    test_string_input.grid(row=1, column=1, sticky=(tk.W, tk.E))


def create_match_results_field(parent):
    global match_result

    # Match Results
    ttk.Label(parent, text="Match Results:").grid(row=2, column=0, sticky=tk.W, pady=(5, 5))
    match_result = tk.Text(parent, height=10, wrap="word", state="disabled")
    match_result.grid(row=2, column=1, sticky=(tk.W, tk.E))


'''
def create_test_string_field(parent):
    global test_string_input

    # Test String Label
    ttk.Label(parent, text="Test String:").grid(row=2, column=0, sticky=tk.W, pady=(5, 5))

    # Test String Input
    test_string_input = tk.Text(parent, height=10, wrap="word")  # Fixed height
    test_string_input.grid(row=3, column=0, sticky=(tk.W, tk.E))  # Avoid expanding


def create_match_results_field(parent):
    global match_result

    # Match Results Label
    ttk.Label(parent, text="Match Results:").grid(row=2, column=1, sticky=tk.W, pady=(5, 5))

    # Match Results Text
    match_result = tk.Text(parent, height=10, wrap="word", state="disabled")  # Fixed height
    match_result.grid(row=3, column=1, sticky=(tk.W, tk.E))  # Avoid expanding
'''


def create_buttons(parent):
    # Buttons
    ttk.Button(parent, text="Match", command=perform_match).grid(row=3, column=0, pady=5, sticky=tk.W)
    ttk.Button(parent, text="Clear Fields", command=clear_fields).grid(row=3, column=1, pady=5, sticky=tk.E)



'''
def create_buttons(parent):
    # Place buttons closer to the Treeview panel
    buttons_frame = ttk.Frame(parent, padding="0")  # Remove padding
    buttons_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E))

    ttk.Button(buttons_frame, text="Match", command=lambda: None).pack(side=tk.LEFT, padx=5)
    ttk.Button(buttons_frame, text="Clear Fields", command=lambda: None).pack(side=tk.LEFT, padx=5)
'''

def create_treeview_section(parent):
    global category_tree, key_value_tree

    # Category Treeview
    category_tree = create_category_treeview(parent)
    category_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
    category_tree.bind("<<TreeviewSelect>>", lambda event: on_category_select(event, key_value_tree))

    # Key-Value Treeview
    key_value_tree = create_key_value_treeview(parent)
    key_value_tree.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))

    # Adjust row configuration for more space
    parent.rowconfigure(0, weight=1)  # Allow Treeview widgets to expand


def create_category_treeview(parent):
    tree = ttk.Treeview(parent, show="tree", selectmode="browse")
    scrollbar = ttk.Scrollbar(parent, orient="vertical", command=tree.yview)
    scrollbar.grid(row=0, column=1, sticky="ns")
    tree.configure(yscrollcommand=scrollbar.set)

    for category in categories.keys():
        tree.insert("", "end", text=category)

    return tree


def create_key_value_treeview(parent):
    tree = ttk.Treeview(parent, columns=("Key", "Value"), show="headings")
    tree.heading("Key", text="Key")
    tree.heading("Value", text="Value")
    tree.column("Key", width=50, anchor="w")
    tree.column("Value", width=300, anchor="w")
    scrollbar = ttk.Scrollbar(parent, orient="vertical", command=tree.yview)
    scrollbar.grid(row=0, column=2, sticky="ns")
    tree.configure(yscrollcommand=scrollbar.set)
    return tree


def on_category_select(event, key_value_tree):
    selected_item = category_tree.focus()
    if selected_item:
        category = category_tree.item(selected_item, "text")
        display_key_value_pairs(category, key_value_tree)


def display_key_value_pairs(category, key_value_tree):
    key_value_tree.delete(*key_value_tree.get_children())
    if category in categories:
        for key, value in categories[category].items():
            key_value_tree.insert("", "end", values=(key, value))


if __name__ == "__main__":
    create_window()

