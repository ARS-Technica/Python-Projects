import tkinter as tk
from tkinter import ttk

# Example data for the Treeview
categories = {
    'Category 0': {'Key1': 'Value1', 'Key2': 'Value2', 'Key3': 'Value3'},
    'Category 1': {'Key4': 'Value4', 'Key5': 'Value5'},
}

saved_expressions = {
    'Expression 1': {'Regex1': 'Description1', 'Regex2': 'Description2'},
    'Expression 2': {'Regex3': 'Description3', 'Regex4': 'Description4'},
}

# Global variables
treeview_visible = False
current_data = categories  # Default to "categories"

# Main application window
def create_window():
    """Creates the main window for the application."""
    global root, treeview_frame

    root = tk.Tk()
    root.title("PyRex Regular Expression Editor")
    root.geometry("900x600")

    # Create menu, toolbar, and main widgets
    create_menu(root)
    create_toolbar(root)
    create_widgets(root)

    # Start the main event loop
    root.mainloop()

# Menu creation
def create_menu(window):
    """Creates the main menu."""
    menu_bar = tk.Menu(window)

    # File menu
    file_menu = tk.Menu(menu_bar, tearoff=0)
    file_menu.add_command(label="Export to File", command=lambda: None)  # Placeholder
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=window.destroy)

    # View menu
    view_menu = tk.Menu(menu_bar, tearoff=0)
    view_menu.add_command(
        label="Regular Expression Cheatsheet",
        command=lambda: toggle_treeview_with_data(categories)
    )
    view_menu.add_command(
        label="Saved Expressions",
        command=lambda: toggle_treeview_with_data(saved_expressions)
    )

    menu_bar.add_cascade(label="File", menu=file_menu)
    menu_bar.add_cascade(label="View", menu=view_menu)

    window.config(menu=menu_bar)

# Toolbar creation
def create_toolbar(window):
    """Creates a toolbar with buttons for the Treeview widgets."""
    toolbar = ttk.Frame(window, padding="5")
    toolbar.grid(row=0, column=0, sticky="ew")

    # Button to toggle RegEx CheatSheet
    ttk.Button(
        toolbar,
        text="RegEx CheatSheet",
        command=lambda: toggle_treeview_with_data(categories)
    ).pack(side="left", padx=5)

    # Button to toggle Saved Expressions
    ttk.Button(
        toolbar,
        text="Saved Expressions",
        command=lambda: toggle_treeview_with_data(saved_expressions)
    ).pack(side="left", padx=5)

# Main widgets
def create_widgets(window):
    """Creates the main UI components with fixed widget sizes."""
    global main_frame, treeview_frame

    # Configure window grid
    window.columnconfigure(0, weight=1)  # Single column
    window.rowconfigure(1, weight=1)    # Main frame (static widgets)
    window.rowconfigure(2, weight=0)    # Treeview frame (toggling widget)

    # Main Frame (Fixed Widgets)
    main_frame = ttk.Frame(window, padding="5")
    main_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    # Configure main_frame grid
    main_frame.columnconfigure(0, weight=1)
    main_frame.columnconfigure(1, weight=1)

    # Regular Expression Input
    ttk.Label(main_frame, text="Regular Expression:").grid(row=0, column=0, columnspan=2, sticky=tk.W, pady=(5, 2))
    regex_input = tk.Text(main_frame, height=3, wrap="word")
    regex_input.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(2, 5))

    # Test String and Match Results Side by Side
    ttk.Label(main_frame, text="Test String:").grid(row=2, column=0, sticky=tk.W, pady=(5, 2))
    ttk.Label(main_frame, text="Match Results:").grid(row=2, column=1, sticky=tk.W, pady=(5, 2))

    test_string_input = tk.Text(main_frame, height=10, wrap="word")
    test_string_input.grid(row=3, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))

    match_result = tk.Text(main_frame, height=10, wrap="word", state="disabled")
    match_result.grid(row=3, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))

    # Treeview Panel (Collapsible)
    treeview_frame = ttk.Frame(window, padding="0")
    treeview_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
    create_treeview_section(treeview_frame)
    treeview_frame.grid_remove()  # Start hidden

# Treeview section creation
def create_treeview_section(parent):
    global category_tree, key_value_tree

    # Category Treeview (Left)
    category_tree = ttk.Treeview(parent, show="tree", selectmode="browse")
    category_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))

    # Key-Value Treeview (Right)
    key_value_tree = ttk.Treeview(parent, columns=("Key", "Value"), show="headings")
    key_value_tree.heading("Key", text="Key")
    key_value_tree.heading("Value", text="Value")
    key_value_tree.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))




def populate_treeview(data):
    """
    Populates the category_tree with the given data.
    Clears the key_value_tree to start fresh.
    """
    # Clear the Treeview
    category_tree.delete(*category_tree.get_children())
    key_value_tree.delete(*key_value_tree.get_children())  # Clear the right-side Treeview

    # Populate the category_tree with new data
    for key in data.keys():
        category_tree.insert("", "end", text=key)

    # Set up selection binding to populate the key_value_tree
    def on_select(event):
        selected_item = category_tree.focus()
        if selected_item:
            category = category_tree.item(selected_item, "text")
            display_key_value_pairs(data.get(category, {}), key_value_tree)

    category_tree.bind("<<TreeviewSelect>>", on_select)


'''
def populate_treeview(data):
    """
    Populates the Treeview with the given data.
    """
    # Clear the Treeview
    category_tree.delete(*category_tree.get_children())
    key_value_tree.delete(*key_value_tree.get_children())

    # Populate the Treeview with new data
    for key, value in data.items():
        category_tree.insert("", "end", text=key)
'''

'''
def populate_treeview(data):
    """Populates the Treeview widgets with the selected data."""
    # Clear the category Treeview
    category_tree.delete(*category_tree.get_children())

    # Clear the Key-Value Treeview
    key_value_tree.delete(*key_value_tree.get_children())

    # Populate categories
    for category in data.keys():
        category_tree.insert("", "end", text=category)

    # Bind category selection to update Key-Value Treeview
    category_tree.bind(
        "<<TreeviewSelect>>",
        lambda event: display_key_value_pairs(data, key_value_tree)
    )
'''

def toggle_treeview_with_data(data):
    """
    Toggles the Treeview Panel on/off or repopulates it if the data changes.
    """
    global treeview_visible, treeview_frame

    # Check current data in category_tree
    current_data = category_tree.get_children()
    current_data_keys = {category_tree.item(item, "text") for item in current_data}

    requested_data_keys = set(data.keys())

    if treeview_visible:
        if current_data_keys == requested_data_keys:
            # If the panel is already displaying the requested data, toggle it off
            treeview_frame.grid_remove()
            treeview_visible = False
        else:
            # Repopulate the Treeview with new data
            populate_treeview(data)
    else:
        # Show the Treeview Panel and populate with data
        treeview_frame.grid(row=2, column=0, sticky="nsew")
        populate_treeview(data)
        treeview_visible = True

    # Adjust window size dynamically
    root.update_idletasks()
    new_height = root.winfo_reqheight() + (100 if treeview_visible else 0)
    root.geometry(f"{root.winfo_width()}x{new_height}")


'''
def toggle_treeview_with_data(data):
    """
    Toggles the Treeview Panel on/off or repopulates it if the data changes.
    - If the panel is off, it populates and displays the data.
    - If the panel is already on and showing the same data, it toggles off.
    - If the panel is already on but showing different data, it repopulates with the new data.
    """
    global treeview_visible, treeview_frame

    # Get the tag or attribute to check the current data
    current_data = category_tree.get_children()  # Get all top-level items
    current_data_keys = {category_tree.item(item, "text") for item in current_data}

    requested_data_keys = set(data.keys())

    if treeview_visible:
        if current_data_keys == requested_data_keys:
            # If panel is on and showing the requested data, toggle it off
            treeview_frame.grid_remove()
            treeview_visible = False
        else:
            # If panel is on but showing different data, repopulate it
            populate_treeview(data)
    else:
        # If panel is off, toggle it on and populate with the requested data
        treeview_frame.grid(row=2, column=0, sticky="nsew")
        populate_treeview(data)
        treeview_visible = True

    # Adjust window size dynamically
    root.update_idletasks()
    new_height = root.winfo_reqheight() + (100 if treeview_visible else 0)
    root.geometry(f"{root.winfo_width()}x{new_height}")
'''

def display_key_value_pairs(category_data, key_value_tree):
    """
    Populates the key_value_tree with the key-value pairs of the selected category.
    """
    key_value_tree.delete(*key_value_tree.get_children())  # Clear existing data

    for key, value in category_data.items():
        key_value_tree.insert("", "end", values=(key, value))


'''
# Display Key-Value Pairs
def display_key_value_pairs(data, key_value_tree):
    """Populates the Key-Value Treeview with keys and values from the selected category."""
    selected_item = category_tree.focus()
    if not selected_item:
        return

    category = category_tree.item(selected_item, "text")
    key_value_tree.delete(*key_value_tree.get_children())

    if category in data:
        for key, value in data[category].items():
            key_value_tree.insert("", "end", values=(key, value))
'''

# Run the application
if __name__ == "__main__":
    create_window()
