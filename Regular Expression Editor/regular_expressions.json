{
    "All Tokens":{
        "\\d+": {
		"name":"",
        	"description": "Matches one or more digits",
		"sample_text": "The year is [2024] and the month is [02].",
		"sample_result": "[2024] [02]"
        }
    },
    "Character Classes":{
        "[abc]":{
		"name":"Character Set",
		"description":"Match a single character present in the set",
		"sample_text":"[aeiou]",
		"sample_result":"gl[i]b j[o]cks v[e]x dw[a]rv[e]s!"
        },
        "[^abc]":{
		"name":"Negated Set",
		"description":"Match a single character NOT present in the set",
		"sample_text":"[^aeiou]",
		"sample_result":"[gl]i[b j]o[cks v]e[x dw]a[rv]e[s!]"
        },
        "[a-z]":{
		"name":"Range",
		"description":"Matches a character between two specified characters inclusive.",
		"sample_text":"[g-s]",
		"sample_result":"abcdef[ghijklmnopqrs]tuvwxyz"
        },
        "[^a-z]":{
		"name":"Negated Range",
		"description":"Match a single character NOT between two specified characters",
		"sample_text":"[g-s]",
		"sample_result":"[abcdef]ghijklmnopqrs[tuvwxyz]"
        },
        "[a-zA-Z]":{
		"name":"",
		"description":"Match a single character in the range a-z or A-Z",
		"sample_text":"[xyzABC]",
		"sample_result":"[A]a[B]b[C]cDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwX[x]Y[y]Z[z]"
        },
        ".":{
		"name":"Match Any Character",
		"description":"Match any character except line terminators (linebreaks). Equivalent to [^\n\r].",
		"sample_text":".",
		"sample_result":"[glib jocks vex dwarves!]"
        },        
        "[\s\S]":{
		"name":"Match Any",
		"description":"A character set that can be used to match any character, including line breaks, without the dotall flag (s).",
		"sample_text":"[\\s\\S]",
		"sample_result":"[glib jocks vex dwarves!]"
        },
        "a|b":{
		"name":"Either Or",
		"description":"Match either a or b",
		"sample_text":"a|b",
		"sample_result":"B[a]r[ba]r[a]"
        },
        "\\s":{
		"name":"Whitespace",
		"description":"Match any whitespace character",
		"sample_text":"\\s",
		"sample_result":"Hello[ ]World!"
        },
        "\\S":{
		"name":"Not Whitespace",
		"description":"Match any non-whitespace character",
		"sample_text":"\\S",
		"sample_result":"[Hello] [World!]"
        },
        "\\d":{
		"name":"Digit",
		"description":"Match any digit character (0 -9). Equivalent to [0-9].",
		"sample_text":"(555) 555-5555",
		"sample_result":"([555]) [555]-[5555]"
        },
        "\\D":{
		"name":"Not Digit",
		"description":"Match any non-digit character. Equivalent to [^0-9].",
		"sample_text":"(555) 555-5555",
		"sample_result":"[(]555[)] 555[-]5555"
        },
        "\\w":{
		"name":"Word",
		"description":"Match any low-ascii character. Equivalent to [A-Za-z0-9_].",
		"sample_text":"bonjour, mon frère",
		"sample_result":"[bonjour], [mon] [fr]è[re]"
        },
        "\\W":{
		"name":"Not Word",
		"description":"Match any non-word character. Equivalent to [^A-Za-z0-9_].",
		"sample_text":"bonjour, mon frère",
		"sample_result":"bonjour[, ]mon[ ]fr[è]re"
        },
        "\\p{L}":{
		"name":"Unicode Category",
		"description":"Matches character in specified unicode category. \p{Ll} matches lowercase letters.",
		"sample_text":"",
		"sample_result":""
        },        
        "\\P{L}":{
		"name":"Not Unicode Category",
		"description":"Matches any character in specified unicode category. \p{Ll} matches lowercase letters.",
		"sample_text":"",
		"sample_result":""
        },        
        "\\p{Han}":{
		"name":"Unicode Script",
		"description":"Matches any character in specified unicode script. \p{Arabic} will match characters in the Arabic script.",
		"sample_text":"",
		"sample_result":""
        },
        "\\P{Han}":{
		"name":"Not Unicode Script",
		"description":"Matches any character not in specified unicode script.",
		"sample_text":"",
		"sample_result":""
        },
        "(?:...)":{
		"name":"",
		"description":"Non-capturing group",
		"sample_text":"",
		"sample_result":""
        },
        "(...)":{
		"name":"",
		"description":"Capturing group",
		"sample_text":"",
		"sample_result":""
        },
        "a?":{
		"name":"",
		"description":"Match zero or one of a",
		"sample_text":"",
		"sample_result":""
        },
        "a*":{
		"name":"",
		"description":"Match zero or more of a",
		"sample_text":"",
		"sample_result":""
        },
        "a+":{
		"name":"",
		"description":"Match one or more of a",
		"sample_text":"",
		"sample_result":""
        },
        "a{3}":{
		"name":"",
		"description":"Match exactly 3 of a",
		"sample_text":"",
		"sample_result":""
        },
        "a{3,}":{
		"name":"",
		"description":"Match 3 or more of a",
		"sample_text":"",
		"sample_result":""
        },
        "a{3,6}":{
		"name":"",
		"description":"Match between 3 and 6 of a",
		"sample_text":"",
		"sample_result":""
        },
        "^":{
		"name":"",
		"description":"Start of string or line",
		"sample_text":"",
		"sample_result":""
        },
        "$":{
		"name":"",
		"description":"End of string or line",
		"sample_text":"",
		"sample_result":""
        },
        "\\b":{
		"name":"",
		"description":"A word boundary",
		"sample_text":"",
		"sample_result":""
        },
        "\\B":{
		"name":"",
		"description":"Non-word boundry",
		"sample_text":"",
		"sample_result":""
        }
    },
    "Escaped Characters":{
        "\\": {
		"name":"Reserved Characters",
        "description": "Preceeds character for literal representation. (+*?^$\.[]{}()|/)",
		"sample_text": "\+",
		"sample_result": "1 [+] 1 = 2"
        },
        "\\000":{
		"name":"Octal Escape",
		"description":"Octal escaped character in the form \000. Value must be less than 255",
		"sample_text":"\251",
		"sample_result":"All Rights Reserved [©]2025"
        },
        "\\xFF":{
		"name":"Hexadecimal Escape",
		"description":"Hexadecimal escaped character in the form \xFF",
		"sample_text":"\xA9",
		"sample_result":"All Rights Reserved [©]2025"
        },
        "\\uFFFF":{
		"name":"Unicode Escape",
		"description":"Unicode escaped character in the form \uFFFF",
		"sample_text":"\u00A9",
		"sample_result":"All Rights Reserved [©]2025"
        },
        "\\u{FFFF}":{
		"name":"Extended Unicode Escape",
		"description":"Unicode escaped character in the form \u{FFFF}. Supports a full range of unicode point escapes with any number of hex digits.",
		"sample_text":"\u{00A9}",
		"sample_result":"All Rights Reserved [©]2025"
        },
        "\\c":{
		"name":"Control Character Escape",
		"description":"Escaped control character in the form \cZ. This can range from \cA (SOH, char code 1) to \cZ (SUB, char code 26).",
		"sample_text":"\cI",
		"sample_result":"[    ]\cI matches TAB (char code 9)."
        },
        "\\n":{
		"name":"Line Feed",
		"description":"Matches a LINE FEED character (char code 10).",
		"sample_text":"",
		"sample_result":""
        },
        "\\v":{
		"name":"Vertical Tabe",
		"description":"Matches a VERTICAL TAB character (char code 11).",
		"sample_text":"",
		"sample_result":""
        }
    },
    "General Tokens":{
        "\\0":{
		"name":"",
		"description":"Null character (unicode character U+2400)",
		"sample_text":"",
		"sample_result":""
        },
        "\\n":{
		"name":"",
		"description":"Match newline character",
		"sample_text":"",
		"sample_result":""
        },
        "\\r":{
		"name":"",
		"description":"Match carriage return character (unicode character U+2185)",
		"sample_text":"",
		"sample_result":""
        },
        "\\t":{
		"name":"",
		"description":"Match tab character",
		"sample_text":"",
		"sample_result":""
        }
    },
    "Anchors":{
        "\\G":{
		"name":"",
		"description":"Start of match",
		"sample_text":"",
		"sample_result":""
        },
        "^":{
		"name":"Beginning",
		"description":"Matches the beginning of the string, or the beginning of a line if the multiline flag (m) is enabled.",
		"sample_text":"^\w+",
		"sample_result":"[she] sells seashells"
        },
        "$":{
		"name":"End",
		"description":"Matches the end of the string, or the end of a line if the multiline flag (m) is enabled. ",
		"sample_text":"\w+$",
		"sample_result":"she sells [seashells]"
        },
        "\\A":{
		"name":"",
		"description":"Start of string",
		"sample_text":"",
		"sample_result":""
        },
        "\\z":{
		"name":"",
		"description":"Absolute end of string",
		"sample_text":"",
		"sample_result":""
        },
        "\\Z":{
		"name":"",
		"description":"End of string",
		"sample_text":"",
		"sample_result":""
        },
        "\\b":{
		"name":"Word Boundary",
		"description":"Matches a word boundary position between a word character and non-word character or position (start / end of string). ",
		"sample_text":"s\b",
		"sample_result":"she sell[s] seashell[s]"
        },
        "\\B":{
		"name":"Not Word Boundary",
		"description":"Non-word boundary",
		"sample_text":"s\B",
		"sample_result":"[s]he [s]ell[s] [s]ea[s]hells"
        }
    },
    "Meta Sequences":{
        ".":{
		"name":"",
		"description":"Matches any character except a newline",
		"sample_text":"",
		"sample_result":""
        },
        "a|b":{
		"name":"",
		"description":"Acts as an OR operator between expressions",
		"sample_text":"",
		"sample_result":""
        },
        "\\s":{
		"name":"",
		"description":"Match any whitespace character [ \t\n\r\\x0c]",
		"sample_text":"",
		"sample_result":""
        },
        "\\S":{
		"name":"",
		"description":"Match any non-whitespace character [^ \t\n\r\\x0c]",
		"sample_text":"",
		"sample_result":""
        },
        "\\d":{
		"name":"",
		"description":"Match any digit character [0-9]",
		"sample_text":"",
		"sample_result":""
        },
        "\\D":{
		"name":"",
		"description":"Match any non-digit character [^0-9]",
		"sample_text":"",
		"sample_result":""
        },
        "\\w":{
		"name":"",
		"description":"Match any word character [a-zA-Z0-9_]",
		"sample_text":"",
		"sample_result":""
        },
        "\\W":{
		"name":"",
		"description":"Match any non-word character [^a-zA-Z0-9_]",
		"sample_text":"",
		"sample_result":""
        },
        "\\X":{
		"name":"",
		"description":"Any Unicode sequences, linebreaks included",
		"sample_text":"",
		"sample_result":""
        },
        "\\C":{
		"name":"",
		"description":"Match one data unit",
		"sample_text":"",
		"sample_result":""
        },
        "\\R":{
		"name":"",
		"description":"Unicode newlines",
		"sample_text":"",
		"sample_result":""
        },
        "\\N":{
		"name":"",
		"description":"Match anything but a newline",
		"sample_text":"",
		"sample_result":""
        },
        "\\x0b":{
		"name":"",
		"description":"Vertical whitespace character",
		"sample_text":"",
		"sample_result":""
        },
        "\\V":{
		"name":"",
		"description":"Negation of \\x0b",
		"sample_text":"",
		"sample_result":""
        },
        "\\h":{
		"name":"",
		"description":"Horizontal whitespace character",
		"sample_text":"",
		"sample_result":""
        },
        "\\H":{
		"name":"",
		"description":"Negation of \\h",
		"sample_text":"",
		"sample_result":""
        },
        "\\K":{
		"name":"",
		"description":"Reset match",
		"sample_text":"",
		"sample_result":""
        },
        "\\#":{
		"name":"",
		"description":"Match subpattern number",
		"sample_text":"",
		"sample_result":""
        },
        "\\pX":{
		"name":"",
		"description":"Unicode property X",
		"sample_text":"",
		"sample_result":""
        },
        "\\p{...}":{
		"name":"",
		"description":"Unicode property or script category",
		"sample_text":"",
		"sample_result":""
        },
        "\\PX":{
		"name":"",
		"description":"Negation of \\PX",
		"sample_text":"",
		"sample_result":""
        },
        "\\P{...}":{
		"name":"",
		"description":"Negation of \\P",
		"sample_text":"",
		"sample_result":""
        },
        "\\Q...\\E":{
		"name":"",
		"description":"Quote; Treat as literals",
		"sample_text":"",
		"sample_result":""
        },
        "\\k{name}":{
		"name":"",
		"description":"Match subpatter 'name'",
		"sample_text":"",
		"sample_result":""
        },
        "\\k<name>":{
		"name":"",
		"description":"Match subpattern 'name'",
		"sample_text":"",
		"sample_result":""
        },
        "\\k'name'":{
		"name":"",
		"description":"Match subpattern 'name'",
		"sample_text":"",
		"sample_result":""
        },
        "\\gn":{
		"name":"",
		"description":"Match nth subpattern",
		"sample_text":"",
		"sample_result":""
        },
        "\\g{n}":{
		"name":"",
		"description":"Match nth subpattern",
		"sample_text":"",
		"sample_result":""
        },
        "\\g{-n}":{
		"name":"",
		"description":"Match text in the relative previous subpattern matched",
		"sample_text":"",
		"sample_result":""
        },
        "\\g<n>":{
		"name":"",
		"description":"Match expression defined in the nth capture group",
		"sample_text":"",
		"sample_result":""
        },
        "\\g<+n>":{
		"name":"",
		"description":"Match expression defined in the nth capture group",
		"sample_text":"",
		"sample_result":""
        },
        "\\g'n'":{
		"name":"",
		"description":"Match expression defined in the nth capture group",
		"sample_text":"",
		"sample_result":""
        },
        "\\g'+n'":{
		"name":"",
		"description":"Match expression defined in the nth relative upcoming subpattern",
		"sample_text":"",
		"sample_result":""
        },
        "\\g{letter}":{
		"name":"",
		"description":"Matches the same text capture group called `letter` matched and captured",
		"sample_text":"",
		"sample_result":""
        },
        "\\g<letter>":{
		"name":"",
		"description":"Match expression defined in the capture group called 'letter'",
		"sample_text":"",
		"sample_result":""
        },
        "\\g'letter'":{
		"name":"",
		"description":"Match expression defined in the capture group called 'letter'",
		"sample_text":"",
		"sample_result":""
        },
        "\\xYY":{
		"name":"",
		"description":"Hex character YY",
		"sample_text":"",
		"sample_result":""
        },
        "x{YYYY}":{
		"name":"",
		"description":"Hex character YYYY",
		"sample_text":"",
		"sample_result":""
        },
        "\\ddd":{
		"name":"",
		"description":"Octal character ddd",
		"sample_text":"",
		"sample_result":""
        },
        "\\cY":{
		"name":"",
		"description":"Control character Y",
		"sample_text":"",
		"sample_result":""
        },
        "[\\b]":{
		"name":"",
		"description":"Backspace character",
		"sample_text":"",
		"sample_result":""
        },
        "\\":{
		"name":"",
		"description":"Makes any character literal",
		"sample_text":"",
		"sample_result":""
        }
    },
    "Quantifiers":{
        "*":{
		"name":"",
		"description":"Matches 0 or more repetitions of the preceding element",
		"sample_text":"",
		"sample_result":""
        },
        "+":{
		"name":"",
		"description":"Matches 1 or more repetitions of the preceding element",
		"sample_text":"",
		"sample_result":""
        },
        "?":{
		"name":"",
		"description":"Matches 0 or 1 repetition of the preceding element",
		"sample_text":"",
		"sample_result":""
        },
        "{n}":{
		"name":"",
		"description":"Matches exactly n repetitions of the preceding element",
		"sample_text":"",
		"sample_result":""
        },
        "{n,}":{
		"name":"",
		"description":"Matches n or more repetitions of the preceding element",
		"sample_text":"",
		"sample_result":""
        },
        "{n,m}":{
		"name":"",
		"description":"Matches between n and m repetitions of the preceding element",
		"sample_text":"",
		"sample_result":""
        },
        "a*":{
		"name":"",
		"description":"Greedy qualifier (Matches as many characters as possible.)",
		"sample_text":"",
		"sample_result":""
        },
        "a*?":{
		"name":"",
		"description":"Lazy qualifier (Matches as few characters as possible.)",
		"sample_text":"",
		"sample_result":""
        },
        "a*+":{
		"name":"",
		"description":"Possessive qualifier (Matches as many characters as possible; backtracking can't reduce the number of characters matched.)",
		"sample_text":"",
		"sample_result":""
        },
        "*?":{
		"name":"",
		"description":"Lazy match 0 or more times",
		"sample_text":"",
		"sample_result":""
        },
        "+?":{
		"name":"",
		"description":"Lazy match 1 or more times",
		"sample_text":"",
		"sample_result":""
        },
        "??":{
		"name":"",
		"description":"Lazy match 0 or 1 time",
		"sample_text":"",
		"sample_result":""
        }
    },
    "Group Constructs":{
        "(?:...)":{
		"name":"",
		"description":"Match everything enclosed",
		"sample_text":"",
		"sample_result":""
        },
        "(...)":{
		"name":"",
		"description":"Capture everything enclosed",
		"sample_text":"",
		"sample_result":""
        },
        "(?>...)":{
		"name":"",
		"description":"Atomic group (non-capturing)",
		"sample_text":"",
		"sample_result":""
        },
        "(?|...)":{
		"name":"",
		"description":"Duplicate/reset subpattern group number",
		"sample_text":"",
		"sample_result":""
        },
        "(?#...)":{
		"name":"",
		"description":"Comment group",
		"sample_text":"",
		"sample_result":""
        },
        "(?'name'...)":{
		"name":"",
		"description":"Named capturing group",
		"sample_text":"",
		"sample_result":""
        },
        "(?<name>...)":{
		"name":"",
		"description":"Named capturing group",
		"sample_text":"",
		"sample_result":""
        },
        "(?P<name>...)":{
		"name":"",
		"description":"Named capturing group",
		"sample_text":"",
		"sample_result":""
        },
        "(?imsxUJnxx)":{
		"name":"",
		"description":"Inline modifiers",
		"sample_text":"",
		"sample_result":""
        },
        "(?imsxUJnxx:...)":{
		"name":"",
		"description":"Localized inline modifiers",
		"sample_text":"",
		"sample_result":""
        },
        "(?(1)yes|no)":{
		"name":"",
		"description":"Conditional statement",
		"sample_text":"",
		"sample_result":""
        },
        "(?(R)yes|no)":{
		"name":"",
		"description":"Conditional statement",
		"sample_text":"",
		"sample_result":""
        },
        "(?(R#)yes|no)":{
		"name":"",
		"description":"Recursive conditional statement",
		"sample_text":"",
		"sample_result":""
        },
        "(?(R&name)yes|no)":{
		"name":"",
		"description":"Conditional statement",
		"sample_text":"",
		"sample_result":""
        },
        "(?(?=...)yes|no)":{
		"name":"",
		"description":"Lookahead conditional",
		"sample_text":"",
		"sample_result":""
        },
        "(?(?<=...)yes|no)":{
		"name":"",
		"description":"Lookahead conditional",
		"sample_text":"",
		"sample_result":""
        },
        "(?R)":{
		"name":"",
		"description":"Recursive match of entire pattern",
		"sample_text":"",
		"sample_result":""
        },
        "(?n)":{
		"name":"",
		"description":"Atomic group by number",
		"sample_text":"",
		"sample_result":""
        },
        "(?+1)":{
		"name":"",
		"description":"match expression defined in the first relative capture group",
		"sample_text":"",
		"sample_result":""
        },
        "(?&name)":{
		"name":"",
		"description":"Match expression defined in capture group 'name'",
		"sample_text":"",
		"sample_result":""
        },
        "(?P=name)":{
		"name":"",
		"description":"Match text from earlier group 'name'",
		"sample_text":"",
		"sample_result":""
        },
        "(?P>name)":{
		"name":"",
		"description":"Match expression defined in the capture group 'name'",
		"sample_text":"",
		"sample_result":""
        },
        "(?(DEFINE)...)":{
		"name":"",
		"description":"Pre-define patterns before using them",
		"sample_text":"",
		"sample_result":""
        },
        "?:":{
		"name":"",
		"description":"Non-capturing group",
		"sample_text":"",
		"sample_result":""
        },
        "(?=...)":{
		"name":"",
		"description":"Positive lookahead assertion",
		"sample_text":"",
		"sample_result":""
        },
        "(?!...)":{
		"name":"",
		"description":"Negative lookahead assertion",
		"sample_text":"",
		"sample_result":""
        },
        "(?<=...)":{
		"name":"",
		"description":"Positive lookbehind assertion",
		"sample_text":"",
		"sample_result":""
        },
        "(?<!...)":{
		"name":"",
		"description":"Negative lookbehind assertion",
		"sample_text":"",
		"sample_result":""
        },
        "(*ACCEPT)":{
		"name":"",
		"description":"Control verb",
		"sample_text":"",
		"sample_result":""
        },
        "(*FAIL)":{
		"name":"",
		"description":"Control verb",
		"sample_text":"",
		"sample_result":""
        },
        "(*MARK:NAME)":{
		"name":"",
		"description":"Control verb",
		"sample_text":"",
		"sample_result":""
        },
        "(*COMMIT)":{
		"name":"",
		"description":"Control verb",
		"sample_text":"",
		"sample_result":""
        },
        "(*PRUNE)":{
		"name":"",
		"description":"Control verb",
		"sample_text":"",
		"sample_result":""
        },
        "(*SKIP)":{
		"name":"",
		"description":"Control verb",
		"sample_text":"",
		"sample_result":""
        },
        "(*THEN)":{
		"name":"",
		"description":"Control verb",
		"sample_text":"",
		"sample_result":""
        },
        "(*UTF)":{
		"name":"",
		"description":"Pattern modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*UTF8)":{
		"name":"",
		"description":"Pattern modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*UTF16)":{
		"name":"",
		"description":"Pattern modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*UTF32)":{
		"name":"",
		"description":"Pattern modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*UCP)":{
		"name":"",
		"description":"Pattern modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*CR)":{
		"name":"",
		"description":"Line break modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*LF)":{
		"name":"",
		"description":"Line break modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*CRLF)":{
		"name":"",
		"description":"Line break modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*BSR_UNICODE)":{
		"name":"",
		"description":"Line break modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*BSR_ANYCRLF)":{
		"name":"",
		"description":"Line break modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*ANYCRLF)":{
		"name":"",
		"description":"Line break modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*ANY)":{
		"name":"",
		"description":"Line break modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*NOTEMPTY)":{
		"name":"",
		"description":"Empty match modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*NOTEMPTY_ATSTART)":{
		"name":"",
		"description":"Empty match modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*NO_JIT)":{
		"name":"",
		"description":"JIT Modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*LIMIT_RECURSION=d)":{
		"name":"",
		"description":"Regex engine modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*LIMIT_MATCH=x)":{
		"name":"",
		"description":"Regex engine modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*NO_AUTO_POSSESS)":{
		"name":"",
		"description":"Regex engine modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(*NO_START_OPT)":{
		"name":"",
		"description":"Regex engine modifier",
		"sample_text":"",
		"sample_result":""
        },
        "(?i)":{
		"name":"",
		"description":"Case-insensitive",
		"sample_text":"",
		"sample_result":""
        },
        "(?L)":{
		"name":"",
		"description":"Locale dependent",
		"sample_text":"",
		"sample_result":""
        },
        "(?m)":{
		"name":"",
		"description":"Multiline",
		"sample_text":"",
		"sample_result":""
        },
        "(?s)":{
		"name":"",
		"description":"Dot matches all",
		"sample_text":"",
		"sample_result":""
        },
        "(?u)":{
		"name":"",
		"description":"Unicode",
		"sample_text":"",
		"sample_result":""
        },
        "(?x)":{
		"name":"",
		"description":"Verbose",
		"sample_text":"",
		"sample_result":""
        },
        "(?-...)":{
		"name":"",
		"description":"Toggle flags within pattern",
		"sample_text":"",
		"sample_result":""
        }
    },
    "Character Classes":{
        "[abc]":{
		"name":"",
		"description":"Matches either an a, b, or c character",
		"sample_text":"",
		"sample_result":""
        },
        "[^abc]":{
		"name":"",
		"description":"Matches any character except for an a, b, or c",
		"sample_text":"",
		"sample_result":""
        },
        "[a-z]":{
		"name":"",
		"description":"Matches any lowercase letter from a to z",
		"sample_text":"",
		"sample_result":""
        },
        "[A-Z]":{
		"name":"",
		"description":"Matches any uppercase letter from A to Z",
		"sample_text":"",
		"sample_result":""
        },
        "[^a-z]":{
		"name":"",
		"description":"Match a single character NOT in the range a-z",
		"sample_text":"",
		"sample_result":""
        },
        "[a-zA-Z]":{
		"name":"",
		"description":"Match a single character in the range a-z or A-Z",
		"sample_text":"",
		"sample_result":""
        },
        "[0-9]":{
		"name":"",
		"description":"Matches any digit from 0 to 9",
		"sample_text":"",
		"sample_result":""
        },
        "\\d":{
		"name":"",
		"description":"Matches any digit (equivalent to [0-9])",
		"sample_text":"",
		"sample_result":""
        },
        "\\D":{
		"name":"",
		"description":"Matches any non-digit character (equivalent to [^0-9])",
		"sample_text":"",
		"sample_result":""
        },
        "\\w":{
		"name":"",
		"description":"Matches any word character (equivalent to [a-zA-Z0-9_])",
		"sample_text":"",
		"sample_result":""
        },
        "\\W":{
		"name":"",
		"description":"Matches any non-word character (equivalent to [^a-zA-Z0-9_])",
		"sample_text":"",
		"sample_result":""
        },
        "\\s":{
		"name":"",
		"description":"Matches any whitespace character (spaces, tabs, line breaks)",
		"sample_text":"",
		"sample_result":""
        },
        "\\S":{
		"name":"",
		"description":"Matches any non-whitespace character",
		"sample_text":"",
		"sample_result":""
        },
        "[[:alnum:]]":{
		"name":"",
		"description":"Letters and digits",
		"sample_text":"",
		"sample_result":""
        },
        "[[:alpha]]":{
		"name":"",
		"description":"Letters",
		"sample_text":"",
		"sample_result":""
        },
        "[[:ascii:]]":{
		"name":"",
		"description":"ASCII codes 0-127",
		"sample_text":"",
		"sample_result":""
        },
        "[[:blank:]]":{
		"name":"",
		"description":"Space or tab only",
		"sample_text":"",
		"sample_result":""
        },
        "[[:cntrl:]]":{
		"name":"",
		"description":"Control characters",
		"sample_text":"",
		"sample_result":""
        },
        "[[:digit:]]":{
		"name":"",
		"description":"Decimal digits",
		"sample_text":"",
		"sample_result":""
        },
        "[[:graph:]]":{
		"name":"",
		"description":"Visible character (not space)",
		"sample_text":"",
		"sample_result":""
        },
        "[[:lower:]]":{
		"name":"",
		"description":"Lowercase letters",
		"sample_text":"",
		"sample_result":""
        },
        "[[:print:]]":{
		"name":"",
		"description":"Visible characters",
		"sample_text":"",
		"sample_result":""
        },
        "[[:punct:]]":{
		"name":"",
		"description":"Visible punctuation characters",
		"sample_text":"",
		"sample_result":""
        },
        "[[:space:]]":{
		"name":"",
		"description":"Whitespace",
		"sample_text":"",
		"sample_result":""
        },
        "[[:upper:]]":{
		"name":"",
		"description":"Uppercase letters",
		"sample_text":"",
		"sample_result":""
        },
        "[[:word:]]":{
		"name":"",
		"description":"Word characters",
		"sample_text":"",
		"sample_result":""
        },
        "[[:xdigit:]]":{
		"name":"",
		"description":"Hexadecimal digits",
		"sample_text":"",
		"sample_result":""
        },
        "[[:<:]]":{
		"name":"",
		"description":"Start of word",
		"sample_text":"",
		"sample_result":""
        },
        "[[:>:]]":{
		"name":"",
		"description":"End of word",
		"sample_text":"",
		"sample_result":""
        }
    },
    "Flags/Modifiers":{
        "s":{
		"name":"",
		"description":"Dot matches all - dot matches newline",
		"sample_text":"",
		"sample_result":""
        },
        "u":{
		"name":"",
		"description":"Unicode - pattern strings are unicode",
		"sample_text":"",
		"sample_result":""
        },
        "X":{
		"name":"",
		"description":"eXtra",
		"sample_text":"",
		"sample_result":""
        },
        "U":{
		"name":"",
		"description":"Ungreedy",
		"sample_text":"",
		"sample_result":""
        },
        "A":{
		"name":"",
		"description":"Anchor",
		"sample_text":"",
		"sample_result":""
        },
        "J":{
		"name":"",
		"description":"Duplicate group names",
		"sample_text":"",
		"sample_result":""
        },
        "n":{
		"name":"",
		"description":"Non-capturing groups",
		"sample_text":"",
		"sample_result":""
        },
        "xx":{
		"name":"",
		"description":"Ignore all whitespace / verbose",
		"sample_text":"",
		"sample_result":""
        },
        "g":{
		"name":"",
		"description":"Global - match all occurrences",
		"sample_text":"",
		"sample_result":""
        },
        "i":{
		"name":"",
		"description":"Case-insensitive matching",
		"sample_text":"",
		"sample_result":""
        },
        "m":{
		"name":"",
		"description":"Multiline - ^ and $ match start/end of line",
		"sample_text":"",
		"sample_result":""
        },
        "y":{
		"name":"",
		"description":"Sticky - match from lastIndex only",
		"sample_text":"",
		"sample_result":""
        },
        "(?i)":{
		"name":"",
		"description":"Case-insensitive matching",
		"sample_text":"",
		"sample_result":""
        },
        "(?m)":{
		"name":"",
		"description":"Multi-line matching",
		"sample_text":"",
		"sample_result":""
        },
        "(?s)":{
		"name":"",
		"description":"Dot matches newline",
		"sample_text":"",
		"sample_result":""
        },
        "(?x)":{
		"name":"",
		"description":"Ignore whitespace and comments",
		"sample_text":"",
		"sample_result":""
        }
    },
    "Substitution":{
        "$0":{
		"name":"",
		"description":"Complete match contents",
		"sample_text":"",
		"sample_result":""
        },
        "$1":{
		"name":"",
		"description":"Contents in capture group 1",
		"sample_text":"",
		"sample_result":""
        },
        "$$":{
		"name":"",
		"description":"Insert a dollar sign",
		"sample_text":"",
		"sample_result":""
        },
        "${foo}":{
		"name":"",
		"description":"Contents in capture roup 'foo'",
		"sample_text":"",
		"sample_result":""
        },
        "$n":{
		"name":"",
		"description":"nth captured group",
		"sample_text":"",
		"sample_result":""
        },
        "$`":{
		"name":"",
		"description":"Before matched string",
		"sample_text":"",
		"sample_result":""
        },
        "$'":{
		"name":"",
		"description":"After matched string",
		"sample_text":"",
		"sample_result":""
        },
        "$&":{
		"name":"",
		"description":"Entire matched string",
		"sample_text":"",
		"sample_result":""
        },
        "$+":{
		"name":"",
		"description":"Last captured group",
		"sample_text":"",
		"sample_result":""
        },
        "$_":{
		"name":"",
		"description":"Entire input string",
		"sample_text":"",
		"sample_result":""
        },
        "\\x20":{
		"name":"",
		"description":"Hexadecimal replacement values",
		"sample_text":"",
		"sample_result":""
        },
        "\\x{06fa}":{
		"name":"",
		"description":"Hexadecimal replacement values",
		"sample_text":"",
		"sample_result":""
        },
        "\\t":{
		"name":"",
		"description":"Insert a tab",
		"sample_text":"",
		"sample_result":""
        },
        "\\r":{
		"name":"",
		"description":"Insert a carriage return",
		"sample_text":"",
		"sample_result":""
        },
        "\\n":{
		"name":"",
		"description":"Insert a newline",
		"sample_text":"",
		"sample_result":""
        },
        "\\f":{
		"name":"",
		"description":"Insert a form-feed",
		"sample_text":"",
		"sample_result":""
        },
        "\\U":{
		"name":"",
		"description":"Uppercase Transformation",
		"sample_text":"",
		"sample_result":""
        },
        "\\L":{
		"name":"",
		"description":"Lowercase Transformation",
		"sample_text":"",
		"sample_result":""
        },
        "\\E":{
		"name":"",
		"description":"Terminate any Transformation",
		"sample_text":"",
		"sample_result":""
        },
        "${1:+foo:bar}":{
		"name":"",
		"description":"Conditional replacement",
		"sample_text":"",
		"sample_result":""
        },
        "\\[":{
		"name":"",
		"description":"Insert the escaped literal",
		"sample_text":"",
		"sample_result":""
        }
    }
}
