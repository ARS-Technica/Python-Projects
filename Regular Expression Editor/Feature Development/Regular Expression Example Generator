"""
Regular Expression Example Generator

This module provides functions for generating example strings from
user-supplied regular expressions. It is designed as a standalone
utility, but it will eventually be incorporated into the larger
Regular Expression Editor project,first as a set of functions,
and later refactored into a class.

This generator will attempt to produce a representative example
of a string that would match the regular expression provided by
the user.

The goal isn't to exhaustively enumerate matches, only to provide
a plausible example for user feedback.

Inputs:
    pattern (str): A regular expression.

Outputs:
    str: A generated example string matching the pattern.
"""


import re
import rstr

def normalize_regex(pattern: str) -> str:
    """
    Normalize BRE-style regex quirks into syntax compatible with rstr.xeger.
    Silently converts what it can; leaves everything else untouched.
    """

    # Quantifiers: \{5\} → {5}, \{2,5\} → {2,5}
    pattern = re.sub(r'\\\{(\d+(?:,\d+)?)\\\}', r'{\1}', pattern)

    # Operators: \+ → +, \? → ?
    pattern = pattern.replace(r'\+', '+')
    pattern = pattern.replace(r'\?', '?')

    # Anchors: \^ → ^, \$ → $
    pattern = pattern.replace(r'\^', '^')
    pattern = pattern.replace(r'\$', '$')

    # Escaped dot: \. → .
    pattern = pattern.replace(r'\.', '.')

    # POSIX character classes inside [...]
    posix_classes = {
        '[:digit:]': r'\d',
        '[:alpha:]': r'[A-Za-z]',
        '[:alnum:]': r'[A-Za-z0-9]',
        '[:space:]': r'\s',
        '[:word:]':  r'\w',
        '[:upper:]': r'[A-Z]',
        '[:lower:]': r'[a-z]',
    }
    for k, v in posix_classes.items():
        pattern = pattern.replace(k, v)

    return pattern


def generate_sample_from_regex(pattern: str) -> str:
    """Generate a random ASCII-safe sample string for the given regex."""
    normalized = normalize_regex(pattern)
    sample = rstr.xeger(normalized)
    return sample.encode("ascii", "ignore").decode("ascii").strip()


# Example
if __name__ == "__main__":
    bre_pattern = r'\\$[0-9]*\\.[0-9][0-9]'
    # bre_pattern = r'^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|622((12[6-9]|1[3-9][0-9])|([2-8][0-9][0-9])|(9(([0-1][0-9])|(2[0-5]))))[0-9]{10}|64[4-9][0-9]{13}|65[0-9]{14}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})*$'
    # bre_pattern = r'^http(s)?://((\\d+\\.\\d+\\.\\d+\\.\\d+)|(([\\w-]+\\.)+([a-z,A-Z][\\w-]*)))(:[1-9][0-9]*)?(\\/([\\w\\/:%+@&=]+[\\w\\/?:%+@&=]*)?)?(#(.*))?$'
    print("Original:   ", bre_pattern)
    print("Normalized: ", normalize_regex(bre_pattern))
    print("Generated:  ", generate_sample_from_regex(bre_pattern))
