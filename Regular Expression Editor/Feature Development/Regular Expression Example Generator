"""
Regular Expression Example Generator

This module provides functions for generating example strings from
user-supplied regular expressions. It is designed as a standalone
utility, but it will eventually be incorporated into the larger
Regular Expression Editor project,first as a set of functions,
and later refactored into a class.

This generator will attempt to produce a representative example
of a string that would match the regular expression provided by
the user.

The goal isn't to exhaustively enumerate matches, only to provide
a plausible example for user feedback.

Inputs:
    pattern (str): A regular expression.

Outputs:
    str: A generated example string matching the pattern.
"""


import tkinter as tk
from tkinter import ttk
import rstr
import re


def auto_generate_sample():
    """
    Automatically generate a sample if the sample input box is empty.

    - Reads the regex pattern from the regex_input text widget.
    - Checks the sample_input text widget.
    - If sample_input is empty and a regex is provided, generates one or more
        sample strings using `generate_samples_from_regex`.
    - Inserts the generated sample(s) into the sample_input widget.
    """

    pattern = regex_input.get("1.0", "end-1c").strip()
    sample = sample_input.get("1.0", "end-1c").strip()

    if not sample and pattern:
        generated = generate_sample_from_regex(pattern)
        sample_input.delete("1.0", "end")
        sample_input.insert("1.0", generated)


def generate_sample_from_regex(pattern: str, max_attempts=5) -> str:
    """
    Generate example matching text for the given regex pattern.
    If generation fails, returns an empty string.

    Args:
        pattern (str): The regex pattern to generate a sample from.
        max_attempts (int): Number of attempts to try generating a valid sample.

    Returns:
        str: A string matching the regex pattern.
             Returns "[Invalid regex]" if the pattern is invalid.
             Returns "[Unable to generate sample]" if no valid string could be generated.
    """

    # Quick validation of pattern
    try:
        re.compile(pattern)
    except re.error:
        return "Invalid Regular Expression"

    # Try to generate a match
    for _ in range(max_attempts):
        try:
            sample = rstr.xeger(pattern)
            if sample:  # Ensure it's not empty
                return sample
        except Exception:
            pass

    return "Unable to generate sample"


def normalize_regex(pattern: str) -> str:
    """
    Normalize BRE-style regex quirks into syntax compatible with rstr.xeger.
    Silently converts what it can; leaves everything else untouched.
    """

    # POSIX character classes inside [...]
    posix_classes = {
        '[:digit:]': r'\d',
        '[:alpha:]': r'[A-Za-z]',
        '[:alnum:]': r'[A-Za-z0-9]',
        '[:space:]': r'\s',
        '[:word:]':  r'\w',
        '[:upper:]': r'[A-Z]',
        '[:lower:]': r'[a-z]',
    }
    for k, v in posix_classes.items():
        pattern = pattern.replace(k, v)

    return pattern


def create_window():
    global generate_button, regex_input, sample_input

    # Tkinter GUI setup
    root = tk.Tk()
    root.title("Regex Sample Generator")

    # Regex input field
    ttk.Label(root, text="Enter Regex Pattern:").grid(row=0, column=0, sticky="w", padx=5, pady=(5, 2))
    regex_input = tk.Text(root, height=2, width=50)
    regex_input.grid(row=1, column=0, padx=5, pady=2, sticky="ew")

    # Sample output field
    ttk.Label(root, text="Sample Output:").grid(row=2, column=0, sticky="w", padx=5, pady=(5, 2))
    sample_input = tk.Text(root, height=5, width=50)
    sample_input.grid(row=3, column=0, padx=5, pady=2, sticky="ew")

    # Button to generate
    generate_button = ttk.Button(root, text="Generate Sample", command=auto_generate_sample)
    generate_button.grid(row=4, column=0, padx=5, pady=10, sticky="ew")

    # Expand window with resizing
    root.columnconfigure(0, weight=1)

    root.mainloop()


if __name__ == "__main__":
    bre_pattern = r'\\$[0-9]*\\.[0-9][0-9]'
    # bre_pattern = r'^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|622((12[6-9]|1[3-9][0-9])|([2-8][0-9][0-9])|(9(([0-1][0-9])|(2[0-5]))))[0-9]{10}|64[4-9][0-9]{13}|65[0-9]{14}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})*$'
    # bre_pattern = r'^http(s)?://((\\d+\\.\\d+\\.\\d+\\.\\d+)|(([\\w-]+\\.)+([a-z,A-Z][\\w-]*)))(:[1-9][0-9]*)?(\\/([\\w\\/:%+@&=]+[\\w\\/?:%+@&=]*)?)?(#(.*))?$'
    print("Original:   ", bre_pattern)
    print("Normalized: ", normalize_regex(bre_pattern))
    print("Generated:  ", generate_sample_from_regex(bre_pattern))
