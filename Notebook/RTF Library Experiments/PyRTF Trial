"""
Note: Python libraries for handling Rich Text files
are neither well maintained nor well documented.
The only library that works well with Python 3+ is 
pyrtf 0.45:

https://anaconda.org/conda-forge/pyrtf
conda install conda-forge::pyrtf
"""

import subprocess
from tkinter import *
from tkinter import filedialog
from bs4 import BeautifulSoup
from reportlab.pdfgen import canvas

def open_file():
    file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt"), ("Word files", "*.docx"), ("Rich Text Format files", "*.rtf")])
    if file_path:
        if file_path.endswith((".txt", ".docx")):
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
        elif file_path.endswith(".rtf"):
            content = convert_rtf_to_text(file_path)
        text.delete(1.0, END)
        text.insert(END, content)

def convert_rtf_to_text(rtf_file_path):
    try:
        process = subprocess.Popen(['unrtf', '--text', rtf_file_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate()
        if process.returncode == 0:
            return output.decode('utf-8')
        else:
            raise Exception(f"Error converting RTF to text: {error.decode('utf-8')}")
    except Exception as e:
        print(f"An error occurred: {e}")
        return ""

def save_file():
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt"), ("Word files", "*.docx"), ("Rich Text Format files", "*.rtf"), ("PDF files", "*.pdf")])
    if file_path:
        content = text.get(1.0, END)
        if file_path.endswith((".txt", ".docx")):
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(content)
        elif file_path.endswith(".rtf"):
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(content)
        elif file_path.endswith(".pdf"):
            pdf_canvas = canvas.Canvas(file_path)
            pdf_canvas.drawString(100, 800, content)
            pdf_canvas.save()

# Rest of the code remains the same
# Create the main window
root = Tk()
root.title("Text Editor")

# Create a Text widget
text = Text(root, wrap="word")
text.pack(expand=YES, fill=BOTH)

# Create a Menu
menubar = Menu(root)
root.config(menu=menubar)

# File menu
file_menu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="File", menu=file_menu)

# File menu items
file_menu.add_command(label="Open", command=open_file)
file_menu.add_command(label="Save", command=save_file)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=root.destroy)

# Start the main event loop
root.mainloop()

