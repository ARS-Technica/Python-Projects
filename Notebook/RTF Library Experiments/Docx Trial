"""
A simple Textpad clone that works with .docx files.
"""

import tkinter as tk
from tkinter import filedialog
from docx import Document

# Initialize Tkinter window
root = tk.Tk()
root.title("Simple Word Processor")

# Text box for content
text_box = tk.Text(root)
text_box.pack(fill="both", expand=True)
text_box.tag_configure("bold", font=("TkDefaultFont", 12, "bold"))  # Define "bold" tag

# Function to open a .docx file
def open_file():
    file_path = filedialog.askopenfilename(
        filetypes=[("Word Documents", "*.docx")]
    )
    if file_path:
        document = Document(file_path)
        text_box.delete("1.0", tk.END)  # Clear text box
        for paragraph in document.paragraphs:
            text_box.insert(tk.END, paragraph.text + "\n")

# Function to make highlighted text bold
def make_bold():
    bold_start = text_box.index("sel.first")
    bold_end = text_box.index("sel.last")
    if bold_start != bold_end:  # Check if text is selected
        content = text_box.get("1.0", tk.END)
        new_content = ""
        current_index = 1.0  # Initial float value
        for paragraph in content.splitlines():
            paragraph_index = float(text_box.index(f"{current_index} linestart"))  # Get float index of paragraph
            if paragraph_index >= float(bold_start) and paragraph_index <= float(bold_end):
                new_content += paragraph.replace(paragraph[bold_start:bold_end],
                                                  f"<b>{paragraph[bold_start:bold_end]}</b>")
                text_box.tag_add("bold", f"{current_index} + {len(new_content) - len(paragraph)}", f"{current_index} + {len(new_content)}")  # Apply "bold" tag
            else:
                new_content += paragraph
            new_content += "\n"
            current_index += len(paragraph) + 1  # Adjust for newline (keep as float)
        text_box.delete("1.0", tk.END)
        text_box.insert(tk.END, new_content)
    
def bold_text(text):
    """Returns a new string with the text enclosed in HTML bold tags."""
    return f"<b>{text}</b>"

# Function to save the content as a .docx file
def save_file():
    file_path = filedialog.asksaveasfilename(
        defaultextension=".docx",
        filetypes=[("Word Documents", "*.docx")]
    )
    if file_path:
        document = Document()
        for line in text_box.get("1.0", tk.END).splitlines():
            paragraph = document.add_paragraph()
            for part in line.split("<b>"):
                if part.startswith("</b>"):
                    paragraph.add_run(part[4:]).bold = False  # Remove closing tag and set bold to False
                else:
                    run = paragraph.add_run(part)
                    if "<b>" in part:  # Apply bold if opening tag is present
                        run.bold = True
        document.save(file_path)

# Create menu bar
menu_bar = tk.Menu(root)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Open", command=open_file)
file_menu.add_command(label="Save", command=save_file)
menu_bar.add_cascade(label="File", menu=file_menu)
root.config(menu=menu_bar)

# Create a button for bold formatting
bold_button = tk.Button(root, text="Bold", command=make_bold)
bold_button.pack()

# Run the Tkinter main loop
root.mainloop()

