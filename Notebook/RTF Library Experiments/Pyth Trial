"""
A simple .rtf file reader written with assistance 
from the Pyth library after repeatedly failing to make
PyRTF parse .rtf files in Python 3.
"""

from tkinter import *
from tkinter import filedialog
from PyRTF import *
from pyth.plugins.plaintext.writer import PlaintextWriter
from pyth.plugins.html.writer import HTMLWriter
from pyth import Document
import six

def MakeExample():
    doc = Document()
    ss = doc.StyleSheet
    section = Section()
    doc.Sections.append(section)

    result = doc.StyleSheet
    NormalText = TextStyle(TextPropertySet(result.Fonts.CourierNew, 16))
    ps2 = ParagraphStyle('Courier', NormalText.Copy())
    result.ParagraphStyles.append(ps2)

    NormalText = TextStyle(TextPropertySet(result.Fonts.Arial, 22, bold=True, colour=ss.Colours.Red))
    ps2 = ParagraphStyle('ArialBoldRed', NormalText.Copy())
    result.ParagraphStyles.append(ps2)

    p = Paragraph(ss.ParagraphStyles.Heading1)
    p.append('Example Heading 1')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('This is our first test writing to a RTF file. '
             'This first paragraph is in the preset style called normal '
             'and any following paragraphs will use this style until we change it.')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Normal)
    p.append('It is also possible to provide overrides for element of a style. ',
             'For example you can change just the font',
             TEXT(' size to 24 point', size=48),
             ' or',
             TEXT(' typeface to Impact', font=ss.Fonts.Impact),
             ' or even more Attributes like',
             TEXT(' BOLD', bold=True),
             TEXT(' or Italic', italic=True),
             TEXT(' or BOTH', bold=True, italic=True),
             '.')
    section.append(p)

    p = Paragraph()
    p.append('This is a new paragraph with the word ',
             TEXT('RED', colour=ss.Colours.Red),
             ' in Red text.')
    section.append(p)

    p = Paragraph(ss.ParagraphStyles.Courier)
    p.append('Now we are using the Courier style at 8 points. '
             'All subsequent paragraphs will use this style automatically. '
             'This saves typing and is the default behaviour for RTF documents.', LINE)
    section.append(p)
    p = Paragraph()
    p.append('Also notice that there is a blank line between the previous paragraph ',
             'and this one.  That is because of the "LINE" inline command.')

    section.append(p)

    p = Paragraph(ss.ParagraphStyles.ArialBoldRed)
    p.append(LINE, 'And now we are using the ArialBoldRed style.', LINE)
    section.append(p)

    return doc


def OpenFile(name):
    return open('%s.rtf' % name, 'w')


def create_rtf_file():
    doc = MakeExample()
    DR = Renderer()
    DR.Write(doc, OpenFile('rtfteste'))
    print("RTF file created")


def open_rtf_file():
    file_path = filedialog.askopenfilename(filetypes=[("Rich Text Format files", "*.rtf")])
    if file_path:
        with open(file_path, 'r', encoding='utf-8') as file:
            rtf_content = file.read()

        # Convert RTF to HTML
        doc = Document.from_rtf_string(six.text_type(rtf_content))
        html_content = HTMLWriter.write(doc).getvalue()

        # Insert HTML content into the Tkinter Text widget
        text.delete(1.0, END)
        text.insert(END, html_content)
        print("RTF file opened and converted to HTML")


def save_rtf_file():
    file_path = filedialog.asksaveasfilename(defaultextension=".rtf", filetypes=[("Rich Text Format files", "*.rtf")])
    if file_path:
        html_content = text.get(1.0, END)

        # Convert HTML to RTF
        doc = Document.from_html_string(six.text_type(html_content))
        rtf_content = PlaintextWriter.write(doc).getvalue()

        # Save as RTF
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(rtf_content)
        print("HTML content saved as RTF")


# Create the main window
root = Tk()
root.title("RTF to HTML Converter")

# Create a Text widget
text = Text(root, wrap="word")
text.pack(expand=YES, fill=BOTH)

# Create a Menu
menubar = Menu(root)
root.config(menu=menubar)

# File menu
file_menu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="File", menu=file_menu)

# File menu items
file_menu.add_command(label="Create RTF", command=create_rtf_file)
file_menu.add_command(label="Open RTF", command=open_rtf_file)
file_menu.add_command(label="Save RTF", command=save_rtf_file)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=root.destroy)

# Start the main event loop
root.mainloop()

