import os, sys
from tkinter import *
from tkinter import filedialog
from tkinter import font
from tkinter import messagebox
from tkinter import colorchooser
import tkinter.ttk as ttk   
import win32print
import win32api


def create_custom_text(window, linenumbers_canvas, main_color):   
    global text
    text_editor_frame = Frame(window)
    text = Text(text_editor_frame, font=("Helvetica", 16), selectbackground="yellow",
                selectforeground="black", undo=True, padx=5, pady=5, wrap="none")

    def proxy(*args):
        cmd = (text._orig,) + args
        result = text.tk.call(cmd)

        if (
            args[0] in ("insert", "replace", "delete")
            or args[0:3] == ("mark", "set", "insert")
            or args[0:2] == ("xview", "moveto")
            or args[0:2] == ("xview", "scroll")
            or args[0:2] == ("yview", "moveto")
            or args[0:2] == ("yview", "scroll")
        ):
            text.event_generate("<<Change>>", when="tail")

        return result

    text._orig = text._w + "_orig"
    text.tk.call("rename", text._w, text._orig)
    text.tk.createcommand(text._w, proxy)
 
    vertical_scrollbar = Scrollbar(text_editor_frame, orient="vertical", command=text.yview)
    text.configure(yscrollcommand=vertical_scrollbar.set)
    horizontal_scrollbar = Scrollbar(text_editor_frame, orient="horizontal", command=text.xview)
    text.configure(xscrollcommand=horizontal_scrollbar.set)

    text.grid(row=0, column=0, sticky="nsew")
 
    vertical_scrollbar.grid(row=0, column=1, sticky="ns")
    horizontal_scrollbar.grid(row=1, column=0, sticky="ew")
    text_editor_frame.grid_rowconfigure(0, weight=1)
    text_editor_frame.grid_columnconfigure(0, weight=1)

    text_editor_frame.grid(row=1, column=1, sticky="nsew", padx=2, pady=2)  # columnspan=2) ?
    
    text.bind("<<Change>>", create_text_line_numbers(linenumbers_canvas, text, text_color, main_color))
    text.bind("<<Modified>>", create_text_line_numbers(linenumbers_canvas, text, text_color, main_color))
    text.bind("<Configure>", create_text_line_numbers(linenumbers_canvas, text, text_color, main_color))
    
    return text

def create_search_bar(window):  
    global search_bar
    global search_bar_checkbutton_var    

    search_bar_checkbutton_var = IntVar()

    search_bar = Frame(window, bd=5, height=25, highlightthickness=0)
    search_bar.grid(row=3, column=1, sticky="ew", pady=5)
    search_bar.grid_remove()  # Hide search bar initially

    global search_entry

    search_label = Label(search_bar, text="Search:")
    search_label.grid(row=0, column=0, padx=2, pady=2, sticky="w")

    search_entry = Entry(search_bar)
    search_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")

    search_next_button = Button(search_bar, text="Find Next", command=find_next)    
    search_next_button.grid(row=0, column=2, padx=5, pady=5, sticky="w")

    search_prev_button = Button(search_bar, text="Find Prev", command=find_previous)
    search_prev_button.grid(row=0, column=3, padx=5, pady=5, sticky="w")

    clear_search_button = Button(search_bar, text="Clear Search", command=clear_find_results) 
    clear_search_button.grid(row=0, column=4, padx=2, pady=2, sticky="w")

    space_button = Button(search_bar, text="", padx=5, pady=5, relief="flat", width=5, state='disabled')
    space_button.grid(row=0, column=5, padx=2, pady=2, sticky="w")

    search_all_button = Button(search_bar, text="Find All", command=find_all) 
    search_all_button.grid(row=0, column=6, padx=2, pady=2, sticky="w")

    search_positions = []
    current_result_index = -1

    search_entry.focus_set()    # Set focus to search entry widget


# Create the Status Bar
def create_status_bar(window):
    """
    Creates or destroys a status bar, depending on the state of the statusbar_is_on variable.   
    Creates a status bar label that can be updated with update_status_bar_message(new_message)
    """
    # Declare global variable to track the visibility of the Status Bar
    # Should the Status be restored when the Search Bar is toggled off?
    is_status_bar_visible = True    # On by default

    global status_bar
    status_bar = ttk.Frame(window)
    status_bar.grid(row=4, column=1, sticky="WE", pady=5)
   
    global status_bar_label  
    # Create variables for check buttons
    status_bar_label = Label(status_bar, text=status_bar_message)
    # Adding padx/pady to the following line interferes with Night Mode
    # status_bar_label.grid(row=0, column=1, padx=5, pady=5)
    status_bar_label.grid(row=0, column=1)

    # Allocate extra space for the status bar without padding
    window.grid_rowconfigure(4, weight=1)   # Use in place of padding


text_item = None
"""
def create_text_line_numbers(canvas, text_widget, line_number_color, main_color):
    def redraw(*args):
        global text_item  # Make text_item global
        canvas.delete("all")

        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            text_item = canvas.create_text(2, y, anchor="nw", text=linenum, fill=line_number_color)
            i = text_widget.index("%s+1line" % i)

    redraw()

    text_widget.bind("<<Change>>", redraw)
    text_widget.bind("<<Modified>>", redraw)
    text_widget.bind("<Configure>", redraw)

    return redraw
"""

def create_text_line_numbers(canvas, text_widget, line_number_color, main_color):
    def redraw(*args):
        global text_item  # Make text_item global
        canvas.delete("all")

        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            text_item = canvas.create_text(2, y, anchor="nw", text=linenum, fill=line_number_color)
            i = text_widget.index("%s+1line" % i)

    redraw()

    text_widget.bind("<<Change>>", redraw)
    text_widget.bind("<<Modified>>", redraw)
    text_widget.bind("<Configure>", redraw)

    return redraw

"""
def create_text_line_numbers(canvas, text_widget, line_number_color):
    text_item = None

    def redraw(*args):
        nonlocal text_item

        canvas.delete("all")

        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            #canvas.create_text(2, y, anchor="nw", text=linenum)
            #canvas.create_text(2, y, anchor="nw", text=linenum, fill=text_color) 
            # Assign variables for the fill and outline color to use in Night Mode
            
            text_item = canvas.create_text(2, y, anchor="nw", text=linenum, fill=text_color)
            
            #canvas.create_text(2, y, anchor="nw", text=linenum, fill=text_color, outline=main_color)

            i = text_widget.index("%s+1line" % i)

    redraw()

    text_widget.bind("<<Change>>", redraw)
    text_widget.bind("<<Modified>>", redraw)
    text_widget.bind("<Configure>", redraw)

    return redraw
"""

status_bar_message = "Status Bar"

def toggle_status_bar():
    global is_status_bar_visible

    if search_bar.winfo_ismapped():
        is_status_bar_visible = True      # Make Status Bar visible when Search Bar is off    
    else:
        if status_bar_checkbutton_var.get() == 1:
            status_bar.grid(row=2, column=0, columnspan=2, sticky=W)
            is_status_bar_visible = True
        else:
            status_bar.grid_remove()
            is_status_bar_visible = False

def toggle_search_bar(event=None):
    global is_status_bar_visible

    if search_bar.winfo_ismapped():
        search_bar.grid_remove()
        search_bar_checkbutton_var.set(0)
        if is_status_bar_visible:
            status_bar.grid(row=2, column=0, columnspan=2, sticky=W)
            status_bar_checkbutton_var.set(1)
    else:
        search_bar.grid(row=2, column=0, columnspan=2, sticky='w')
        search_bar_checkbutton_var.set(1)

        if is_status_bar_visible:
            status_bar.grid_remove()
            status_bar_checkbutton_var.set(0)

def update_status_bar_message(new_message):
    status_bar_message = new_message
    status_bar_label.config(text=status_bar_message)

search_positions = []

def find_all():
    search_text = search_entry.get()

    if search_text:
        start_pos = "1.0"
        while True:
            pos = text_widget.search(search_text, start_pos, stopindex="end")
            if not pos:
                break
            end_pos = f"{pos}+{len(search_text)}c"
            text_widget.tag_add("found", pos, end_pos)
            start_pos = end_pos
        text_widget.tag_configure("found", background="yellow")
    else:
        messagebox.showerror("Search", "Please enter text before searching")

def find_next():       
    global search_positions

    search_text = search_entry.get()

    if search_text:
        start_pos = "1.0"
        if not search_positions:
            search_positions = []
            while True:
                pos = text_widget.search(search_text, start_pos, stopindex="end")
                if not pos:
                    break
                end_pos = f"{pos}+{len(search_text)}c"
                text_widget.tag_add("found", pos, end_pos)
                start_pos = end_pos
                search_positions.append(pos)
            text_widget.tag_configure("found", background="yellow")
            global current_result_index
            current_result_index = -1

        if current_result_index < len(search_positions) - 1:
            current_result_index += 1
        else:
            current_result_index = -1

        next_result()  
    else:
        messagebox.showerror("Search", "Please enter text before searching")

def find_previous():       
    global current_result_index
    global search_positions

    search_text = search_entry.get()

    if search_text:
        end_pos = "end-1c"
        if not search_positions:
            search_positions = []
            while True:
                pos = text_widget.search(search_text, end_pos, stopindex="1.0", backwards=True)
                if not pos:
                    break
                end_pos = pos
                text_widget.tag_add("found", pos, f"{pos}+{len(search_text)}c")
                search_positions.insert(0, pos)
            text_widget.tag_configure("found", background="yellow")
            current_result_index = len(search_positions)
        if current_result_index > 0:
            current_result_index -= 1
        else:
            current_result_index = len(search_positions) - 1
        next_result()
    else:
        messagebox.showerror("Search", "Please enter text before searching")

def next_result():   
    global current_result_index
    global search_positions

    if search_positions:
        text_widget.tag_remove("found", "1.0", "end")
        result_pos = search_positions[current_result_index]
        end_pos = f"{result_pos}+{len(search_entry.get())}c"
        text.tag_add("found", result_pos, end_pos)

        text_widget.mark_set("insert", result_pos)
        text_widget.see(result_pos)

def clear_find_results(event=None):
    global current_result_index
    global search_positions

    if "found" in text_widget.tag_names():
        text_widget.tag_remove("found", "1.0", "end")
        search_positions = []
        current_result_index = -1

    search_entry.bind("<KeyRelease>", clear_find_results)
   
def fuzzy_find():
    pass

def replace():
    pass

def go_to_line():
    pass

def hover(widget):
    widget.bind("<Enter>", func=lambda e: widget.config(bg="#202020", fg="white"))
    widget.bind("<Leave>", func=lambda e: widget.config(bg="#202020", fg="white"))

def night_mode():
    global main_color
    global text_color

    if night_mode_checkbutton_var.get() == 1:
        main_color = "#000000"
        second_color = "#373737"
        selection_highlight = "dark green"
        text_color = "green"
        
        def on_enter(e):
            e.widget['background'] = text_color
            e.widget['foreground'] = second_color         

        def on_exit(e):
            e.widget['background'] = second_color
            e.widget['foreground'] = text_color

        window.config(bg=main_color)


        toolbar_frame.config(bg=main_color)
        linenumbers_canvas.config(bg=main_color, selectforeground=text_color)
        text.config(bg=second_color, insertbackground=text_color, selectforeground=selection_highlight)
        #status_bar.config(bg=main_color, fg=text_color)
        status_bar_label.config(bg=main_color, fg=text_color)
        
        
        global text_item  # Make text_item global
        # Call create_text_line_numbers with the line_number_color parameter
        create_text_line_numbers(linenumbers_canvas, text, text_color, main_color)


        file_menu.config(bg=main_color, fg=text_color)
        edit_menu.config(bg=main_color, fg=text_color)
        search_menu.config(bg=main_color, fg=text_color)
        format_menu.config(bg=main_color, fg=text_color)
        tools_menu.config(bg=main_color, fg=text_color)
        options_menu.config(bg=main_color, fg=text_color, selectcolor=text_color)

        bold_button.config(bg=second_color, fg=text_color)
        bold_button.bind("<Enter>", on_enter)
        bold_button.bind("<Leave>", on_exit)  

        italics_button.config(bg=second_color, fg=text_color)
        italics_button.bind("<Enter>", on_enter)
        italics_button.bind("<Leave>", on_exit)

        underline_button.config(bg=second_color, fg=text_color)
        underline_button.bind("<Enter>", on_enter)
        underline_button.bind("<Leave>", on_exit)

        strike_button.config(bg=second_color, fg=text_color)
        strike_button.bind("<Enter>", on_enter)
        strike_button.bind("<Leave>", on_exit)

        redo_button.config(bg=second_color, fg=text_color)
        redo_button.bind("<Enter>", on_enter)
        redo_button.bind("<Leave>", on_exit)

        undo_button.config(bg=second_color, fg=text_color)
        undo_button.bind("<Enter>", on_enter)
        undo_button.bind("<Leave>", on_exit)

        color_text_button.config(bg=second_color, fg=text_color)
        color_text_button.bind("<Enter>", on_enter)
        color_text_button.bind("<Leave>", on_exit)
        
        if highlighting.get() == True:
            text.tag_remove("current_line", 1.0, "end")
            highlight_current_line()
            text.tag_configure("current_line", background="#666666")
            text.tag_add("current_line", 1.0, "end")            
        else:
            text.tag_remove("current_line", 1.0, "end")
            text.tag_configure("current_line", background="#373737")
            text.tag_add("current_line", 1.0, "end")
        
    else:
        main_color = "SystemButtonFace"
        second_color = "SystemButtonFace"
        selection_highlight = "#999999"
        text_color = "black"

        def on_enter(e):
            e.widget['background'] = text_color
            e.widget['foreground'] = second_color         

        def on_exit(e):
            e.widget['background'] = second_color
            e.widget['foreground'] = text_color

        window.config(bg=main_color)
        status_bar.config(bg=main_color, fg=text_color)
        status_bar_label.config(bg=main_color, fg=text_color)
        text.config(bg="white", insertbackground=text_color, selectforeground=selection_highlight)  
        toolbar_frame.config(bg=main_color)

        file_menu.config(bg=main_color, fg=text_color)
        edit_menu.config(bg=main_color, fg=text_color)
        search_menu.config(bg=main_color, fg=text_color)
        format_menu.config(bg=main_color, fg=text_color)
        tools_menu.config(bg=main_color, fg=text_color)
        options_menu.config(bg=main_color, fg=text_color, selectcolor=text_color)

        bold_button.config(bg=second_color, fg=text_color)
        bold_button.bind("<Enter>", on_enter)
        bold_button.bind("<Leave>", on_exit)  

        italics_button.config(bg=second_color, fg=text_color)
        italics_button.bind("<Enter>", on_enter)
        italics_button.bind("<Leave>", on_exit)

        underline_button.config(bg=second_color, fg=text_color)
        underline_button.bind("<Enter>", on_enter)
        underline_button.bind("<Leave>", on_exit)

        strike_button.config(bg=second_color, fg=text_color)
        strike_button.bind("<Enter>", on_enter)
        strike_button.bind("<Leave>", on_exit)

        redo_button.config(bg=second_color, fg=text_color)
        redo_button.bind("<Enter>", on_enter)
        redo_button.bind("<Leave>", on_exit)

        undo_button.config(bg=second_color, fg=text_color)
        undo_button.bind("<Enter>", on_enter)
        undo_button.bind("<Leave>", on_exit)

        color_text_button.config(bg=second_color, fg=text_color)
        color_text_button.bind("<Enter>", on_enter)
        color_text_button.bind("<Leave>", on_exit)

        if highlighting.get() == True:
            text.tag_remove("current_line", 1.0, "end")
            text.tag_configure("current_line", background="#e9e9e9", selectbackground="#999999")
            text.tag_add("current_line", 1.0, "end")            
        else:
            text.tag_remove("current_line", 1.0, "end")
            text.tag_configure("current_line", background="white", selectbackground="yellow")
            text.tag_add("current_line", 1.0, "end")

highlight_enabled = False

def toggle_line_highlighting():
    if highlighting.get() == True:
        def highlight_current_line(interval=100):
            text.tag_remove("current_line", 1.0, "end")
            text.tag_add("current_line", "insert linestart", "insert lineend+1c")
            text.after(interval, highlight_current_line)
        
        highlight_current_line()
        text.tag_configure("current_line", background="#e9e9e9", selectbackground="#999999") 

    else:
        global highlight_enabled
        highlight_enabled = False
        
        text.tag_remove("current_line", 1.0, "end")
        text.tag_configure("current_line", background="white", selectbackground="yellow")
        text.tag_add("current_line", 1.0, "end")        
   
def toggle_linenumbers():
    if linenumbers_button_var.get():
        linenumbers_canvas.grid(row=1, column=0, sticky="NS")
        window.grid_rowconfigure(0, weight=0, minsize=0)
        window.grid_rowconfigure(1, weight=1, minsize=0)
    else:
        linenumbers_canvas.grid_forget()         

def word_wrap():
    if word_wrap_checkbutton_var.get() == 1:
        text.config(wrap="word")
        #status_bar_label.config(text="Word Wrap On       ")
        update_status_bar_message(new_message="Word Wrap On     ")
    else:
        text.config(wrap="none")
        #status_bar_label.config(text="Word Wrap Off      ")
        update_status_bar_message(new_message="Word Wrap Off     ")

def case_tools():
    pass

def character_tools():
    pass

def expression_tools():
    pass

def line_tools():
    pass

def statistic_tools():
    pass

def transform_tools():
    pass

def space_tools():
    pass


def create_menu(window):
    menu_bar = Menu(window)
    window.config(menu=menu_bar)

    file_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="File", menu=file_menu)
    
    messages_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="Messages", menu=messages_menu)

    messages_menu.add_command(label="Item 1", command=lambda: status_bar_label.config(text="Item 1"))
    messages_menu.add_command(label="Item 2", command=lambda: status_bar_label.config(text="Item 2"))
    messages_menu.add_command(label="Item 3", command=lambda: status_bar_label.config(text="Item 3"))
    
    options_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="Options", menu=options_menu)

    global highlighting
    highlighting = BooleanVar()
    options_menu.add_checkbutton(
        label="Line Highlighting", 
        variable=highlighting,
        onvalue=True, 
        offvalue=False, 
        command=toggle_line_highlighting)
    
    global night_mode_checkbutton_var
    night_mode_checkbutton_var = IntVar()
    night_mode_checkbutton_var.set(0)
    
    options_menu.add_checkbutton(
        label="Night Mode", 
        variable=night_mode_checkbutton_var,
        command=night_mode)    
    
    global linenumbers_button_var
    linenumbers_button_var = BooleanVar(value=True)

    options_menu.add_checkbutton(
        label="Show Line Numbers",
        variable=linenumbers_button_var,
        onvalue=True,
        offvalue=False,
        command=toggle_linenumbers)   

    global status_bar_checkbutton_var
    status_bar_checkbutton_var = IntVar()

    status_bar_checkbutton_var.set(1)
    status_bar_checkbutton = options_menu.add_checkbutton(
        label="Status Bar", 
        variable=status_bar_checkbutton_var, 
        command=toggle_status_bar)

    global word_wrap_checkbutton_var
    word_wrap_checkbutton_var = IntVar()
    word_wrap_checkbutton_var.set(0)
    
    options_menu.add_checkbutton(
        label="Word Wrap",
        variable=word_wrap_checkbutton_var,
        command=word_wrap)

    search_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="Search", menu=search_menu)

    search_bar_checkbutton_var.set(0)
    search_bar_checkbutton = search_menu.add_checkbutton(
        label="Search bar", 
        variable=search_bar_checkbutton_var, 
        command=toggle_search_bar)

    tools_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="Tools", menu=tools_menu)

    tools_menu.add_command(label="Change Case", command=case_tools)
    tools_menu.add_command(label="Characters", command=character_tools)
    tools_menu.add_command(label="Expressions", command=expression_tools)
    tools_menu.add_command(label="Lines", command=line_tools)
    tools_menu.add_command(label="Transform", command=transform_tools)
    tools_menu.add_command(label="White Space", command=space_tools)
    tools_menu.add_separator()
    tools_menu.add_command(label="Statistical Analysis", command=statistic_tools)

def create_toolbar(window):
    global toolbar_frame
    toolbar_frame = Frame(window, bd=5, highlightthickness=0)

    bold_button = Button(toolbar_frame, text="Bold")
    bold_button.grid(row=0, column=0, padx=2, pady=0)

    italic_button = Button(toolbar_frame, text="Italic")
    italic_button.grid(row=0, column=1, padx=2, pady=0)

    underline_button = Button(toolbar_frame, text="Underline")
    underline_button.grid(row=0, column=2, padx=2, pady=0)

    toolbar_frame.grid(row=0, column=0, columnspan=2, sticky="nw")
    toolbar_frame.config(padx=0, pady=0)  
  
def create_bindings(window):
    search_entry.bind("<KeyRelease>", clear_find_results)
    search_entry.bind("<KeyRelease-Return>", lambda event: find_all())
    search_entry.bind("<Escape>", clear_find_results)
    search_entry.bind("<KeyRelease-Escape>", toggle_search_bar)
    
    window.bind('<Control-F>', lambda event: toggle_search_bar())
    window.bind('<Control-f>', lambda event: toggle_search_bar()) 
    window.bind('<F3>', find_next)
    
def create_window():
    global linenumbers_canvas, text_widget, window
 
    #global text_color
    #text_color = "black"
    
    # Example usage:
    main_color = "#FFFFFF"  # Set the desired main color value
    

    window = Tk()
    window.title("Text Editor")
    window.geometry("1200x690")
    window.resizable(True,True)

    window.grid_columnconfigure(1, weight=1)
    window.grid_rowconfigure(0, weight=0, minsize=0)
    window.grid_rowconfigure(1, weight=1, minsize=0)


    # Create line numbers canvas
    linenumbers_canvas = Canvas(window, width=40, bg=main_color, highlightthickness=0)
    # Set the text color for the canvas
    # Create the text on the canvas
    #text_item = linenumbers_canvas.create_text(10, 10, text="Sample Text")
    linenumbers_canvas.itemconfig(text_item, fill=text_color)

    """
    #linenumbers_canvas = Canvas(window, width=40)   
    linenumbers_canvas = Canvas(window, width=40, highlightthickness=0)
    #linenumbers_canvas = Canvas(root, bg=main_color, highlightthickness=0)
    linenumbers_canvas.grid(row=1, column=0, sticky="NS")
    window.grid_rowconfigure(1, minsize=linenumbers_canvas.winfo_reqheight())    
    """

    linenumbers_canvas.grid_propagate(False)
    linenumbers_canvas.configure(width=30)

    text_widget = create_custom_text(window, linenumbers_canvas, main_color) 
    text_widget.insert("end", "Type some text here...")

    text.insert("end", "one\ntwo\nthree\n")
    text.insert("end", "four\n", ("bigfont",))
    text.insert("end", "five\nsecond two\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
    text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthree two")
    text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfour two")
    text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfive two")
    text.tag_configure("bigfont", font=("Helvetica", "24", "bold")) 

    create_search_bar(window)
    create_status_bar(window)
    create_menu(window)
    create_toolbar(window) 

    toggle_linenumbers()
    toggle_status_bar()
    create_bindings(window)

    window.mainloop()

if __name__ == "__main__":
    create_window()

