"""
The following is an attempt to convert the .configure method
used in Tkinter's text widget to tags that format text inside
a .docx file using the Python Docx library.
"""

def save_to_docx():
    file_path = filedialog.asksaveasfilename(defaultextension=".docx")
    if file_path:
        document = Document()
        format_text_widget(document)
        document.save(file_path)

def format_text_widget(document):
    # Iterate over each tag applied to the text widget
    for tag in text_widget.tag_names():
        # Get all ranges for the current tag
        ranges = text_widget.tag_ranges(tag)
        for start, end in zip(ranges[::2], ranges[1::2]):
            # Extract text and apply formatting
            paragraph_text = text_widget.get(start, end)
            format_paragraph(document, paragraph_text, tag)

def format_paragraph(document, paragraph_text, tag):
    p = document.add_paragraph()
    words = paragraph_text.split()
    run = p.add_run()
    for word in words:
        run.add_text(word + " ")
        # Apply formatting based on the tag
        if tag == "bold":
            run.bold = True
        elif tag == "italic":
            run.italic = True
        elif tag == "underline":
            run.underline = True
        elif tag == "font_size":
            font_size = int(text_widget.tag_cget(tag, "font")[6:])
            run.font.size = Pt(font_size)


# Returns ONLY formatted portions of text, each instance on its own line.

"""
the ability to underline words 
bold formatting 
italics formatting 
the ability to underline words 
"""
