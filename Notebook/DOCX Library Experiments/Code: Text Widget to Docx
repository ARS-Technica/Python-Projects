"""
The following is an attempt to convert the .configure method
used in Tkinter's text widget to tags that format text inside
a .docx file using the Python Docx library.
"""

def format_paragraph(document, paragraph_text):
    p = document.add_paragraph()
    words = re.findall(r'\S+|\s+', paragraph_text)  # Split into words and whitespace
    current_index = "1.0"
    for word in words:
        # Search for the current word in the text widget
        next_index = text_widget.search(word, current_index, stopindex="end")
        if next_index:
            # Check if the word includes the end of formatting
            end_of_formatting = text_widget.tag_nextrange("sel", next_index)
            if end_of_formatting:
                # If the end of formatting is within the current word, adjust the word
                if text_widget.compare(end_of_formatting[1], ">=", next_index) and text_widget.compare(end_of_formatting[1], "<=", next_index + "+%dc" % len(word)):
                    word = text_widget.get(next_index, end_of_formatting[1])
                    next_index = end_of_formatting[1]
            # Get the tags applied to the current word
            tags = text_widget.tag_names(next_index)
            # Determine the formatting for the current word
            word_format = {}
            for tag in tags:
                if tag == "bold":
                    word_format["bold"] = True
                elif tag == "italic":
                    word_format["italic"] = True
                elif tag == "underline":
                    word_format["underline"] = True
                elif tag == "font_size":
                    font_size = int(text_widget.tag_cget(tag, "font")[6:])
                    word_format["font_size"] = Pt(font_size)
            # Add the word with the applied formatting to the document
            run = p.add_run(word)
            if word_format.get("bold"):
                run.bold = True
            if word_format.get("italic"):
                run.italic = True
            if word_format.get("underline"):
                run.underline = True
            if word_format.get("font_size"):
                run.font.size = word_format["font_size"]
            # Update the current index for the next search
            current_index = next_index + "+%dc" % len(word)


# Formatting and spacing fine.  Partially formatted words displayed as entirely formatted.
