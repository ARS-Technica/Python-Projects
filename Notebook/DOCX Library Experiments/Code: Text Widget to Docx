"""
The following is an attempt to convert the .configure method
used in Tkinter's text widget to tags that format text inside
a .docx file using the Python Docx library.
"""

def save_to_docx():
    file_path = filedialog.asksaveasfilename(defaultextension=".docx")
    if file_path:
        document = Document()
        content = text_widget.get("1.0", "end")
        paragraphs = content.split('\n\n')  # Split content into paragraphs
        for paragraph in paragraphs:
            format_paragraph(document, paragraph)
        document.save(file_path)
        
    os.startfile(file_path) # REMOVE AFTER DEBUGGING

def format_paragraph(document, paragraph_text):
    p = document.add_paragraph()

    current_index = "1.0"
    words = re.findall(r"(\b\w+\b|\s+|\W+)", paragraph_text)  # Extract words, spaces, and punctuation

    sentence = ""  # Variable to store the current sentence
    sentence_tags = set()  # Set to store tags for the current sentence

    for word in words:
        next_index = text_widget.search(word, current_index, stopindex="end")

        if next_index:
            # Get the tags for the current word
            tags = text_widget.tag_names(next_index)

            # If the tags for the current word are different from the tags for the current sentence
            if tags != sentence_tags:
                # Add the current sentence to the document as a run
                run = p.add_run(sentence)
                # Apply formatting based on the tags for the current sentence
                apply_formatting(run, sentence_tags)
                # Start a new sentence with the current word
                sentence = word
                # Update the set of tags for the current sentence
                sentence_tags = set(tags)
            else:
                # If the tags are the same, continue building the current sentence
                sentence += word

    # Add the last sentence to the document
    run = p.add_run(sentence)
    apply_formatting(run, sentence_tags)

def apply_formatting(run, tags):
    # Apply formatting attributes based on the tags associated with the sentence
    run.bold = "bold" in tags
    run.italic = "italic" in tags
    run.underline = "underline" in tags
    
    for tag in tags:
        if tag == "font_size":
            font_size = int(text_widget.tag_cget(tag, "font")[6:])
            run.font.size = Pt(font_size)


# Perfect spacing.  Punctuation visible.  Perfect Formatting.
# Breaks for Runs at Tags, rather than assigning every word a run.
