"""
Now that I have a function that converts text files created in a tkinter 
interface into clean .Docx files, I need to incorporate font faces and 
font sizes into the interface without interfering with the conversion function. 
"""


import tkinter as tk
from tkinter import font
from tkinter import messagebox
import uuid

def apply_font():
    if text_widget.tag_ranges("sel"):
        selected_font = font_family_var.get()
        if selected_font:
            tag_name = "font_" + str(uuid.uuid4())
            text_widget.tag_add(tag_name, "sel.first", "sel.last")
            font_config = (selected_font, font_size_var.get())
            apply_formatting(tag_name, font_config)
        else:
            messagebox.showwarning("Warning", "Please select a font face.")
    else:
        messagebox.showwarning("Warning", "No text selected.")

def apply_font_size():
    if text_widget.tag_ranges("sel"):
        tag_name = "font_" + str(uuid.uuid4())
        text_widget.tag_add(tag_name, "sel.first", "sel.last")
        font_config = (font_family_var.get(), font_size_var.get())
        apply_formatting(tag_name, font_config)
    else:
        messagebox.showwarning("Warning", "No text selected.")

def apply_formatting(tag_name, font_config):
    formatting_tags = []

    if bold_var.get():
        formatting_tags.append("bold")
    if italic_var.get():
        formatting_tags.append("italic")
    if overstrike_var.get():
        formatting_tags.append("overstrike")
    if underline_var.get():
        formatting_tags.append("underline")

    text_widget.tag_configure(tag_name, font=font_config, **{tag: True for tag in formatting_tags})

root = tk.Tk()
root.title("Font Settings")

font_families = ["Helvetica", "Arial", "Times New Roman", "Courier New"]
font_family_var = tk.StringVar(root)
font_family_var.set(font_families[0])

font_family_label = tk.Label(root, text="Font Family:")
font_family_label.grid(row=0, column=0, padx=5, pady=5)

font_family_menu = tk.OptionMenu(root, font_family_var, *font_families)
font_family_menu.grid(row=0, column=1, padx=5, pady=5)

apply_font_button = tk.Button(root, text="Apply Font", command=apply_font)
apply_font_button.grid(row=0, column=2, padx=5, pady=5)

font_size_var = tk.IntVar(root)
font_size_var.set(12)

font_size_label = tk.Label(root, text="Font Size:")
font_size_label.grid(row=1, column=0, padx=5, pady=5)

font_size_spinbox = tk.Spinbox(root, from_=8, to=72, textvariable=font_size_var)
font_size_spinbox.grid(row=1, column=1, padx=5, pady=5)

apply_font_size_button = tk.Button(root, text="Apply Font Size", command=apply_font_size)
apply_font_size_button.grid(row=1, column=2, padx=5, pady=5)

bold_var = tk.BooleanVar(root, False)
bold_checkbox = tk.Checkbutton(root, text="Bold", variable=bold_var)
bold_checkbox.grid(row=0, column=3, padx=5, pady=5)

italic_var = tk.BooleanVar(root, False)
italic_checkbox = tk.Checkbutton(root, text="Italic", variable=italic_var)
italic_checkbox.grid(row=0, column=4, padx=5, pady=5)

overstrike_var = tk.BooleanVar(root, False)
overstrike_checkbox = tk.Checkbutton(root, text="Overstrike", variable=overstrike_var)
overstrike_checkbox.grid(row=1, column=3, padx=5, pady=5)

underline_var = tk.BooleanVar(root, False)
underline_checkbox = tk.Checkbutton(root, text="Underline", variable=underline_var)
underline_checkbox.grid(row=1, column=4, padx=5, pady=5)

text_widget = tk.Text(root, wrap="word", font=("Helvetica", 12))
text_widget.grid(row=2, column=0, columnspan=5, padx=5, pady=5)

root.mainloop()

# Checkboxes don't work


"""
Example of how I want to generate tags:

def make_tag():
	current_tags = text.tag_names()
	if "bold" in current_tags:
		weight = "bold"
	else:
		weight = "normal"

	if "italic" in current_tags:
		slant = "italic"
	else:
		slant = "roman"

	if "underline" in current_tags:
		underline = 1
	else:
		underline = 0

	if "overstrike" in current_tags:
		overstrike = 1
	else:
		overstrike = 0

	big_font = tkFont.Font(text, text.cget("font"))
    
	big_font.configure(slant= slant , weight= weight , underline= underline , overstrike= overstrike , family= current_font_family , size= current_font_size )
	text.tag_config("BigTag", font=big_font , foreground= fontColor , background= fontBackground) 
    
	if "BigTag" in  current_tags:
		text.tag_remove("BigTag" , 1.0 , END)
        
	text.tag_add("BigTag" , 1.0 , END)
"""

