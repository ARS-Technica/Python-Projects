"""
Now that I have a function that converts text files created in a tkinter 
interface into clean .Docx files, I need to incorporate font faces and 
font sizes into the interface without interfering with the conversion function. 
"""


import tkinter as tk
from tkinter import font
from tkinter import messagebox

def apply_font():
    if text_widget.tag_ranges("sel"):
        selected_font = font_family_var.get()
        if selected_font:
            tag_name = "custom_font"
            current_config = text_widget.tag_configure(tag_name)
            new_config = dict(current_config)
            new_config["font"] = (selected_font, new_config["font"][1])
            text_widget.tag_configure(tag_name, **new_config)
            text_widget.tag_add(tag_name, "sel.first", "sel.last")
        else:
            messagebox.showwarning("Warning", "Please select a font face.")
    else:
        messagebox.showwarning("Warning", "No text selected.")

def apply_font_size():
    if text_widget.tag_ranges("sel"):
        selected_size = font_size_var.get()
        if selected_size:
            tag_name = "custom_font"
            current_config = text_widget.tag_configure(tag_name)
            new_config = dict(current_config)
            new_config["font"] = (new_config["font"][0], selected_size)
            text_widget.tag_configure(tag_name, **new_config)
            text_widget.tag_add(tag_name, "sel.first", "sel.last")
        else:
            messagebox.showwarning("Warning", "Please select a font size.")
    else:
        messagebox.showwarning("Warning", "No text selected.")

root = tk.Tk()
root.title("Font Settings")

# Font families
font_families = ["Helvetica", "Arial", "Times New Roman", "Courier New"]
font_family_var = tk.StringVar(root)
font_family_var.set(font_families[0])  # Set default font family

font_family_label = tk.Label(root, text="Font Family:")
font_family_label.grid(row=0, column=0, padx=5, pady=5)

font_family_menu = tk.OptionMenu(root, font_family_var, *font_families)
font_family_menu.grid(row=0, column=1, padx=5, pady=5)

apply_font_button = tk.Button(root, text="Apply Font", command=apply_font)
apply_font_button.grid(row=0, column=2, padx=5, pady=5)

# Font sizes
font_size_var = tk.IntVar(root)
font_size_var.set(12)  # Set default font size

font_size_label = tk.Label(root, text="Font Size:")
font_size_label.grid(row=1, column=0, padx=5, pady=5)

font_size_spinbox = tk.Spinbox(root, from_=8, to=72, textvariable=font_size_var)
font_size_spinbox.grid(row=1, column=1, padx=5, pady=5)

apply_font_size_button = tk.Button(root, text="Apply Font Size", command=apply_font_size)
apply_font_size_button.grid(row=1, column=2, padx=5, pady=5)

# Text widget
text_widget = tk.Text(root, wrap="word", font=("Helvetica", 12))
text_widget.grid(row=2, column=0, columnspan=3, padx=5, pady=5)

root.mainloop()


# _tkinter.TclError: unknown color name "background {} {} {} {}"
