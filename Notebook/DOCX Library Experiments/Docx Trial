"""
After considerable difficulty writting an .rtf file editor in Python 3.x,
this program is an attempt to use the .docx file format in place of .rtf.

Using Python's Tkinter and docx libraries, I've created a simple text widget
with a button to make selected text bold and an export button that saves the
text on the text widget as a .docx file that preserves the bold formatting
applied to the text.
"""

# Added an include_newline parameter to the save_to_docx() function with a default value of True. 
# This parameter controls whether a new line appears between paragraphs.
# Call the save_to_docx() function with include_newline=False to prevent new lines between paragraphs. save_to_docx(include_newline=False)

import tkinter as tk
from tkinter import filedialog
from docx import Document
from docx.shared import Pt

def open_docx_file():
    file_path = filedialog.askopenfilename(filetypes=[("Word files", "*.docx")])
    if file_path:
        document = Document(file_path)
        text_widget.delete("1.0", "end")
        for paragraph in document.paragraphs:
            text_widget.insert("end", paragraph.text + "\n")

def save_to_docx(include_newline=True):
    file_path = filedialog.asksaveasfilename(defaultextension=".docx")
    if file_path:
        document = Document()
        for line in text_widget.get("1.0", "end").split("\n"):
            p = document.add_paragraph()
            words = line.split()
            for i, word in enumerate(words):
                tags = text_widget.tag_names(f"1.{len(' '.join(words[:i]))} wordstart")

                run = p.add_run(word)
                for tag in tags:
                    if tag == "bold":
                        run.bold = True
                    elif tag == "italic":
                        run.italic = True
                    elif tag == "underline":
                        run.underline = True
                    elif tag == "font_size":
                        font_size = int(text_widget.tag_cget("font_size", "font")[6:])
                        run.font.size = Pt(font_size)
                run.add_text(" ")

            if include_newline:
                document.add_paragraph("")  # Add a new line between paragraphs if include_newline is True

        document.save(file_path)

def apply_bold():
    text_widget.tag_add("bold", "sel.first", "sel.last")

def apply_italic():
    text_widget.tag_add("italic", "sel.first", "sel.last")

def apply_underline():
    text_widget.tag_add("underline", "sel.first", "sel.last")

root = tk.Tk()
root.title("Docx Text Editor")

text_widget = tk.Text(root, wrap="word")
text_widget.pack(fill="both", expand=True)

bold_button = tk.Button(root, text="Bold", command=apply_bold)
bold_button.pack(side="left", padx=5, pady=5)

italic_button = tk.Button(root, text="Italic", command=apply_italic)
italic_button.pack(side="left", padx=5, pady=5)

underline_button = tk.Button(root, text="Underline", command=apply_underline)
underline_button.pack(side="left", padx=5, pady=5)

menu_bar = tk.Menu(root)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Open", command=open_docx_file)
file_menu.add_command(label="Save", command=save_to_docx)
file_menu.add_command(label="Exit", command=root.destroy)
menu_bar.add_cascade(label="File", menu=file_menu)
root.config(menu=menu_bar)

# Add formatting tags
text_widget.tag_configure("bold", font=("Helvetica", 12, "bold"))
text_widget.tag_configure("italic", font=("Helvetica", 12, "italic"))
text_widget.tag_configure("underline", underline=True)
text_widget.tag_configure("font_size", font=("Helvetica", 12))

root.mainloop()


# Waaay too much space between paragraphs
