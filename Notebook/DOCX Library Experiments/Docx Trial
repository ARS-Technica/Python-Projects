"""
After considerable difficulty writting an .rtf file editor in Python 3.x,
this program is an attempt to use the .docx file format in place of .rtf.

Using Python's Tkinter and docx libraries, I've created a simple text widget
with a button to make selected text bold and an export button that saves the
text on the text widget as a .docx file that preserves the bold formatting
applied to the text.
"""

import tkinter as tk
from tkinter import filedialog
from docx import Document
from docx.shared import Pt

def open_docx_file():
    file_path = filedialog.askopenfilename(filetypes=[("Word files", "*.docx")])
    if file_path:
        document = Document(file_path)
        text_widget.delete("1.0", "end")
        for paragraph in document.paragraphs:
            text_widget.insert("end", paragraph.text + "\n")

def save_to_docx():
    file_path = filedialog.asksaveasfilename(defaultextension=".docx")
    if file_path:
        document = Document()

        # Get all content from the text widget in a single string
        content = text_widget.get("1.0", "end")

        # Create a single paragraph and process it for formatting
        p = document.add_paragraph()
        current_index = "1.0"
        while True:
            next_index = text_widget.search(r"\S", current_index, stopindex="end", regexp=True)
            if not next_index:
                break
            word_end = text_widget.search(r"\s", next_index, stopindex="end", regexp=True)
            if not word_end:
                word_end = "end"
            tags = text_widget.tag_names(next_index)

            word = text_widget.get(next_index, word_end)
            run = p.add_run(word)
            for tag in tags:
                if tag == "bold":
                    run.bold = True
                elif tag == "italic":
                    run.italic = True
                elif tag == "underline":
                    run.underline = True
                elif tag == "font_size":
                    font_size = int(text_widget.tag_cget("font_size", "font")[6:])
                    run.font.size = Pt(font_size)
            run.add_text(" ")
            current_index = word_end

        document.save(file_path)




def apply_bold():
    text_widget.tag_add("bold", "sel.first", "sel.last")

def apply_italic():
    text_widget.tag_add("italic", "sel.first", "sel.last")

def apply_underline():
    text_widget.tag_add("underline", "sel.first", "sel.last")

root = tk.Tk()
root.title("Docx Text Editor")

text_widget = tk.Text(root, wrap="word")
text_widget.pack(fill="both", expand=True)

bold_button = tk.Button(root, text="Bold", command=apply_bold)
bold_button.pack(side="left", padx=5, pady=5)

italic_button = tk.Button(root, text="Italic", command=apply_italic)
italic_button.pack(side="left", padx=5, pady=5)

underline_button = tk.Button(root, text="Underline", command=apply_underline)
underline_button.pack(side="left", padx=5, pady=5)

menu_bar = tk.Menu(root)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Open", command=open_docx_file)
file_menu.add_command(label="Save", command=save_to_docx)
file_menu.add_command(label="Exit", command=root.destroy)
menu_bar.add_cascade(label="File", menu=file_menu)
root.config(menu=menu_bar)

# Add formatting tags
text_widget.tag_configure("bold", font=("Helvetica", 12, "bold"))
text_widget.tag_configure("italic", font=("Helvetica", 12, "italic"))
text_widget.tag_configure("underline", underline=True)
text_widget.tag_configure("font_size", font=("Helvetica", 12))

root.mainloop()


# Perfect formatting.  All sentences clump together into a single paragraph.
