"""
After considerable difficulty writting an .rtf file editor in Python 3.x,
this program is an attempt to use the .docx file format in place of .rtf.

Using Python's Tkinter and docx libraries, I've created a simple text widget
with a button to make selected text bold and an export button that saves the
text on the text widget as a .docx file that preserves the bold formatting
applied to the text.
"""

import tkinter as tk
from tkinter import filedialog
from docx import Document
from docx.shared import Pt

def open_docx_file():
    file_path = filedialog.askopenfilename(filetypes=[("Word files", "*.docx")])
    if file_path:
        document = Document(file_path)
        text_widget.delete("1.0", "end")
        for paragraph in document.paragraphs:
            text_widget.insert("end", paragraph.text + "\n")

def save_to_docx():
    file_path = filedialog.asksaveasfilename(defaultextension=".docx")
    if file_path:
        document = Document()

        # Get all content from the text widget in a single string
        content = text_widget.get("1.0", "end")

        # Create a new paragraph and track character index and previous tag
        current_paragraph = document.add_paragraph()
        char_index = "1.0"
        previous_tag = None

        while True:
            # Find the next non-whitespace character and its index
            next_index = text_widget.search(r"\S", char_index, stopindex="end", regexp=True)
            if not next_index:
                break

            # Get the word ending index and tags applied to the word
            word_end = text_widget.search(r"\s", next_index, stopindex="end", regexp=True)
            if not word_end:
                word_end = "end"
            tags = text_widget.tag_names(next_index)

            # Extract the word and create a run with appropriate formatting
            word = text_widget.get(next_index, word_end)
            run = current_paragraph.add_run(word)

            # Apply tags based on the current and previous tags
            for tag in tags:
                if tag == "bold" or tag == "italic" or tag == "underline":
                    # Apply or remove bold, italic, or underline based on tag presence
                    setattr(run, tag, tag in tags)
                elif tag == "font_size":
                    # Set font size if the tag is present
                    font_size = int(text_widget.tag_cget(tag, "font")[6:])
                    run.font.size = Pt(font_size)

            # Add a space after the word if not at the end of the paragraph
            if word_end != "end":
                run.add_text(" ")

            # Handle paragraph breaks and add blank lines as needed
            if "\n\n" in tags or (previous_tag == "bold" and tag != "bold"):
                # Add a blank line or create a new paragraph based on condition
                current_paragraph = document.add_paragraph()
                current_paragraph.space_after = Pt(12)  # Adjust spacing as needed
            elif word_end == "end" and "\n" in tags:
                # Add an empty line within the paragraph if needed
                run.add_text("\n")

            # Update character index and previous tag for next iteration
            char_index = word_end
            previous_tag = tags[0] if tags else None

        document.save(file_path)





def apply_bold():
    text_widget.tag_add("bold", "sel.first", "sel.last")

def apply_italic():
    text_widget.tag_add("italic", "sel.first", "sel.last")

def apply_underline():
    text_widget.tag_add("underline", "sel.first", "sel.last")

root = tk.Tk()
root.title("Docx Text Editor")

text_widget = tk.Text(root, wrap="word")
text_widget.pack(fill="both", expand=True)

bold_button = tk.Button(root, text="Bold", command=apply_bold)
bold_button.pack(side="left", padx=5, pady=5)

italic_button = tk.Button(root, text="Italic", command=apply_italic)
italic_button.pack(side="left", padx=5, pady=5)

underline_button = tk.Button(root, text="Underline", command=apply_underline)
underline_button.pack(side="left", padx=5, pady=5)

menu_bar = tk.Menu(root)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Open", command=open_docx_file)
file_menu.add_command(label="Save", command=save_to_docx)
file_menu.add_command(label="Exit", command=root.destroy)
menu_bar.add_cascade(label="File", menu=file_menu)
root.config(menu=menu_bar)

# Add formatting tags
text_widget.tag_configure("bold", font=("Helvetica", 12, "bold"))
text_widget.tag_configure("italic", font=("Helvetica", 12, "italic"))
text_widget.tag_configure("underline", underline=True)
text_widget.tag_configure("font_size", font=("Helvetica", 12))

root.mainloop()


# Proper spacing between paragraphs.  No formatting.



