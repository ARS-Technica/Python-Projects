"""
After considerable difficulty writting an .rtf file editor in Python 3.x,
this program is an attempt to use the .docx file format in place of .rtf.

Using Python's Tkinter and docx libraries, I've created a simple text widget
with a button to make selected text bold and an export button that saves the
text on the text widget as a .docx file that preserves the bold formatting
applied to the text.
"""

# added a toggle_newline() function that toggles the state of a Checkbutton widget. This check button allows users to control whether a new line appears between paragraphs.
# In the save_to_docx() function, I modified the logic to check the state of the add_newline_var variable. 
# If the checkbox is checked (add_newline_var.get() returns 1), a new line will be added between paragraphs. Otherwise, no new line will be added.

import tkinter as tk
from tkinter import filedialog
from docx import Document
from docx.shared import Pt

def save_to_docx():
    file_path = filedialog.asksaveasfilename(defaultextension=".docx")
    if file_path:
        document = Document()
        lines = text_widget.get("1.0", "end").split("\n")
        for i, line in enumerate(lines):
            p = document.add_paragraph()
            words = line.split()
            for j, word in enumerate(words):
                tags = text_widget.tag_names(f"1.{len(' '.join(lines[:i]))} wordstart")

                run = p.add_run(word)
                for tag in tags:
                    if tag == "bold":
                        run.bold = True
                    elif tag == "italic":
                        run.italic = True
                    elif tag == "underline":
                        run.underline = True
                    elif tag == "font_size":
                        font_size = int(text_widget.tag_cget("font_size", "font")[6:])
                        run.font.size = Pt(font_size)
                run.add_text(" ")

            if add_newline_var.get() == 1 or i == len(lines) - 1:
                document.add_paragraph()  # Add a new line between paragraphs if enabled or for the last line

        document.save(file_path)

def toggle_newline():
    if add_newline_var.get() == 1:
        add_newline_var.set(0)
    else:
        add_newline_var.set(1)

root = tk.Tk()
root.title("Docx Text Editor")

text_widget = tk.Text(root, wrap="word")
text_widget.pack(fill="both", expand=True)

bold_button = tk.Button(root, text="Bold", command=apply_bold)
bold_button.pack(side="left", padx=5, pady=5)

italic_button = tk.Button(root, text="Italic", command=apply_italic)
italic_button.pack(side="left", padx=5, pady=5)

underline_button = tk.Button(root, text="Underline", command=apply_underline)
underline_button.pack(side="left", padx=5, pady=5)

add_newline_var = tk.IntVar(value=1)
add_newline_checkbox = tk.Checkbutton(root, text="Add new line between paragraphs", variable=add_newline_var, command=toggle_newline)
add_newline_checkbox.pack(side="left", padx=5, pady=5)

menu_bar = tk.Menu(root)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Open", command=open_docx_file)
file_menu.add_command(label="Save", command=save_to_docx)
file_menu.add_command(label="Exit", command=root.destroy)
menu_bar.add_cascade(label="File", menu=file_menu)
root.config(menu=menu_bar)

# Add formatting tags
text_widget.tag_configure("bold", font=("Helvetica", 12, "bold"))
text_widget.tag_configure("italic", font=("Helvetica", 12, "italic"))
text_widget.tag_configure("underline", underline=True)
text_widget.tag_configure("font_size", font=("Helvetica", 12))

root.mainloop()

# Does NOT work
