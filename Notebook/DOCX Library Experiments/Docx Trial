"""
After considerable difficulty writting an .rtf file editor in Python 3.x,
this program is an attempt to use the .docx file format in place of .rtf.

Using Python's Tkinter and docx libraries, I've created a simple text widget
with a button to make selected text bold and an export button that saves the
text on the text widget as a .docx file that preserves the bold formatting
applied to the text.
"""

# The save_to_docx function now uses the show_new_line variable rather than a parameter to determine whether to include a new line between paragraphs.

import tkinter as tk
from tkinter import filedialog
from docx import Document
from docx.shared import Pt
from tkinter import messagebox

def save_to_docx():
    file_path = filedialog.asksaveasfilename(defaultextension=".docx")
    if file_path:
        document = Document()
        for line in text_widget.get("1.0", "end").split("\n"):
            p = document.add_paragraph(line.strip())  # Add paragraph with stripped text
            for word, tags in get_word_tags(line):  # Get word and associated tags
                run = p.add_run(word + " ")
                apply_formatting(run, tags)  # Apply formatting based on tags

            if show_new_line.get():  # Check if new line between paragraphs should be added
                document.add_paragraph("")  # Add a new line between paragraphs

        # Remove extra space before the first paragraph
        if not show_new_line.get():
            document.paragraphs[0].clear()

        document.save(file_path)

def get_word_tags(line):
    words = line.split()
    current_index = "1.0"
    for word in words:
        word_end = text_widget.search(r"\s", current_index, stopindex="end", regexp=True)
        if not word_end:
            word_end = "end"
        tags = text_widget.tag_names(current_index)
        yield word, tags
        current_index = word_end

def apply_formatting(run, tags):
    for tag in tags:
        if tag == "bold":
            run.bold = True
        elif tag == "italic":
            run.italic = True
        elif tag == "underline":
            run.underline = True
        elif tag == "font_size":
            font_size = int(text_widget.tag_cget("font_size", "font")[6:])
            run.font.size = Pt(font_size)

def toggle_new_line():
    show_new_line.set(not show_new_line.get())

root = tk.Tk()
root.title("Docx Text Editor")

text_widget = tk.Text(root, wrap="word")
text_widget.pack(fill="both", expand=True)

bold_button = tk.Button(root, text="Bold", command=lambda: text_widget.tag_add("bold", "sel.first", "sel.last"))
bold_button.pack(side="left", padx=5, pady=5)

italic_button = tk.Button(root, text="Italic", command=lambda: text_widget.tag_add("italic", "sel.first", "sel.last"))
italic_button.pack(side="left", padx=5, pady=5)

underline_button = tk.Button(root, text="Underline", command=lambda: text_widget.tag_add("underline", "sel.first", "sel.last"))
underline_button.pack(side="left", padx=5, pady=5)

show_new_line = tk.BooleanVar(value=True)
toggle_new_line_button = tk.Button(root, text="Toggle New Line", command=toggle_new_line)
toggle_new_line_button.pack(side="left", padx=5, pady=5)

menu_bar = tk.Menu(root)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Open", command=open_docx_file)
file_menu.add_command(label="Save", command=save_to_docx)
file_menu.add_command(label="Exit", command=root.destroy)
menu_bar.add_cascade(label="File", menu=file_menu)
root.config(menu=menu_bar)

# Add formatting tags
text_widget.tag_configure("bold", font=("Helvetica", 12, "bold"))
text_widget.tag_configure("italic", font=("Helvetica", 12, "italic"))
text_widget.tag_configure("underline", underline=True)
text_widget.tag_configure("font_size", font=("Helvetica", 12))

root.mainloop()


# Either waaay too much spacing between paragraphs or none.  Eliminates spacing between sentences.
