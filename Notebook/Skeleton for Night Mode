import os
import sys
from tkinter import *
from tkinter import filedialog
from tkinter import font
from tkinter import messagebox
from tkinter import colorchooser
import tkinter.ttk as ttk
import win32print
import win32api


def create_custom_text(window, linenumbers_canvas):
    global text

    text_editor_frame = Frame(window)
    
    text = Text(
        text_editor_frame,
        font=("Helvetica", 16),
        selectbackground="yellow",
        selectforeground="black",
        undo=True,
        padx=5,
        pady=5,
        wrap="none",
    )
    
    def proxy(*args):
        cmd = (text._orig,) + args
        result = text.tk.call(cmd)

        if (
            args[0] in ("insert", "replace", "delete")
            or args[0:3] == ("mark", "set", "insert")
            or args[0:2] == ("xview", "moveto")
            or args[0:2] == ("xview", "scroll")
            or args[0:2] == ("yview", "moveto")
            or args[0:2] == ("yview", "scroll")
        ):
            text.event_generate("<<Change>>", when="tail")

        return result

    text._orig = text._w + "_orig"
    text.tk.call("rename", text._w, text._orig)
    text.tk.createcommand(text._w, proxy)

    vertical_scrollbar = Scrollbar(
        text_editor_frame, orient="vertical", command=text.yview
    )
    text.configure(yscrollcommand=vertical_scrollbar.set)
    horizontal_scrollbar = Scrollbar(
        text_editor_frame, orient="horizontal", command=text.xview
    )
    text.configure(xscrollcommand=horizontal_scrollbar.set)

    text.grid(row=0, column=0, sticky="nsew")
    vertical_scrollbar.grid(row=0, column=1, sticky="ns")
    horizontal_scrollbar.grid(row=1, column=0, sticky="ew")

    text_editor_frame.grid_rowconfigure(0, weight=1)
    text_editor_frame.grid_columnconfigure(0, weight=1)

    text_editor_frame.grid(row=1, column=1, sticky="nsew", padx=2, pady=2)
    text_editor_frame.grid_rowconfigure(0, weight=1)  # Set row weight to 1 to allow vertical expansion
    text_editor_frame.grid_columnconfigure(0, weight=1)  # Set column weight to 1 to allow horizontal expansion

    # Configure grid weights for window and the text widget
    window.grid_rowconfigure(0, weight=0)
    window.grid_rowconfigure(1, weight=1)
    window.grid_columnconfigure(0, weight=0)
    window.grid_columnconfigure(1, weight=1)

    text.bind("<<Change>>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))
    text.bind("<<Modified>>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))
    text.bind("<Configure>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))

    return text

def create_search_bar(window):
    global search_bar
    global search_bar_checkbutton_var
    global search_label

    global search_bar_button_frame_left
    global search_bar_button_frame_right

    search_bar = Frame(window, bd=5, height=25, highlightthickness=0)
    search_bar.grid(row=3, column=1, sticky="ew", pady=5)
    search_bar.grid_remove()

    search_bar_button_frame_left = Frame(search_bar, bg=main_color)
    search_bar_button_frame_left.configure(bg=main_color)
    search_bar_button_frame_left.grid(row=0, column=0, padx=5, sticky="w")

    search_bar_button_frame_right = Frame(search_bar, bg=main_color)
    search_bar_button_frame_right.configure(bg=main_color)
    search_bar_button_frame_right.grid(row=0, column=1, padx=15, sticky="w")

    global search_entry

    search_label = Label(search_bar_button_frame_left, text="Search:", fg=text_color, bg=main_color)
    search_label.grid(row=0, column=0, padx=2, pady=2, sticky="w")

    search_entry = Entry(search_bar_button_frame_left)
    search_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")

    search_next_button = Button(search_bar_button_frame_left, text="Find Next", command=find_next)
    search_next_button.grid(row=0, column=2, padx=5, pady=5, sticky="w")

    # Search up the text widget from the bottom
    search_prev_button = Button(search_bar_button_frame_left, text="Find Prev", command=find_previous)
    search_prev_button.grid(row=0, column=3, padx=5, pady=5, sticky="w")

    clear_search_button = Button(search_bar_button_frame_left, text="Clear Search", command=clear_find_results)
    clear_search_button.grid(row=0, column=4, padx=2, pady=2, sticky="w")

    search_all_button = Button(search_bar_button_frame_right, text="Find All", command=find_all)
    search_all_button.grid(row=0, column=6, padx=2, pady=2, sticky="w")

    search_bar_button_frame_left.grid_columnconfigure(2, weight=1)
    search_bar_button_frame_right.grid_columnconfigure(0, weight=1)

    # Initializing the search_positions list and current_result_index variable
    search_positions = []
    current_result_index = -1

    # Place cursor in Search Entry text box when the Search becomes visible
    search_entry.focus_set()  # Set focus to search entry widget

# Create the Status Bar
def create_status_bar(window):
    is_status_bar_visible = True

    global status_bar
    status_bar = ttk.Frame(window)
    status_bar.grid(row=4, column=1, sticky="WE", pady=5)

    global status_bar_label
    status_bar_label = Label(status_bar, text=status_bar_message, fg=text_color, bg=main_color)
    status_bar_label.grid(row=0, column=0, padx=0, pady=0, sticky="w")
																				
def create_text_line_numbers(canvas, text, text_color):    
    def redraw(*args):													 
        canvas.delete("all")

        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            # Assign variables for the fill and outline color to use in Night Mode
            canvas.create_text(2, y, anchor="nw", text=linenum, fill=text_color)
            
            i = text_widget.index("%s+1line" % i)

    redraw()

    text.bind("<<Change>>", redraw)
    text.bind("<<Modified>>", redraw)
    text.bind("<Configure>", redraw)

    return redraw

status_bar_message = "Status Bar"

def toggle_status_bar():
    global is_status_bar_visible

    # If Search Bar is visible, set a variable 
    if search_bar.winfo_ismapped():
        is_status_bar_visible = True      # Make Status Bar visible when Search Bar is off    
    # If Search Bar is NOT visible
    else:
        if status_bar_checkbutton_var.get() == 1:
            status_bar.grid(row=2, column=0, columnspan=2, sticky=W)
            is_status_bar_visible = True
        else:
            status_bar.grid_remove()
            is_status_bar_visible = False

def toggle_search_bar(event=None):
    global is_status_bar_visible

    if search_bar.winfo_ismapped():
        search_bar.grid_remove()
        search_bar_checkbutton_var.set(0)
        if is_status_bar_visible:
            status_bar.grid(row=2, column=0, columnspan=2, sticky=W)
            status_bar_checkbutton_var.set(1)
    else:
        search_bar.grid(row=2, column=0, columnspan=2, sticky='w')
        search_bar_checkbutton_var.set(1)

        if is_status_bar_visible:
            status_bar.grid_remove()
            status_bar_checkbutton_var.set(0)

def update_status_bar_message(new_message):
    status_bar_message = new_message
    status_bar_label.config(text=status_bar_message)

search_positions = []

def find_all(): pass

def find_next(): pass

def find_previous(): pass

def next_result(): pass

def clear_find_results(event=None): pass
   
def fuzzy_find(): pass

def replace(): pass

def go_to_line(): pass

def hover(widget):
    widget.bind("<Enter>", func=lambda e: widget.config(bg="#202020", fg="white"))
    widget.bind("<Leave>", func=lambda e: widget.config(bg="#202020", fg="white"))


# Define color schemes as nested dictionaries
color_schemes = {    
    "Antique Ivory": {
        "main_color": "#FAEBD7",
        "second_color": "#FFE4B5",
        "selection_highlight": "#D2B48C",
        "text_color": "#333333",
    },
    "Arctic Breeze": {
        "main_color": "#87CEEB",
        "second_color": "#ADD8E6",
        "selection_highlight": "#B0E0E6",
        "text_color": "#333333",
    },
    "Autumn Leaves": {
        "main_color": "#683a03",
        "second_color": "#b56700",
        "selection_highlight": "#ea5f00",
        "text_color": "#fff3e1",
    },
    "Cherry Blossom": {
        "main_color": "#FF85A2",
        "second_color": "#FFC3A0",
        "selection_highlight": "#FF4D6D",
        "text_color": "#331F30",
    },
    "Citrus Burst": {
        "main_color": "#FFD700",
        "second_color": "#FF9900",
        "selection_highlight": "#FFA500",
        "text_color": "#333333",
    },
    "Cool Mint": {
        "main_color": "#4ae0c0",
        "second_color": "#80ffe0",
        "selection_highlight": "#2ee0c0",
        "text_color": "#1e1e1e",
    },
    "Crimson Velvet": {
        "main_color": "#8B0000",
        "second_color": "#B22222",
        "selection_highlight": "#CD5C5C",
        "text_color": "#F5F5F5",
    },
    "Dark Violet": {
        "main_color": "#1c0f1d",
        "second_color": "#2f1f3b",
        "selection_highlight": "#791e94",
        "text_color": "#ffffff",
    },
    "Deep Ocean": {
        "main_color": "#0e2846",
        "second_color": "#124f7b",
        "selection_highlight": "#00a8cc",
        "text_color": "#ffffff",
    },
    "Desert Mirage": {
        "main_color": "#C4975B",
        "second_color": "#F1D1A5",
        "selection_highlight": "#B57F4A",
        "text_color": "#3A1D0E",
    },
    "Dusty Rose": {
        "main_color": "#C08081",
        "second_color": "#D6A9A8",
        "selection_highlight": "#A97879",
        "text_color": "#333333",
    },
 
    "Electric Lime": {
        "main_color": "#66ff00",
        "second_color": "#a3ff00",
        "selection_highlight": "#4dff00",
        "text_color": "#000000",
    },
    "Emerald Isle": {
        "main_color": "#008148",
        "second_color": "#00A878",
        "selection_highlight": "#005D3D",
        "text_color": "#FFFFFF",
    },
    "Faded Denim": {
        "main_color": "#98AFC7",
        "second_color": "#B0C4DE",
        "selection_highlight": "#7A8B8B",
        "text_color": "#333333",
    },
    "Forest Green": {
        "main_color": "#0c2619",
        "second_color": "#115740",
        "selection_highlight": "#00b347",
        "text_color": "#ffffff",
    },
    "Gray Whisper": {
        "main_color": "#A9A9A9",
        "second_color": "#C0C0C0",
        "selection_highlight": "#D3D3D3",
        "text_color": "#333333",
    },
    "Golden Sand": {
        "main_color": "#b48c30",
        "second_color": "#ffc060",
        "selection_highlight": "#e4a736",
        "text_color": "#3c3636",
    },
    "Lavender Dreams": {
        "main_color": "#E6E6FA",
        "second_color": "#D8BFD8",
        "selection_highlight": "#9370DB",
        "text_color": "#333333",
    },
    "Lemon Zest": {
        "main_color": "#FFF44F",
        "second_color": "#FFF68F",
        "selection_highlight": "#FFEC40",
        "text_color": "#333333",
    },
 
    "Midnight Blue": {
        "main_color": "#03031b",
        "second_color": "#14146b",
        "selection_highlight": "#3b3bcf",
        "text_color": "#ffffff",
    },
    "Monokai": {
        "main_color": "#272822",
        "second_color": "#3e3d32",
        "selection_highlight": "#f92672",
        "text_color": "#f8f8f2",
    },
    "Mystic Forest": {
        "main_color": "#1A3A2A",
        "second_color": "#325D4A",
        "selection_highlight": "#78AFA1",
        "text_color": "#F0F0F0",
    },
    "Ocean": {
        "main_color": "#007BFF",
        "second_color": "#80C2FF",
        "selection_highlight": "#003EFF",
        "text_color": "white",
    },
    
    "Pastel": {
        "main_color": "#f9e0e3",
        "second_color": "#e5eaf1",
        "selection_highlight": "#fd9860",
        "text_color": "#3d3e43",
    }, 
    "Quiet Mist": {
        "main_color": "#D3DDE7",
        "second_color": "#E3EAF1",
        "selection_highlight": "#C2D7E1",
        "text_color": "#333333",
    },
    "Royal Blue": {
        "main_color": "#0A1172",
        "second_color": "#1839A9",
        "selection_highlight": "#6F6EC4",
        "text_color": "#FFFFFF",
    },
    "Rose Gold": {
        "main_color": "#cc7b63",
        "second_color": "#e8ad99",
        "selection_highlight": "#b66d4c",
        "text_color": "#230c0f",
    },
    "Royal Purple": {
        "main_color": "#2c0f4c",
        "second_color": "#5d2b78",
        "selection_highlight": "#a756b8",
        "text_color": "#ffffff",
    },
    "Rustic Charm": {
        "main_color": "#8B4513",
        "second_color": "#CD853F",
        "selection_highlight": "#A0522D",
        "text_color": "#F5F5F5",
    },
    "Slate Gray": {
        "main_color": "#708090",
        "second_color": "#778899",
        "selection_highlight": "#A9A9A9",
        "text_color": "#FFFFFF",
    },
    "Soft Coral": {
        "main_color": "#ff6f61",
        "second_color": "#ffb6b0",
        "selection_highlight": "#ff8b80",
        "text_color": "#3c3636",
    },
    "Soft Lavender": {
        "main_color": "#C9A0DC",
        "second_color": "#E6E6FA",
        "selection_highlight": "#B894C6",
        "text_color": "#333333",
    },
    "Solarized Light": {
        "main_color": "#fdf6e3",
        "second_color": "#eee8d5",
        "selection_highlight": "#268bd2",
        "text_color": "#657b83",
    },
    "Sunny Day": {
        "main_color": "#FACB15",
        "second_color": "#FFF5A7",
        "selection_highlight": "#FF8200",
        "text_color": "#333333",
    },
    "Sunset": {
        "main_color": "#FF6B35",
        "second_color": "#FFABAB",
        "selection_highlight": "#FF4D00",
        "text_color": "white",
    },
    
    "Taupe Elegance": {
        "main_color": "#483C32",
        "second_color": "#635B53",
        "selection_highlight": "#7C746C",
        "text_color": "#F5F5F5",
    },
    "Teal Twist": {
        "main_color": "#008080",
        "second_color": "#20B2AA",
        "selection_highlight": "#00CED1",
        "text_color": "#FFFFFF",
    },
    "Vintage Rose": {
        "main_color": "#8b475d",
        "second_color": "#c77b95",
        "selection_highlight": "#d25f80",
        "text_color": "#f1f0eb",
    },
    "Default": {
        "main_color": "SystemButtonFace",
        "second_color": "White", #"SystemButtonFace"
        "selection_highlight": "#999999",
        "text_color": "black",
    },
    "Night Mode": {
        "main_color": "#000000",
        "second_color": "#373737",
        "selection_highlight": "dark green",
        "text_color": "green",
    },
}

# --------------- New Scheme Toggle Functions from Demo Color Selector X --------------- #
 
# Add this variable to track the active color scheme
active_color_scheme = None

# Create BooleanVar variables for checkbuttons
checkbutton_vars = {}

def checkbutton_selected(scheme_name):
    """
    Function to allow custom color schemes to be both activated and deactivated
    using their checkbuttons. Additionally, ensure that when 'Choose Custom Palette'
    is deactivated, it reverts to the Default color scheme, and only one color 
    scheme's checkbutton is active at a time in the Options Menu."
    """
    global active_color_scheme, custom_color

    # Get the current state of the "Choose Custom Palette" checkbutton
    custom_palette_active = custom_palette_var.get()

    if scheme_name == "Choose Custom Palette":
        if custom_palette_active:
            # Activate custom palette
            set_custom_color()
            active_color_scheme = None  # Deactivate any active color scheme
        else:
            # Deactivate custom palette, revert to active color scheme or default
            custom_color = None
            if active_color_scheme is not None:
                scheme_name = active_color_scheme
            else:
                scheme_name = "Default"  # You can set a default color scheme here

    # Handle custom color scheme selection
    if scheme_name != "Choose Custom Palette":
        var = checkbutton_vars[scheme_name]
        if var.get():
            if active_color_scheme != scheme_name:
                # Activate the selected color scheme, deactivate others
                custom_palette_var.set(False)  # Deactivate "Choose Custom Palette"
                active_color_scheme = scheme_name

                # Set the color scheme
                main_color = color_schemes[scheme_name]["main_color"]
                second_color = color_schemes[scheme_name]["second_color"]
                selection_highlight = color_schemes[scheme_name]["selection_highlight"]
                text_color = color_schemes[scheme_name]["text_color"]

                # Update the colors of GUI elements
                window.config(bg=main_color)
                toolbar_frame.config(bg=main_color)
                linenumbers_canvas.config(bg=main_color, selectforeground=text_color)
                
                # Update the status bar message
                status_bar_label.config(text=f"{scheme_name} color scheme activated       ")                
                # Schedule a task to reset the status bar message after 5 seconds (5000 milliseconds)
                window.after(5000, lambda: status_bar_label.config(text="Ready       "))

                if custom_palette_active:
                    # If custom palette is active, use custom color
                    text.config(bg=custom_color, insertbackground=text_color, selectforeground=selection_highlight)
                else:
                    text.config(bg=second_color, insertbackground=text_color, selectforeground=selection_highlight)

                status_bar_label.config(bg=main_color, fg=text_color)
                search_bar.config(bg=main_color)
                search_bar_button_frame_left.config(bg=main_color)
                search_bar_button_frame_right.config(bg=main_color)
                search_label.config(bg=main_color, fg=text_color)

                if custom_palette_active:
                    search_entry.config(bg=custom_color)
                else:
                    search_entry.config(bg=second_color)

                create_text_line_numbers(linenumbers_canvas, text, text_color)

        else:
            # Deactivate the selected color scheme, clear its checkbutton
            active_color_scheme = None
            var.set(False)

    # Deactivate checkbuttons of other color schemes
    for name, var in checkbutton_vars.items():
        if name != "Choose Custom Palette" and name != scheme_name:
            var.set(False)

    # If no color scheme is selected, revert to Default color scheme
    if active_color_scheme is None:
        scheme_name = "Default"
        main_color = color_schemes[scheme_name]["main_color"]
        second_color = color_schemes[scheme_name]["second_color"]
        selection_highlight = color_schemes[scheme_name]["selection_highlight"]
        text_color = color_schemes[scheme_name]["text_color"]

        window.config(bg=main_color)
        toolbar_frame.config(bg=main_color)
        linenumbers_canvas.config(bg=main_color, selectforeground=text_color)

        if custom_palette_active:
            text.config(bg=custom_color, insertbackground=text_color, selectforeground=selection_highlight)
        else:
            text.config(bg=second_color, insertbackground=text_color, selectforeground=selection_highlight)

        status_bar_label.config(bg=main_color, fg=text_color)
        search_bar.config(bg=main_color)
        search_bar_button_frame_left.config(bg=main_color)
        search_bar_button_frame_right.config(bg=main_color)
        search_label.config(bg=main_color, fg=text_color)

        if custom_palette_active:
            search_entry.config(bg=custom_color)
        else:
            search_entry.config(bg=second_color)

        create_text_line_numbers(linenumbers_canvas, text, text_color)

    # Update the "Choose Custom Palette" checkbutton to reflect its state
    custom_palette_var.set(custom_palette_active)

# Update the update_text_widget_color function
def update_text_widget_color():
    active_scheme_names = [name for name, var in checkbutton_vars.items() if var.get()]

    if custom_color:
        text_widget.config(bg=custom_color)
    #elif dark_mode_var.get():
    elif night_mode_var.get():
        text_widget.config(bg=color_schemes["Night Mode"]["second_color"])
    elif not active_scheme_names:
        text_widget.config(bg=color_schemes["Default"]["second_color"])
    else:
        active_color = None
        for name in active_scheme_names:
            if name in color_schemes:
                active_color = color_schemes[name]["second_color"]
                break

        if active_color:
            text_widget.config(bg=active_color)
        else:
            text_widget.config(bg=default_color_scheme["Default"]["second_color"])

custom_color = None

def choose_custom_palette(*args):
    global custom_color

    if custom_palette_var.get():
        chosen_color = colorchooser.askcolor(title="Choose Custom Palette")[1]

        if chosen_color:
            custom_color = chosen_color
            text.config(bg=custom_color)  # Change the background color to the custom color
            
        else:
            custom_color = None
    else:
        custom_color = None
        update_text_widget_color()  # Restore the appropriate background color
           
# --------------- End Scheme Toggle Functions from Demo Color Selector X --------------- #

highlight_enabled = False

def toggle_line_highlighting():
    if highlighting.get() == True:
        def highlight_current_line(interval=100):
            text.tag_remove("current_line", 1.0, "end")
            text.tag_add("current_line", "insert linestart", "insert lineend+1c")
            text.after(interval, highlight_current_line)      
        highlight_current_line()
        text.tag_configure("current_line", background="#e9e9e9", selectbackground="#999999") 

    else:
        global highlight_enabled
        highlight_enabled = False
        
        text.tag_remove("current_line", 1.0, "end")
        text.tag_configure("current_line", background="white", selectbackground="yellow")
        text.tag_add("current_line", 1.0, "end")        
   
def toggle_linenumbers():
    if linenumbers_button_var.get():
        linenumbers_canvas.grid(row=1, column=0, sticky="NS")
        window.grid_rowconfigure(0, weight=0, minsize=0)
        window.grid_rowconfigure(1, weight=1, minsize=0)
    else:
        linenumbers_canvas.grid_forget()         

def word_wrap():
    if word_wrap_checkbutton_var.get() == 1:
        text.config(wrap="word")
        #status_bar_label.config(text="Word Wrap On       ")
        update_status_bar_message(new_message="Word Wrap On     ")
    else:
        text.config(wrap="none")
        #status_bar_label.config(text="Word Wrap Off      ")
        update_status_bar_message(new_message="Word Wrap Off     ")
   
def create_menu(window):
    # Create a drop-down menu
    menu_bar = Menu(window)
    window.config(menu=menu_bar)

    # Create "Files" heading in the menu barmenu_bar
    file_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="File", menu=file_menu)
    
    # Create "Messages" heading in the menu_bar
    messages_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="Messages", menu=messages_menu)

    # Create three items in the messages menu
    messages_menu.add_command(label="Item 1", command=lambda: status_bar_label.config(text="Item 1"))
    messages_menu.add_command(label="Item 2", command=lambda: status_bar_label.config(text="Item 2"))
    messages_menu.add_command(label="Item 3", command=lambda: status_bar_label.config(text="Item 3"))

    # Create "Options" menu
    options_menu = Menu(menu_bar, tearoff=0)
    menu_bar.add_cascade(label="Options", menu=options_menu)
 
    # Create a BooleanVar for the 'Night Mode' 
    global night_mode_var  
    night_mode_var = BooleanVar()
    checkbutton_vars["Night Mode"] = night_mode_var
    
    # Add a checkbutton for "Night Mode" color scheme in the Options menu
    options_menu.add_checkbutton(
        label="Night Mode",
        variable=checkbutton_vars["Night Mode"],
        command=lambda: checkbutton_selected("Night Mode"))
  
    # Create a BooleanVar for the "Night Mode" checkbutton
    default_mode_var = BooleanVar(value=True)
    checkbutton_vars["Default"] = default_mode_var
    
    # Add a checkbutton for "Night Mode" color scheme in the Options menu
    options_menu.add_checkbutton(
        label="Default Color Scheme",
        variable=checkbutton_vars["Default"],
        onvalue=True, 
        offvalue=False,
        command=lambda: checkbutton_selected("Default"))

    # Create a submenu for Color Schemes
    color_scheme_submenu = Menu(options_menu, tearoff=False)

    # Add the submenu to the Options Menu
    options_menu.add_cascade(label="Color Schemes", menu=color_scheme_submenu)

    # Toggles each individual color scheme on or off 
    # Create Color Scheme checkbuttons in a submenu of the Options menu
    for scheme_name in color_schemes:
        if scheme_name != "Default" and scheme_name != "Night Mode":
            var = BooleanVar()
            checkbutton_vars[scheme_name] = var     #MUST be inside for loop
            color_scheme_submenu.add_checkbutton(
                label=scheme_name,
                variable=var,
                command=lambda name=scheme_name: checkbutton_selected(name))

    # Change the background color of the Text Widget 
    global custom_palette_var
    custom_palette_var = BooleanVar()
    
    # Add an entry for "Choose Custom Palette" to the Options men
    options_menu.add_checkbutton(label="Choose Custom Palette",
        variable=custom_palette_var, 
        command=lambda: choose_custom_palette() if custom_palette_var.get() else choose_custom_palette(None))

    options_menu.add_separator()

    # Toggle line highlighting on and off
    global highlighting
    highlighting = BooleanVar()
    
    # Add a checkbutton for "Line Highlighting" in the Options menu
    options_menu.add_checkbutton(
        label="Line Highlighting", 
        variable=highlighting,
        onvalue=True, 
        offvalue=False, 
        command=toggle_line_highlighting)
    
    # Toggle line numbering on and off
    global linenumbers_button_var
    linenumbers_button_var = BooleanVar(value=True)

    # Add a checkbutton for "Show Line Numbers" in the Options menu
    options_menu.add_checkbutton(
        label="Show Line Numbers",
        variable=linenumbers_button_var,
        onvalue=True,
        offvalue=False,
        command=toggle_linenumbers)   

    # Toggle Status Bar on and off
    global status_bar_checkbutton_var
    # Create variables for check buttons
    status_bar_checkbutton_var = IntVar()

    # Create check button for the Status Bar in the Options menu
    status_bar_checkbutton_var.set(1)  # Set default value to 1 (on)
    status_bar_checkbutton = options_menu.add_checkbutton(
        label="Status Bar", 
        variable=status_bar_checkbutton_var, 
        command=toggle_status_bar)

    # Toggle Word Wrap on and off
    global word_wrap_checkbutton_var
    #wrap = BooleanVar(value=False)  # Word Wrap is deactivated by default
    word_wrap_checkbutton_var = IntVar()
    word_wrap_checkbutton_var.set(0)
    
    # Create check button for Word Wrap in the Options menu
    options_menu.add_checkbutton(
        label="Word Wrap",
        variable=word_wrap_checkbutton_var,
        command=word_wrap)

    # Create "Search" heading in the menu_bar
    search_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="Search", menu=search_menu)

    # Toggle Search Back on and off
    global search_bar_checkbutton_var 
    search_bar_checkbutton_var = IntVar()
    search_bar_checkbutton_var.set(0)
    
    # Create check button for search bar in the Search menu    
    search_bar_checkbutton = search_menu.add_checkbutton(
        label="Search bar", 
        variable=search_bar_checkbutton_var, 
        command=toggle_search_bar)

def create_style():
    # Create a style for the themed widgets
    style = ttk.Style()
    
    # Configure style for the "TButton" widget
    style.configure("Custom.TButton", foreground="black", font=("Helvetica", 12))
    
    # Configure style for the "CustomStatus.TLabel" widget (status bar)
    style.configure("CustomStatus.TLabel", foreground="black", font=("Helvetica", 12))
    
    # Configure style for the "Custom.TFrame" widget (button_frame and window)
    style.configure("Custom.TFrame", background="gray")

def create_toolbar(window):
    global toolbar_frame
    toolbar_frame = Frame(window, bd=5, highlightthickness=0)

    # Create a custom style font
    custom_font = ("Helvetica", 12)

    bold_button = Button(toolbar_frame, text="Bold", font=custom_font, fg="black")
    bold_button.grid(row=0, column=0, padx=2, pady=0)

    italic_button = Button(toolbar_frame, text="Italic", font=custom_font, fg="black")
    italic_button.grid(row=0, column=1, padx=2, pady=0)

    underline_button = Button(toolbar_frame, text="Underline", font=custom_font, fg="black")
    underline_button.grid(row=0, column=2, padx=2, pady=0)

    toolbar_frame.grid(row=0, column=0, columnspan=2, sticky="nw")
    toolbar_frame.config(padx=0, pady=0)
 
def create_bindings(window):
    # Clear search results with clear_find_results upon entering new text in widget
    search_entry.bind("<KeyRelease>", clear_find_results)
    # Keyboard shortcuts to Search without pressing a button
    search_entry.bind("<KeyRelease-Return>", lambda event: find_all())
    # Keyboard shortcut to clear Search Results
    search_entry.bind("<Escape>", clear_find_results)
    # Keyboard shortcut to close Search Bar 
    search_entry.bind("<KeyRelease-Escape>", toggle_search_bar)
    
    window.bind('<Control-F>', lambda event: toggle_search_bar())
    window.bind('<Control-f>', lambda event: toggle_search_bar()) 
    window.bind('<F3>', find_next)
    
def create_window():
    global linenumbers_canvas, text_widget, window

    # Create main window
    window = Tk()
    window.title("Text Editor")
    window.geometry("1200x690")
    window.resizable(True,True)

    window.grid_columnconfigure(1, weight=1)
    window.grid_rowconfigure(0, weight=0, minsize=0)
    window.grid_rowconfigure(1, weight=1, minsize=0)

    # Create line numbers canvas
    linenumbers_canvas = Canvas(window, width=40, highlightthickness=0)   
																									   
    linenumbers_canvas.grid(row=1, column=0, sticky="NS")
    window.grid_rowconfigure(1, minsize=linenumbers_canvas.winfo_reqheight())    

    linenumbers_canvas.grid_propagate(False)
    linenumbers_canvas.configure(width=30)
    
    # Create text widget
    text_widget = create_custom_text(window, linenumbers_canvas)   
    text_widget.insert("end", "Type some text here...")

    # Test text for the purposes of debugging
    text.insert("end", "one\ntwo\nthree\n")
    text.insert("end", "four\n", ("bigfont",))
    text.insert("end", "five\nsecond two\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
    text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthree two")
    text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfour two")
    text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfive two")
    text.tag_configure("bigfont", font=("Helvetica", "24", "bold")) 

    # Create the search bar
    create_search_bar(window)

    # Create the status bar
    create_status_bar(window)

    # Create the drop-down menu
    create_menu(window)
    
    create_toolbar(window) 

    # Call toggle_linenumbers() with the linenumbers_canvas as an argument
    toggle_linenumbers()

    # Create the status bar by default
    toggle_status_bar()

    create_bindings(window)

    # Start the main event loop
    window.mainloop()

if __name__ == "__main__":
    create_window()

