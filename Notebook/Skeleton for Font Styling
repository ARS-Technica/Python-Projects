"""
Having abandoned my attempt to create a Wordpad clone due to a lack of updated
.rtf libraries for Python 3.x, I now need to rethink how I will be styling the
text in my Tkinter text widget in such a way that it can still be easily converted
to a .docx file format with a straightforward function.  This code is my testbed
for creating that code without metaphorcially ripping up the floorboards on my 
current Notepad project.
"""

# This code is a fork of Text-Editor by Singamandeep
# https://github.com/singamandeep/Text-Editor
# I'm only interested in how he wrote the font tool bar


# REBOOT from Demo: Dual ComboBoxes


import tkinter as tk
from tkinter import filedialog
from tkinter import font
from tkinter import ttk

# Set default font
global default_family
default_family = "Arial"
global default_size
default_size = 12

# Initialize font_counter
global font_counter
font_counter = 0


# FORMAT BAR METHODS
def update_font(event=None):	   
    selected_font = font.Font(family=font_family_combo.get(), size=int(font_size_combo.get()))
    text.tag_configure("custom_font_{}".format(font_counter), font=selected_font)
    apply_font_style()

def apply_font_style(event=None):
    global font_counter

    # Check if any text is selected
    if text.tag_ranges("sel"):
        start = text.index("sel.first")
        end = text.index("sel.last")
        
        # Apply font styling to the selected text
        text.tag_add("custom_font_{}".format(font_counter), start, end)

        # Increment font_counter for next font style
        font_counter += 1

    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")      

def update_comboboxes(event):
    # Get the index of the clicked position    
    cursor_position = text.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position    
    tags = text.tag_names(cursor_position)
    
    # Check if the font attribute is not empty and contains the font family
    if tags:
        # Iterate through tags to find the font attributes
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text.tag_cget(tag, "font")

                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]

                font_family_combo.set(family)
                font_size_combo.set(size)

    else:
        # Set the font and size comboboxes to display the default font and size
        font_family_combo.set(default_family)
        font_size_combo.set(default_size)



# CREATE MAIN WINDOW
root = tk.Tk()
root.title("Font Selector")

  
# FORMATTING BAR
formattingbar = tk.Frame(root, padx=2, pady=2)

				  											 
# Get all font families
font_families = list(font.families())

# FORMATTING BAR COMBOBOX - FOR FONT AND SIZE
# Create a combo box for font selection
#font_family_label = ttk.Label(root, text="Font Family:")
#font_family_label.pack(side="left") 
font_family_combo = ttk.Combobox(formattingbar, values=font_families)
font_family_combo.pack(side="left", padx=4, pady=4)

if default_family in font_families:  # Check that the default font is installed
    font_family_combo.set(default_family)
else:
    font_family_combo.set(font_families[0])  # Set the first available font as default


# Create a combo box for font size selection
#font_size_label = ttk.Label(root, text="Font Size:")
#font_size_label.pack(side="left")
font_size_combo = ttk.Combobox(formattingbar, values=list(range(8, 72)))
font_size_combo.pack(side="left", padx=4, pady=4)
font_size_combo.set(default_size)


# FORMATBAR BUTTONS
#bold 
bold_button = tk.Button(name="formatbar_b1", borderwidth=1, command=bold, width=20, height=20, pady=10, padx=10)
photo_bold = Image.open("C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/bold.png")
photo_bold = photo_bold.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS) 
image_bold = ImageTk.PhotoImage(photo_bold)
bold_button.config(image=image_bold)
bold_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# italic		
italic_button = tk.Button(name="formatbar_b2", borderwidth=1, command=italic, width=20, height=20)
photo_italic = Image.open("C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/italic.png")
photo_italic = photo_italic.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_italic = ImageTk.PhotoImage(photo_italic)
italic_button.config(image=image_italic)
italic_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# underline		   
underline_button = tk.Button(name="formatbar_b3", borderwidth=1, command=underline, width=20, height=20)
photo_underline = Image.open("C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/underline.png")
photo_underline = photo_underline.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_underline = ImageTk.PhotoImage(photo_underline)
underline_button.config(image=image_underline)
underline_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# strike		
strike_button = tk.Button(name="formatbar_b4", borderwidth=1, command=strike, width=20, height=20)
photo_strike = Image.open("C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/strike.png")
photo_strike = photo_strike.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_strike = ImageTk.PhotoImage(photo_strike)
strike_button.config(image=image_strike)
strike_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# font_color			
font_color_button = tk.Button(name="formatbar_b5", borderwidth=1, command=change_color, width=20, height=20)
photo_font_color = Image.open("C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/font-color.png")
photo_font_color = photo_font_color.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_font_color = ImageTk.PhotoImage(photo_font_color)
font_color_button.config(image=image_font_color)
font_color_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# highlight
highlight_button = tk.Button(name="formatbar_b6", borderwidth=1, command=highlight, width=20, height=20)
photo_highlight = Image.open("C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/highlight.png")
photo_highlight = photo_highlight.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_highlight = ImageTk.PhotoImage(photo_highlight)
highlight_button.config(image=image_highlight)
highlight_button.pack(in_=formattingbar, side="left", padx=4, pady=4)



# CREATING TEXT AREA - FIRST CREATED A FRAME AND THEN APPLIED TEXT OBJECT TO IT.
# Create a text widget to display font changes
text_frame = tk.Frame(root, borderwidth=1, padx=2, relief="sunken")
text = tk.Text(wrap="word", font=(default_family, default_size), background="white", borderwidth=0, highlightthickness=0 , undo= True)
text.focus_set()
text.pack(in_=text_frame, side="left", fill="both", expand=True) # pack text object.


# Text for Debugging
text.insert("end", "This first sentence tests the bold formatting feature.\n")
text.insert("end", "\n")
text.insert("end", "This second sentence tests the italics formatting feature.\n")
text.insert("end", "\n")
text.insert("end", "This third sentence demonstrates the ability to underline words.\n")
text.insert("end", "\n")


# STATUS BAR			
status = tk.Label(root, text="", bd=1, relief=tk.SUNKEN, anchor=tk.W)


# PACK TOOLBAR, FORMATBAR, STATUSBAR AND TEXT FRAME.													
formattingbar.pack(side="top", fill="x")
status.pack(side="bottom", fill="x")
text_frame.pack(side="bottom", fill="both", expand=True)
text.focus_set()



# Bind events to update the font
font_family_combo.bind("<<ComboboxSelected>>", update_font)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

# Bind event to apply font style when text is selected
text.bind("<Button-1>", update_comboboxes)

# Mainloop of the Program
root.mainloop()

