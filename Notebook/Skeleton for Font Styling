"""
Having abandoned my attempt to create a Wordpad clone due to a lack of updated
.rtf libraries for Python 3.x, I now need to rethink how I will be styling the
text in my Tkinter text widget in such a way that it can still be easily converted
to a .docx file format with a straightforward function.  This code is my testbed
for creating that code without metaphorcially ripping up the floorboards on my 
current Notepad project.
"""

# This code is a fork of Text-Editor by Singamandeep
# https://github.com/singamandeep/Text-Editor
# I'm only interested in how he wrote the font tool bar


from PIL import Image, ImageTk # For buttons on Toolbar
import tkinter as tk
from tkinter import font
from tkinter import colorchooser
from tkinter import ttk


# Set default font
global default_font
default_font = "Arial"
global default_size
default_size = 12

current_font_family = default_font
current_font_size = default_size
fontColor ='#000000'
fontBackground= '#FFFFFF'

global current_tags
current_tags = []
"""global last_selection
last_selection = None"""
global style_counter  # Serialize the Styles of Font to Create Unique Tags
style_counter = 0

				
# MAIN MENU METHODS 

# FORMAT BAR METHODS

# COMBOBOX METHODS

def apply_font_style(event=None):
    global current_font_family
    global current_font_size    
    global style_counter
    global last_selection

    # Check if any text is selected
    if text.tag_ranges("sel"):
        start = text.index("sel.first")
        end = text.index("sel.last")
        
        # Get the tags applied to the selected text
        current_tags = text.tag_names("sel.first")

        """
        # Remove fontColor and fontBackground from current_tags															   
        for tag in ["font_color_change", "background_color_change"]:
            if tag in current_tags:
                current_tags.remove(tag)
        """

        # Determine font weight, slant, underline, and overstrike																 
        weight = "bold" if "bold" in current_tags else "normal"
        slant = "italic" if "italic" in current_tags else "roman"
        underline = 1 if "underline" in current_tags else 0
        overstrike = 1 if "overstrike" in current_tags else 0

        # Generate a unique tag for the selected text
        tag_name = "custom_font_{}".format(style_counter)

        # Increment style_counter for next font style
        style_counter += 1        
        
        # Apply font styling to the selected text
        text.tag_add(tag_name, start, end)

        # Configure the tag with the desired font and style attributes
        text.tag_configure(tag_name, font=(current_font_family, current_font_size, weight, slant),
                           underline=underline, overstrike=overstrike,
                           foreground=fontColor, background=fontBackground)

        """
        # Check if the user is highlighting a new passage of text																 
        current_selection = text.tag_ranges("sel")

        if current_selection != last_selection:
            # Remove previous formatting tags from the selected range
            for tag in current_tags:
                if tag != "sel":  # Skip the "sel" tag
                    text.tag_remove(tag, start, end)
            last_selection = current_selection
        """

    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")


def update_comboboxes(event):
    # Get the index of the clicked position    
    cursor_position = text.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position    
    tags = text.tag_names(cursor_position)
    
    # Check if the font attribute is not empty and contains the font family
    if tags:
        # Iterate through tags to find the font attributes
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text.tag_cget(tag, "font")

                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]

                font_family_combo.set(family)
                font_size_combo.set(size)

    else:
        # Set the font and size comboboxes to display the default font and size
        font_family_combo.set(default_font)
        font_size_combo.set(default_size)


def update_font(event=None):
    global current_font_family
    global current_font_size
    global style_counter

    selected_font = font.Font(family=font_family_combo.get(), size=int(font_size_combo.get()))
    text.tag_configure("custom_font_{}".format(style_counter), font=selected_font)
    
    # Get the selected font family and size
    current_font_family = font_family_combo.get()
    current_font_size = font_size_combo.get()

    # Apply font styling to the selected text
    apply_font_style()


# BUTTON METHODS
# Bold Text bold_it()
def bold(event=None):        
    # Check if any text is selected, otherwise app throws an error
    if text.tag_ranges("sel"):
        # Define Current tags        
        # current_tags = text.tag_names("sel.first")
        current_tags = list(text.tag_names())

        # Check to see if tag has already been set
        if "bold" in current_tags:
            # If characters are bold, unbold the range  
            text.tag_delete("bold", "sel.first", "sel.last")
        else:
            # Bold the whole selection
            text.tag_add("bold", "sel.first", "sel.last")
    
        # make_tag() # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Italics Text italics_it()
def italic(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text.tag_ranges("sel"):
        # Define Current tags
        # current_tags = text.tag_names("sel.first")
        current_tags = list(text.tag_names())

        # Check to see if tag has already been set
        if "italic" in current_tags:
            # If characters are italicized, unitalicize the selected text
            text.tag_add("roman", "sel.first", "sel.last")
            text.tag_delete("italic", "sel.first", "sel.last")
        else:
            # Italicize the whole selection
            text.tag_add("italic", "sel.first", "sel.last")
    
        # make_tag() # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")
        
# Underline Text underline_it():
def underline(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text.tag_ranges("sel"):
        # Define Current tags
        # current_tags = text.tag_names("sel.first")
        current_tags = list(text.tag_names())

        # Check to see if tag has already been set
        if "underline" in current_tags:
            # If characters are underlined, remove underlining from the selected text
            text.tag_delete("underline", "sel.first", "sel.last")
        else:
            # Underline the whole selection
            text.tag_add("underline", "sel.first", "sel.last")

        # make_tag() # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Strike Text strike_it()
def strike():
    # Check if any text is selected, otherwise app throws an error
    if text.tag_ranges("sel"):
        # Define Current tags
        # current_tags = text.tag_names("sel.first")									
        current_tags = list(text.tag_names())

        # Check to see if tag has already been set												  
        if "overstrike" in current_tags:
            # If characters are striked, remove striking from the selected text
            text.tag_delete("overstrike", "sel.first", "sel.last")	
        else:
            # Strike the whole selection
            text.tag_add("overstrike", "sel.first", "sel.last")
    
        # make_tag() # Compile stle characteristics under a single tag name
        apply_font_style()    
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Change Font Color from Default
def change_color(): #fontColor 
    # Ask the user to choose a font color
    color = colorchooser.askcolor(initialcolor='#000000')
    color_name = color[1]

    # Check if any text is selected
    if text.tag_ranges("sel"):
        # Remove previous font color tags from the selected range
        for tag in text.tag_names("sel.first"):
            if tag.startswith("font_color"):
                text.tag_remove(tag, "sel.first", "sel.last")

        if color_name:  # Prevents error in case color selection is canceled
            # Apply font color tag to the selected text
            font_color_tag = "font_color_" + color_name
            text.tag_add(font_color_tag, "sel.first", "sel.last")
    
            # Configure the font color tag
            text.tag_configure(font_color_tag, foreground=color_name)
    else:
		# Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Highlight Text
def highlight(): #fontBackground
    # Ask the user to choose a background color
    color = colorchooser.askcolor(initialcolor='#FFFFFF')
    color_rgb = color[1]

    # Check if any text is selected
    if text.tag_ranges("sel"):
        # Remove previous background color tags from the selected range
        for tag in text.tag_names("sel.first"):
            if tag.startswith("background_color"):
                text.tag_remove(tag, "sel.first", "sel.last")

        if color_rgb:  # Prevents error in case color selection is canceled
            # Apply background color tag to the selected text 
            background_color_tag = "background_color_" + color_rgb
            text.tag_add(background_color_tag, "sel.first", "sel.last")
    
            # Configure the background color tag
            text.tag_configure(background_color_tag, background=color_rgb)
    else:
        # Alert the user that no text has been selected  
        tk.messagebox.showinfo("alert", "No text has been selected")

# To make align functions work properly
def remove_align_tags():
	all_tags = text.tag_names(index=None)
	if "center" in all_tags:
		text.tag_remove("center", 1.0, tk.END)
	if "left" in all_tags:
		text.tag_remove("left", 1.0, tk.END)
	if "right" in all_tags:
		text.tag_remove("right", 1.0, tk.END)

def align_center(event=None):
	remove_align_tags()
	text.tag_configure("center", justify='center')
	text.tag_add("center", 1.0, tk.END)

def align_justify():
	remove_align_tags()

def align_left(event=None):
	remove_align_tags()
	text.tag_configure("left", justify='left')
	text.tag_add("left", 1.0, tk.END)
			 
def align_right(event=None):
	remove_align_tags()
	text.tag_configure("right", justify='right')
	text.tag_add("right", 1.0, tk.END)



# CREATE THE MAIN WINDOW
root = tk.Tk()
root.title("Font Selector")


# CREATING TEXT AREA - FIRST CREATED A FRAME AND THEN APPLIED TEXT OBJECT TO IT.
# Create a text widget to display font changes
text_frame = tk.Frame(root, borderwidth=1, padx=2, relief="sunken")
text = tk.Text(wrap="word", font=(default_font, default_size), background=fontBackground, borderwidth=0, highlightthickness=0 , undo= True)
text.focus_set()
text.pack(in_=text_frame, side="left", fill="both", expand=True) # pack text object.


# Text for Debugging
text.insert("end", "This first sentence tests the bold formatting feature.\n")
text.insert("end", "\n")
text.insert("end", "This second sentence tests the italics formatting feature.\n")
text.insert("end", "\n")
text.insert("end", "This third sentence demonstrates the ability to underline words.\n")
text.insert("end", "\n")


# PACK TOOLBAR, FORMATBAR, STATUSBAR AND TEXT FRAME.
formattingbar = tk.Frame(root, padx=2, pady=2)
formattingbar.pack(side="top", fill="x")
text_frame.pack(side="bottom", fill="both", expand=True)
text.focus_set()


# COMBOBOXES
# Get all font families
font_families = list(font.families())


# Create a combo box for font selection
font_family_combo = ttk.Combobox(root, values=font_families)
font_family_combo.pack(in_=formattingbar, side="left", padx=4, pady=4)


if default_font in font_families:  # Check that the default font is installed
    font_family_combo.set(default_font)
else:
    font_family_combo.set(font_families[0])  # Set the first available font as default


# Create a combo box for font size selection
font_size_combo = ttk.Combobox(root, values=list(range(8, 72)))
font_size_combo.pack(in_=formattingbar, side="left", padx=4, pady=4)
font_size_combo.set(default_size)



# FORMATBAR BUTTONS
#bold 
bold_button = tk.Button(name="formatbar_b1", borderwidth=1, command=bold, width=20, height=20, pady=10, padx=10)
photo_bold = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/bold.png")
photo_bold = photo_bold.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS) 
image_bold = ImageTk.PhotoImage(photo_bold)
bold_button.config(image=image_bold)
bold_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# italic		
italic_button = tk.Button(name="formatbar_b2", borderwidth=1, command=italic, width=20, height=20)
photo_italic = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/italic.png")
photo_italic = photo_italic.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_italic = ImageTk.PhotoImage(photo_italic)
italic_button.config(image=image_italic)
italic_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# underline		   
underline_button = tk.Button(name="formatbar_b3", borderwidth=1, command=underline, width=20, height=20)
photo_underline = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/underline.png")
photo_underline = photo_underline.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_underline = ImageTk.PhotoImage(photo_underline)
underline_button.config(image=image_underline)
underline_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# strike		
strike_button = tk.Button(name="formatbar_b4", borderwidth=1, command=strike, width=20, height=20)
photo_strike = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/strike.png")
photo_strike = photo_strike.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_strike = ImageTk.PhotoImage(photo_strike)
strike_button.config(image=image_strike)
strike_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# font_color			
font_color_button = tk.Button(name="formatbar_b5", borderwidth=1, command=change_color, width=20, height=20)
photo_font_color = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/font-color.png")
photo_font_color = photo_font_color.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_font_color = ImageTk.PhotoImage(photo_font_color)
font_color_button.config(image=image_font_color)
font_color_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# highlight
highlight_button = tk.Button(name="formatbar_b6", borderwidth=1, command=highlight, width=20, height=20)
photo_highlight = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/highlight.png")
photo_highlight = photo_highlight.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_highlight = ImageTk.PhotoImage(photo_highlight)
highlight_button.config(image=image_highlight)
highlight_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_center			  
align_center_button = tk.Button(name="formatbar_b7", borderwidth=1, command=align_center, width=20, height=20)
photo_align_center = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-center.png")
photo_align_center = photo_align_center.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_center = ImageTk.PhotoImage(photo_align_center)
align_center_button.config(image=image_align_center)
align_center_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_justify			   
align_justify_button = tk.Button(name="formatbar_b8", borderwidth=1, command=align_justify, width=20, height=20)
photo_align_justify = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-justify.png")
photo_align_justify = photo_align_justify.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_justify = ImageTk.PhotoImage(photo_align_justify)
align_justify_button.config(image=image_align_justify)
align_justify_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_left			
align_left_button = tk.Button(name="formatbar_b9", borderwidth=1, command=align_left, width=20, height=20)
photo_align_left = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-left.png")
photo_align_left = photo_align_left.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_left = ImageTk.PhotoImage(photo_align_left)
align_left_button.config(image=image_align_left)
align_left_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_right			 
align_right_button = tk.Button(name="formatbar_b10", borderwidth=1, command=align_right, width=20, height=20)
photo_align_right = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-right.png")
photo_align_right = photo_align_right.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_right = ImageTk.PhotoImage(photo_align_right)
align_right_button.config(image=image_align_right)
align_right_button.pack(in_=formattingbar, side="left", padx=4, pady=4)



# STATUS BAR
status = tk.Label(root, text="", bd=1, relief=tk.SUNKEN, anchor=tk.W)


# BINDINGS
# Bind events to update the font
font_family_combo.bind("<<ComboboxSelected>>", update_font)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

# Bind event to apply font style when text is selected
text.bind("<Button-1>", update_comboboxes)



# Mainloop of the Program
root.mainloop()

