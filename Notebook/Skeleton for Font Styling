"""
Having abandoned my attempt to create a Wordpad clone due to a lack of updated
.rtf libraries for Python 3.x, I now need to rethink how I will be styling the
text in my Tkinter text widget in such a way that it can still be easily converted
to a .docx file format with a straightforward function.  This code is my testbed
for creating that code without metaphorcially ripping up the floorboards on my 
current Notepad project.
"""

# This code is a fork of Text-Editor by Singamandeep
# https://github.com/singamandeep/Text-Editor
# I'm only interested in how he wrote the font tool bar


import tkinter as tk
from tkinter import ttk
from tkinter import font
from tkinter import colorchooser
from tkinter import messagebox

root = tk.Tk()
root.geometry("600x550")
root.minsize(600, 550)

# Global variables
current_font_family = "Liberation Mono"
current_font_size = 12
fontColor = '#000000'
fontBackground = '#FFFFFF'
current_tags = []

# Function to remove all formatting tags
def remove_all_formatting_tags():
    for tag in current_tags:
        if tag != "sel":
            text.tag_remove(tag, "1.0", "end")

# Function to make a tag with font face and 
"""
def make_tag():
    global current_tags
    remove_all_formatting_tags()
    selected_font = font.Font(family=current_font_family, size=current_font_size)
    text.tag_configure("custom_font", font=selected_font)
    text.tag_add("custom_font", "sel.first", "sel.last")
"""

def make_tag():
    global current_tags
    global last_selection
    
    
    remove_all_formatting_tags()
    
    # Determine font weight, slant, underline, and overstrike
    weight = "bold" if "bold" in current_tags else "normal"
    slant = "italic" if "italic" in current_tags else "roman"
    underline = 1 if "underline" in current_tags else 0
    overstrike = 1 if "overstrike" in current_tags else 0    
    
    
    selected_font = font.Font(family=current_font_family, size=current_font_size)
    # text.tag_configure("custom_font", font=selected_font)
    
    # Configure the tag with the desired font and style attributes
    text.tag_configure("custom_font", font=(current_font_family, current_font_size, weight, slant),
                       underline=underline, overstrike=overstrike,
                       foreground=fontColor, background=fontBackground)
    
    text.tag_add("custom_font", "sel.first", "sel.last")

# Function to apply bold formatting
def bold():
    if "bold" in current_tags:
        text.tag_remove("bold", "sel.first", "sel.last")
    else:
        text.tag_add("bold", "sel.first", "sel.last")
    make_tag()

# Function to apply italic formatting
def italic():
    if "italic" in current_tags:
        text.tag_remove("italic", "sel.first", "sel.last")
    else:
        text.tag_add("italic", "sel.first", "sel.last")
    make_tag()

# Function to apply underline formatting
def underline():
    if "underline" in current_tags:
        text.tag_remove("underline", "sel.first", "sel.last")
    else:
        text.tag_add("underline", "sel.first", "sel.last")
    make_tag()

# Function to apply strike formatting
def strike():
    if "overstrike" in current_tags:
        text.tag_remove("overstrike", "sel.first", "sel.last")
    else:
        text.tag_add("overstrike", "sel.first", "sel.last")
    make_tag()

# Function to change font color
def change_color():
    color = colorchooser.askcolor(initialcolor='#000000')[1]
    text.tag_configure("font_color", foreground=color)
    text.tag_add("font_color", "sel.first", "sel.last")

# Function to highlight text
def highlight():
    color = colorchooser.askcolor(initialcolor='#FFFFFF')[1]
    text.tag_configure("background_color", background=color)
    text.tag_add("background_color", "sel.first", "sel.last")

# Function to change font face
def change_font(event):
    global current_font_family
    current_font_family = font_menu.get()
    make_tag()

# Function to change font size
def change_size(event):
    global current_font_size
    current_font_size = int(size_menu.get())
    make_tag()

# Create the text widget
text = tk.Text(root, wrap="word")
text.pack(fill="both", expand=True)
text.focus_set()

# Create the formatting bar
formatting_bar = tk.Frame(root, padx=2, pady=2)
formatting_bar.pack(side="top", fill="x")

# Font combobox
font_menu = ttk.Combobox(formatting_bar, state="readonly")
font_menu['values'] = font.families()
font_menu.pack(side="left", padx=4, pady=4)
font_menu.bind('<<ComboboxSelected>>', change_font)

# Size combobox
size_menu = ttk.Combobox(formatting_bar, state='readonly', width=5)
size_menu['values'] = (10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30)
size_menu.pack(side="left", padx=4, pady=4)
size_menu.bind('<<ComboboxSelected>>', change_size)
size_menu.current(1)

# Bold button
bold_button = tk.Button(formatting_bar, text="B", command=bold)
bold_button.pack(side="left", padx=4, pady=4)

# Italic button
italic_button = tk.Button(formatting_bar, text="I", command=italic)
italic_button.pack(side="left", padx=4, pady=4)

# Underline button
underline_button = tk.Button(formatting_bar, text="U", command=underline)
underline_button.pack(side="left", padx=4, pady=4)

# Strike button
strike_button = tk.Button(formatting_bar, text="S", command=strike)
strike_button.pack(side="left", padx=4, pady=4)

# Font color button
font_color_button = tk.Button(formatting_bar, text="Font Color", command=change_color)
font_color_button.pack(side="left", padx=4, pady=4)

# Highlight button
highlight_button = tk.Button(formatting_bar, text="Highlight", command=highlight)
highlight_button.pack(side="left", padx=4, pady=4)

# Binding the mouse click event to update the comboboxes
def update_comboboxes(event):
    tags = text.tag_names(tk.CURRENT)
    for tag in tags:
        if tag == "custom_font":
            font_index = font.families().index(get_font_family(tag))
            font_menu.current(font_index)
            size_menu.set(get_font_size(tag))

text.bind("<Button-1>", update_comboboxes)

root.mainloop()

