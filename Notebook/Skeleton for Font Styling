"""
Having abandoned my attempt to create a Wordpad clone due to a lack of updated
.rtf libraries for Python 3.x, I now need to rethink how I will be styling the
text in my Tkinter text widget in such a way that it can still be easily converted
to a .docx file format with a straightforward function.  This code is my testbed
for creating that code without metaphorcially ripping up the floorboards on my 
current Notepad project.
"""

# This code is a fork of Text-Editor by Singamandeep
# https://github.com/singamandeep/Text-Editor
# I'm only interested in how he wrote the font tool bar


import tkinter as tk
from tkinter import font

def apply_formatting(tag, value):
    text.tag_add(tag, 'sel.first', 'sel.last')
    text.tag_config(tag, **value)

def bold():
    apply_formatting('bold', {'font': ('', 12, 'bold')})

def italic():
    apply_formatting('italic', {'font': ('', 12, 'italic')})

def underline():
    apply_formatting('underline', {'underline': True})

def strike():
    apply_formatting('strike', {'overstrike': True})

def change_font_family(font_family):
    apply_formatting('font_family', {'font': (font_family, 12)})

def change_font_color(color):
    apply_formatting('font_color', {'foreground': color})

def change_font_background(color):
    apply_formatting('font_background', {'background': color})

def change_font_size(size):
    apply_formatting('font_size', {'font': ('', size)})

# Create the main window
root = tk.Tk()
root.title("Simple Text Editor")

# Create the Text widget
text = tk.Text(root, wrap='word', font=('Helvetica', 12))
text.pack(expand=True, fill='both')

# Text for Debugging
text.insert("end", "This first sentence tests the bold formatting feature.\n")
text.insert("end", "\n")
text.insert("end", "This second sentence tests the italics formatting feature.\n")
text.insert("end", "\n")
text.insert("end", "This third sentence demonstrates the ability to underline words.\n")
text.insert("end", "\n")

# Create menu bar
menubar = tk.Menu(root)
root.config(menu=menubar)

# Font menu
font_menu = tk.Menu(menubar, tearoff=False)
menubar.add_cascade(label="Font", menu=font_menu)

font_menu.add_command(label="Bold", command=bold)
font_menu.add_command(label="Italic", command=italic)
font_menu.add_command(label="Underline", command=underline)
font_menu.add_command(label="Strike", command=strike)

font_family_menu = tk.Menu(font_menu, tearoff=False)
font_menu.add_cascade(label="Font Family", menu=font_family_menu)
for f in font.families():
    font_family_menu.add_command(label=f, command=lambda font=f: change_font_family(font))

font_color_menu = tk.Menu(font_menu, tearoff=False)
font_menu.add_cascade(label="Font Color", menu=font_color_menu)
for c in ['black', 'red', 'blue', 'green']:
    font_color_menu.add_command(label=c, command=lambda color=c: change_font_color(color))

font_background_menu = tk.Menu(font_menu, tearoff=False)
font_menu.add_cascade(label="Font Background", menu=font_background_menu)
for c in ['white', 'yellow', 'lightgrey', 'lightblue']:
    font_background_menu.add_command(label=c, command=lambda color=c: change_font_background(color))

font_size_menu = tk.Menu(font_menu, tearoff=False)
font_menu.add_cascade(label="Font Size", menu=font_size_menu)
for s in range(8, 21, 2):
    font_size_menu.add_command(label=str(s), command=lambda size=s: change_font_size(size))

root.mainloop()

