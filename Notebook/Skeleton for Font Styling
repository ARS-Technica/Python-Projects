"""
Having abandoned my attempt to create a Wordpad clone due to a lack of updated
.rtf libraries for Python 3.x, I now need to rethink how I will be styling the
text in my Tkinter text widget in such a way that it can still be easily converted
to a .docx file format with a straightforward function.  This code is my testbed
for creating that code without metaphorcially ripping up the floorboards on my 
current Notepad project.
"""

# This code is a fork of Text-Editor by Singamandeep
# https://github.com/singamandeep/Text-Editor
# I'm only interested in how he wrote the font tool bar


import tkinter as tk
from tkinter import font
from tkinter import colorchooser
from tkinter import messagebox
from tkinter import ttk
from PIL import Image, ImageTk

root = tk.Tk()
root.geometry("600x550")
root.resizable(True, True)
root.minsize(600, 550)

current_font_family = "Liberation Mono"
current_font_size = 12
fontColor = '#000000'
fontBackground = '#FFFFFF'

def make_tag():
    global last_selection

    if text.tag_ranges("sel"):
        current_tags = text.tag_names("sel.first")

        for tag in ["font_color_change", "background_color_change"]:
            if tag in current_tags:
                current_tags.remove(tag)

        weight = "bold" if "bold" in current_tags else "normal"
        slant = "italic" if "italic" in current_tags else "roman"
        underline = 1 if "underline" in current_tags else 0
        overstrike = 1 if "overstrike" in current_tags else 0

        tag_name = "font_" + str(uuid.uuid4())
        text.tag_add(tag_name, "sel.first", "sel.last")

        text.tag_configure(tag_name, font=(current_font_family, current_font_size, weight, slant),
                           underline=underline, overstrike=overstrike,
                           foreground=fontColor, background=fontBackground)

        current_selection = text.tag_ranges("sel")

        if current_selection != last_selection:
            for tag in current_tags:
                if tag != "sel":
                    text.tag_remove(tag, "sel.first", "sel.last")
            last_selection = current_selection
    else:
        messagebox.showinfo("alert", "No text has been selected")

def bold(event=None):
    if text.tag_ranges("sel"):
        current_tags = list(text.tag_names())

        if "bold" in current_tags:
            text.tag_delete("bold", "sel.first", "sel.last")
        else:
            text.tag_add("bold", "sel.first", "sel.last")

        make_tag()

    else:
        messagebox.showinfo("alert", "No text has been selected")

def italic(event=None):
    if text.tag_ranges("sel"):
        current_tags = list(text.tag_names())

        if "italic" in current_tags:
            text.tag_add("roman", "sel.first", "sel.last")
            text.tag_delete("italic", "sel.first", "sel.last")
        else:
            text.tag_add("italic", "sel.first", "sel.last")

        make_tag()

    else:
        messagebox.showinfo("alert", "No text has been selected")

def underline(event=None):
    if text.tag_ranges("sel"):
        current_tags = list(text.tag_names())

        if "underline" in current_tags:
            text.tag_delete("underline", "sel.first", "sel.last")
        else:
            text.tag_add("underline", "sel.first", "sel.last")

        make_tag()

    else:
        messagebox.showinfo("alert", "No text has been selected")

def strike():
    if text.tag_ranges("sel"):
        current_tags = list(text.tag_names())

        if "overstrike" in current_tags:
            text.tag_delete("overstrike", "sel.first", "sel.last")
        else:
            text.tag_add("overstrike", "sel.first", "sel.last")

        make_tag()

    else:
        messagebox.showinfo("alert", "No text has been selected")

def change_color():
    color = colorchooser.askcolor(initialcolor='#000000')
    color_name = color[1]

    if text.tag_ranges("sel"):
        for tag in text.tag_names("sel.first"):
            if tag.startswith("font_color"):
                text.tag_remove(tag, "sel.first", "sel.last")

        font_color_tag = "font_color_" + color_name
        text.tag_add(font_color_tag, "sel.first", "sel.last")

        text.tag_configure(font_color_tag, foreground=color_name)
    else:
        messagebox.showinfo("alert", "No text has been selected")

def highlight():
    color = colorchooser.askcolor(initialcolor='#FFFFFF')
    color_rgb = color[1]

    if text.tag_ranges("sel"):
        for tag in text.tag_names("sel.first"):
            if tag.startswith("background_color"):
                text.tag_remove(tag, "sel.first", "sel.last")

        background_color_tag = "background_color_" + color_rgb
        text.tag_add(background_color_tag, "sel.first", "sel.last")

        text.tag_configure(background_color_tag, background=color_rgb)
    else:
        messagebox.showinfo("alert", "No text has been selected")

def align_center(event=None):
    remove_align_tags()
    text.tag_configure("center", justify='center')
    text.tag_add("center", 1.0, tk.END)

def align_left(event=None):
    remove_align_tags()
    text.tag_configure("left", justify='left')
    text.tag_add("left", 1.0, tk.END)

def align_right(event=None):
    remove_align_tags()
    text.tag_configure("right", justify='right')
    text.tag_add("right", 1.0, tk.END)

def remove_align_tags():
    all_tags = text.tag_names(index=None)
    if "center" in all_tags:
        text.tag_remove("center", 1.0, tk.END)
    if "left" in all_tags:
        text.tag_remove("left", 1.0, tk.END)
    if "right" in all_tags:
        text.tag_remove("right", 1.0, tk.END)

formattingbar = tk.Frame(root, padx=2, pady=2)
all_fonts = tk.StringVar()
font_families = font.families()
default_font = "Arial"
if default_font in font_families:
    all_fonts.set(default_font)
else:
    all_fonts.set(font_families[0])

font_menu = ttk.Combobox(formattingbar, textvariable=all_fonts, state="readonly")
font_menu.pack(side="left", padx=4, pady=4)

all_size = tk.StringVar()
size_menu = ttk.Combobox(formattingbar, textvariable=all_size, state='readonly', width=5)
size_menu.pack(in_=formattingbar, side="left", padx=4, pady=4)

bold_button = tk.Button(formattingbar, borderwidth=1, command=bold, width=20, height=20, pady=10, padx=10)
# Add image for bold button
bold_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

italic_button = tk.Button(formattingbar, borderwidth=1, command=italic, width=20, height=20)
# Add image for italic button
italic_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

underline_button = tk.Button(formattingbar, borderwidth=1, command=underline, width=20, height=20)
# Add image for underline button
underline_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

strike_button = tk.Button(formattingbar, borderwidth=1, command=strike, width=20, height=20)
# Add image for strike button
strike_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

font_color_button = tk.Button(formattingbar, borderwidth=1, command=change_color, width=20, height=20)
# Add image for font color button
font_color_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

highlight_button = tk.Button(formattingbar, borderwidth=1, command=highlight, width=20, height=20)
# Add image for highlight button
highlight_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

align_center_button = tk.Button(formattingbar, borderwidth=1, command=align_center, width=20, height=20)
# Add image for align center button
align_center_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

align_left_button = tk.Button(formattingbar, borderwidth=1, command=align_left, width=20, height=20)
# Add image for align left button
align_left_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

align_right_button = tk.Button(formattingbar, borderwidth=1, command=align_right, width=20, height=20)
# Add image for align right button
align_right_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

status = tk.Label(root, text="", bd=1, relief=tk.SUNKEN, anchor=tk.W)
text_frame = tk.Frame(root, borderwidth=1, relief="sunken")
text = tk.Text(wrap="word", font=("Liberation Mono", 12), background="white", borderwidth=0, highlightthickness=0 , undo= True)
text.pack(in_=text_frame, side="left", fill="both", expand=True)

text.insert("end", "This first sentence tests the bold formatting feature.\n\n")
text.insert("end", "This second sentence tests the italics formatting feature.\n\n")
text.insert("end", "This third sentence demonstrates the ability to underline words.\n\n")

formattingbar.pack(side="top", fill="x")
status.pack(side="bottom", fill="x")
text_frame.pack(side="bottom", fill="both", expand=True)
text.focus_set()

root.mainloop()

