"""
The following code is an attempt to add an Info Bar to the existing Status Bar of my Notebook
project.  The Info Bar will display the current position of the cursor on the text widget in ther
format: Line: 1 | Column: 0

If successful, the Info Bar should appear at the bottom, right-most edge of the window on what
is currently the Status Bar.  It should toggle on and off with a check box in the Options Menu.
The Info Bar should also not interfere with the Search Bar.
"""


# Working on Search Bar.  Added search_bar.lift() to create_window Function
# toggle_search_bar now makes Search Bar Visible the first time it's pressed
 
# Next Problem: Info and Status Bar are both still visible when Search Bar is on


import os, sys
from tkinter import *
from tkinter import colorchooser, filedialog, font, messagebox, simpledialog
import tkinter.ttk as ttk
import win32print
import win32api

def create_custom_text(window, linenumbers_canvas):
    global text
    text_editor_frame = Frame(window)
    text = Text(text_editor_frame, font=("Helvetica", 16), selectbackground=line_highlight,
                selectforeground="black", undo=True, padx=5, pady=5, wrap="none")
    def proxy(*args):
        cmd = (text._orig,) + args
        result = text.tk.call(cmd)

        if (
            args[0] in ("insert", "replace", "delete")
            or args[0:3] == ("mark", "set", "insert")
            or args[0:2] == ("xview", "moveto")
            or args[0:2] == ("xview", "scroll")
            or args[0:2] == ("yview", "moveto")
            or args[0:2] == ("yview", "scroll")
        ):
            text.event_generate("<<Change>>", when="tail")

        return result

    text._orig = text._w + "_orig"
    text.tk.call("rename", text._w, text._orig)
    text.tk.createcommand(text._w, proxy)
    vertical_scrollbar = Scrollbar(text_editor_frame, orient="vertical", command=text.yview)																
    text.configure(yscrollcommand=vertical_scrollbar.set)					 
    horizontal_scrollbar = Scrollbar(text_editor_frame, orient="horizontal", command=text.xview)	 
    text.configure(xscrollcommand=horizontal_scrollbar.set)
    text.grid(row=0, column=0, sticky="nsew") # Update the grid configuration of the text widget  
    vertical_scrollbar.grid(row=0, column=1, sticky="ns")
    horizontal_scrollbar.grid(row=1, column=0, sticky="ew")
    text_editor_frame.grid_rowconfigure(0, weight=1)    # Set row weight to 1 to allow vertical expansion
    text_editor_frame.grid_columnconfigure(0, weight=1) # Set column weight to 1 to allow horizontal expansion
    text_editor_frame.grid(row=1, column=1, sticky="nsew", padx=2, pady=2)  # columnspan=2) ?
    text_editor_frame.grid_rowconfigure(0, weight=1)  # Set row weight to 1 to allow vertical expansion
    text_editor_frame.grid_columnconfigure(0, weight=1)  # Set column weight to 1 to allow horizontal expansion
    window.grid_rowconfigure(0, weight=0)
    window.grid_rowconfigure(1, weight=1)
    window.grid_columnconfigure(0, weight=0)
    window.grid_columnconfigure(1, weight=1)
    text.bind("<<Change>>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))
    text.bind("<<Modified>>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))
    text.bind("<Configure>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))

    return text

def create_search_bar(window):    
    def on_exit(event):
        event.widget['background'] = main_color #second_color #text_color
        event.widget['foreground'] = text_color #second_color
    def on_enter(event):
        event.widget['background'] = text_color #second_color
        event.widget['foreground'] = main_color #second_color #text_color
    
    global search_bar						
    search_bar = Frame(window, bd=5, height=25, highlightthickness=0)
    search_bar.grid(row=1, column=1, sticky="ew", pady=5)
    search_bar.grid_remove()  # Hide search bar initially
    global search_bar_button_frame_left
    search_bar_button_frame_left = Frame(search_bar, bg=main_color)
    search_bar_button_frame_left.configure(bg=main_color)
    search_bar_button_frame_left.grid(row=0, column=0, padx=5, sticky="w")																							
    global search_bar_button_frame_right
    search_bar_button_frame_right = Frame(search_bar, bg=main_color)
    search_bar_button_frame_right.configure(bg=main_color)
    search_bar_button_frame_right.grid(row=0, column=1, padx=15, pady=0, sticky="w")
    global search_label			
    search_label = Label(search_bar_button_frame_left, text="Search:", fg=text_color, bg=main_color)										 
    search_label.grid(row=0, column=0, padx=2, pady=2, sticky="w")





def update_bars_padding(event):
    # Calculate the dynamic padding based on the window width
    window_width = event.width
    dynamic_padx = max(window_width // 3, 150)  # Ensure a minimum padding of 150

    # Update padx for info_bar
    info_bar.grid_configure(padx=(dynamic_padx, 5))

    # Update padx for status_bar
    status_bar.grid_configure(padx=(5, dynamic_padx))
    
    # Bind the resize event to update padding dynamically in create_bindings
    # window.bind("<Configure>", update_bars_padding)

def create_info_bar(window):
    global info_bar
    info_bar = Frame(window, background=main_color)
    info_bar.grid(row=2, column=1, columnspan=3, sticky="we", pady=5, padx=(150, 5))  # Dual padding to avoid overlap
    # info_bar ROW needs to be different than status_bar ROW
    # info_bar COLUMN needs to be the same as status_bar COLUMN
    
    global info_bar_label
    info_bar_label = Label(info_bar, text='a b c d e f g h i j k l m n o p q r s t u v w x y z Info Bar Text', fg=text_color, bg=main_color)
    info_bar_label.grid(row=0, column=1, sticky="e", padx=5)

    # Configure grid columns to ensure the label is on the right
    info_bar.grid_columnconfigure(0, weight=1)
    info_bar.grid_columnconfigure(1, weight=0)

def create_status_bar(window):
    global status_bar
    status_bar = Frame(window, background=main_color)
    status_bar.grid(row=3, column=1, columnspan=3, sticky="we", pady=5, padx=(5, 150))  # Dual padding to avoid overlap
    # status_bar ROW needs to be different than info_bar ROW
    # status_bar COLUMN needs to be the same as info_bar COLUMN

    global status_bar_label
    status_bar_label = Label(status_bar, text='Status Bar Text a b c d e f g h i j k l m n o p', fg=text_color, bg=main_color)
    status_bar_label.grid(row=0, column=0, sticky="w", padx=5)
    
    # Configure grid columns to ensure the label is on the left
    status_bar.grid_columnconfigure(0, weight=0)
    status_bar.grid_columnconfigure(1, weight=10)

																									
def create_text_line_numbers(canvas, text, text_color):   
    def redraw(*args):
        canvas.delete("all")
        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            canvas.create_text(2, y, anchor="nw", text=linenum, fill=text_color)
            i = text_widget.index("%s+1line" % i)
    redraw()
    text.bind("<<Change>>", redraw)
    text.bind("<<Modified>>", redraw)
    text.bind("<Configure>", redraw)
    return redraw

status_bar_message = "Status Bar"


def toggle_info_bar():
    global is_info_bar_visible
    if info_bar.winfo_ismapped():
        info_bar.grid_remove()
        is_info_bar_visible = True
    else:
        if info_bar_checkbutton_var.get() == 1:
            info_bar.grid(row=2, column=1, columnspan=3, sticky="e", pady=5, padx=(150, 5))
            is_info_bar_visible = True
        else:
            info_bar.grid_remove()
            is_info_bar_visible = False


def toggle_status_bar():
    global is_status_bar_visible
    if search_bar.winfo_ismapped():
        status_bar.grid_remove()
        is_status_bar_visible = True
    else:
        if status_bar_checkbutton_var.get() == 1:
            status_bar.grid(row=2, column=0, columnspan=2, sticky="w", pady=5, padx=(5, 150))
            is_status_bar_visible = True
        else:
            status_bar.grid_remove()
            is_status_bar_visible = False





# The event=None declaration ensures that the function can still be called without any arguments in the keybindings.
def toggle_search_bar(event=None):
    global is_status_bar_visible

    # If the Search Bar is already visible, remove it
    if search_bar.winfo_ismapped():
        search_bar.grid_remove()
        search_bar_checkbutton_var.set(0)
        if is_status_bar_visible:
            status_bar.grid(row=2, column=0, columnspan=2, sticky=W)
            status_bar_checkbutton_var.set(1)
    else:
        search_bar.grid(row=2, column=0, columnspan=2, sticky='w')
        search_bar_checkbutton_var.set(1)

        if is_status_bar_visible:
            status_bar.grid_remove()
            status_bar_checkbutton_var.set(0)





def find_all(event=None):
    search_text = search_entry.get()
    if search_text:
        start_pos = "1.0"
        while True:
            pos = text_widget.search(search_text, start_pos, stopindex="end")
            if not pos:
                break
            end_pos = f"{pos}+{len(search_text)}c"
            text_widget.tag_add("found", pos, end_pos)
            start_pos = end_pos
        text_widget.tag_configure("found", background=line_highlight)
    else:
        if search_bar.winfo_ismapped():
             messagebox.showerror("Search", "Please enter text before searching")
        else:
            toggle_search_bar()
            search_entry.focus_set()

main_color = "SystemButtonFace"
second_color = "White"
selection_highlight = "#999999"
text_color = "black"
line_highlight = "yellow"

def toggle_linenumbers():
    if linenumbers_button_var.get():
        linenumbers_canvas.grid(row=1, column=0, sticky="NS")
        window.grid_rowconfigure(0, weight=0, minsize=0)
        window.grid_rowconfigure(1, weight=1, minsize=0)
    else:
        linenumbers_canvas.grid_forget()

def create_menu(window):
    menu_bar = Menu(window)
    window.config(menu=menu_bar)
    options_menu = Menu(menu_bar, tearoff=0)
    menu_bar.add_cascade(label="Options", menu=options_menu)
    global linenumbers_button_var
    linenumbers_button_var = BooleanVar(value=True)
    options_menu.add_checkbutton(
        label="Show Line Numbers",
        variable=linenumbers_button_var,
        onvalue=True,
        offvalue=False,
        command=toggle_linenumbers)
    global info_bar_checkbutton_var
    info_bar_checkbutton_var = BooleanVar(value=True)
    info_bar_checkbutton = options_menu.add_checkbutton(
        label="Info Bar", 
        variable=info_bar_checkbutton_var,
        onvalue=True,
        offvalue=False,        
        command=toggle_info_bar) 
    global status_bar_checkbutton_var
    status_bar_checkbutton_var = BooleanVar(value=True)
    status_bar_checkbutton = options_menu.add_checkbutton(
        label="Status Bar", 
        variable=status_bar_checkbutton_var,
        onvalue=True,
        offvalue=False,        
        command=toggle_status_bar)   
    search_menu = Menu(menu_bar, tearoff=False)
    menu_bar.add_cascade(label="Search", menu=search_menu)
    global search_bar_checkbutton_var
    search_bar_checkbutton_var = BooleanVar(value=False) 
    search_bar_checkbutton = search_menu.add_checkbutton(
        label="Search", 
        variable=search_bar_checkbutton_var, 
        onvalue=True,
        offvalue=False,
        command=toggle_search_bar)

def create_window():
    global window
    window = Tk()
    window.geometry("1200x690")
    window.resizable(True,True)
    window.grid_columnconfigure(1, weight=1)
    window.grid_rowconfigure(0, weight=0, minsize=0)
    window.grid_rowconfigure(1, weight=1, minsize=0)
    global linenumbers_canvas
    linenumbers_canvas = Canvas(window, width=40, highlightthickness=0)																				   
    linenumbers_canvas.grid(row=1, column=0, sticky="NS")
    window.grid_rowconfigure(1, minsize=linenumbers_canvas.winfo_reqheight())    
    linenumbers_canvas.grid_propagate(False)
    linenumbers_canvas.configure(width=30)
    global text_widget
    text_widget = create_custom_text(window, linenumbers_canvas)   
    text_widget.insert("end", "Type some text here...")
    text.insert("end", "one\ntwo\nthree\n")
    text.insert("end", "four\n")
    text.insert("end", "five\nsecond two\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
    create_search_bar(window)
    create_info_bar(window)    # Create the info bar ABOVE the status bar
    create_status_bar(window)
    
    
    # Lift the search_bar initially to ensure it's on top when activated
    search_bar.lift()
    
    # Bind the resize event to update padding dynamically in create_window
    window.bind("<Configure>", update_bars_padding)
    
    create_menu(window)
    toggle_linenumbers()
    toggle_status_bar()
    window.mainloop()

if __name__ == "__main__":
    create_window()

