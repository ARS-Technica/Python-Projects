"""
The following code is an attempt to add an Info Bar to the existing Status Bar of my Notebook
project.  The Info Bar will display the current position of the cursor on the text widget in ther
format: Line: 1 | Column: 0

If successful, the Info Bar should appear at the bottom, right-most edge of the window on what
is currently the Status Bar.  It should toggle on and off with a check box in the Options Menu.
The Info Bar should also not interfere with the Search Bar.
"""


# Broke create_bottom_bar  up into separate functions to create the bottom bar, info bar, status bar, and search bar.
# Next issue: Only one bar shows at a time.  Need to display status and info together


import os, sys
from tkinter import *
from tkinter import colorchooser, filedialog, font, messagebox, simpledialog
import tkinter.ttk as ttk
import win32print
import win32api


# Interface colors for the later integration of a theme-changing feature
main_color = "SystemButtonFace"
second_color = "White"
selection_highlight = "#999999"
text_color = "black"
line_highlight = "yellow"


def create_toolbar():
    toolbar_placeholder = Frame(window, height=30, bg='lightgrey')
    toolbar_placeholder.grid(row=0, column=0, columnspan=2, sticky='we')
    Label(toolbar_placeholder, text="Toolbar Placeholder").pack(side=LEFT, padx=10, pady=5)


def create_linenumbers_canvas():
    global linenumbers_canvas
    linenumbers_canvas = Canvas(window, width=40, highlightthickness=0)                                                                                   
    linenumbers_canvas.grid(row=1, column=0, sticky="NS")
    window.grid_rowconfigure(1, minsize=linenumbers_canvas.winfo_reqheight())    
    linenumbers_canvas.grid_propagate(False)
    linenumbers_canvas.configure(width=30)


def create_text_widget(window, linenumbers_canvas):
    global text_widget
    text_editor_frame = Frame(window)
    text_widget = Text(text_editor_frame, font=("Helvetica", 16), selectbackground=line_highlight,
                       selectforeground="black", undo=True, padx=5, pady=5, wrap="none")

    vertical_scrollbar = Scrollbar(text_editor_frame, orient="vertical", command=text_widget.yview)
    text_widget.configure(yscrollcommand=vertical_scrollbar.set)
    horizontal_scrollbar = Scrollbar(text_editor_frame, orient="horizontal", command=text_widget.xview)
    text_widget.configure(xscrollcommand=horizontal_scrollbar.set)
    
    text_widget.grid(row=0, column=0, columnspan=2, sticky="nsew")
    vertical_scrollbar.grid(row=0, column=1, sticky="ns")
    horizontal_scrollbar.grid(row=1, column=0, sticky="ew")
    
    text_editor_frame.grid_rowconfigure(0, weight=1)
    text_editor_frame.grid_columnconfigure(0, weight=1)
    text_editor_frame.grid(row=1, column=1, sticky="nsew", padx=2, pady=2)
    
    window.grid_rowconfigure(0, weight=0)
    window.grid_rowconfigure(1, weight=1)
    window.grid_columnconfigure(0, weight=0)
    window.grid_columnconfigure(1, weight=1)

    return text_widget


def create_menu():
    global info_bar_var, linenumbers_button_var, search_bar_var, status_bar_var
    info_bar_var = IntVar(value=1)
    linenumbers_button_var = BooleanVar(value=1)
    search_bar_var = IntVar()
    status_bar_var = IntVar(value=1)

    menu_bar = Menu(window)
    window.config(menu=menu_bar)
    options_menu = Menu(menu_bar, tearoff=0)
    menu_bar.add_cascade(label="Options", menu=options_menu)

    options_menu.add_checkbutton(label="Show Line Numbers", variable=linenumbers_button_var, command=toggle_linenumbers)    
    options_menu.add_separator()
    options_menu.add_checkbutton(label="Info Bar", variable=info_bar_var, command=update_bottom_bar)
    options_menu.add_checkbutton(label="Search Bar", variable=search_bar_var, command=update_bottom_bar)
    options_menu.add_checkbutton(label="Status Bar", variable=status_bar_var, command=update_bottom_bar)


def find_position(event=None):
    global info_bar_label
    currline, curcolumn = text_widget.index("insert").split('.')
    info_bar_label.config(text=f'Line: {currline} | Column: {curcolumn}')


# Create the bottom bar frame
def create_bottom_bar():
    global bottom_bar_frame
    bottom_bar_frame = Frame(window, relief="flat", bd=0, background=main_color)
    bottom_bar_frame.grid(row=3, column=1, sticky="we", padx=5, pady=5)

    create_info_bar()
    create_status_bar()
    create_search_bar()
    create_persistent_bottom_bar()


# Create the info bar frame
def create_info_bar():
    global info_bar_frame, info_bar_label
    info_bar_frame = Frame(bottom_bar_frame, relief="flat", bd=0, background=main_color)
    info_bar_label = Label(info_bar_frame, text="Line: 1 | Column: 0", bg=main_color, fg=text_color)
    info_bar_label.pack(side=LEFT)


# Create the status bar frame
def create_status_bar():
    global status_bar_frame, status_bar_label
    status_bar_frame = Frame(bottom_bar_frame, relief="flat", bd=0, background=main_color)
    status_bar_label = Label(status_bar_frame, text="Status Bar", bg=main_color, fg=text_color)
    status_bar_label.pack(side=LEFT)


# Create the search bar frame
def create_search_bar():
    global search_bar_frame
    search_bar_frame = Frame(bottom_bar_frame, relief="flat", bd=0, background=main_color)
    search_entry = Entry(search_bar_frame)
    search_entry.pack(side=LEFT)
    search_button = Button(search_bar_frame, text="Search", command=find)
    search_button.pack(side=LEFT)


# Create the persistent bottom bar
def create_persistent_bottom_bar():
    global persistent_bottom_bar
    persistent_bottom_bar = Frame(bottom_bar_frame, relief="flat", bd=0, padx=0, pady=5)
    Label(persistent_bottom_bar, text="Persistent Bottom Bar", bg=main_color, fg=text_color).pack(side=LEFT)


# Update the bottom bar based on the toggle states
def update_bottom_bar():
    global bottom_bar_frame

    for widget in bottom_bar_frame.winfo_children():
        widget.pack_forget()

    if search_bar_var.get():
        search_bar_frame.pack(side=LEFT, fill=BOTH)
    elif info_bar_var.get() and status_bar_var.get():
        info_bar_frame.pack(side=LEFT, fill=BOTH)
        status_bar_frame.pack(side=LEFT, fill=BOTH)
    elif info_bar_var.get():
        info_bar_frame.pack(side=LEFT, fill=BOTH)
    elif status_bar_var.get():
        status_bar_frame.pack(side=LEFT, fill=BOTH)
    else:
        persistent_bottom_bar.pack(side=LEFT, fill=BOTH)


def toggle_linenumbers():
    if linenumbers_button_var.get():
        linenumbers_canvas.grid(row=1, column=0, sticky="NS")
        window.grid_rowconfigure(0, weight=0, minsize=0)
        window.grid_rowconfigure(1, weight=1, minsize=0)
    else:
        linenumbers_canvas.grid_forget()


def create_window():
    global window
    window = Tk()
    window.title("Simple Notepad with Toggleable Bottom Bar")
    window.geometry("1200x690")
    window.resizable(True, True)
    
    window.grid_rowconfigure(1, weight=1)
    window.grid_columnconfigure(1, weight=1)

    create_menu()
    create_toolbar()
    create_linenumbers_canvas()
    create_text_widget(window, linenumbers_canvas)
    create_bottom_bar()
    
    text_widget.insert("end", "Type some text here...\n")
    
    update_bottom_bar()

    # Bind events to update the cursor position in the info bar
    text_widget.bind("<KeyRelease>", find_position)
    text_widget.bind("<ButtonRelease>", find_position)

    window.mainloop()


if __name__ == "__main__":
    create_window()

