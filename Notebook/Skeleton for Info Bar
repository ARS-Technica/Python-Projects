"""
The following code is an attempt to add an Info Bar to the existing Status Bar of my Notebook
project.  The Info Bar will display the current position of the cursor on the text widget in ther
format: Line: 1 | Column: 0

If successful, the Info Bar should appear at the bottom, right-most edge of the window on what
is currently the Status Bar.  It should toggle on and off with a check box in the Options Menu.
The Info Bar should also not interfere with the Search Bar.
"""


# Integrating previous Functions
# Added create_custom_text and linenumbers_canvas


from tkinter import *
from tkinter import ttk


def create_toolbar():
    # Create a placeholder for the toolbar
    toolbar_placeholder = Frame(window, height=30, bg='lightgrey')
    toolbar_placeholder.grid(row=0, column=0, columnspan=2, sticky='we')
    Label(toolbar_placeholder, text="Toolbar Placeholder").pack(side=LEFT, padx=10, pady=5)


def create_text_line_numbers(canvas, text, text_color):
    def redraw(*args):
        canvas.delete("all")
        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            canvas.create_text(2, y, anchor="nw", text=linenum, fill=text_color)
            i = text_widget.index("%s+1line" % i)
    redraw()
    text.bind("<<Change>>", redraw)
    text.bind("<<Modified>>", redraw)
    text.bind("<Configure>", redraw)
    return redraw

"""
def create_line_numbers():
    # Create a frame for line numbers (left column placeholder)
    line_numbers_frame = Frame(window, width=30)
    line_numbers_frame.grid(row=1, column=0, rowspan=2, sticky='ns')
"""

def toggle_linenumbers():
    if linenumbers_button_var.get():
        linenumbers_canvas.grid(row=1, column=0, sticky="NS")
        window.grid_rowconfigure(0, weight=0, minsize=0)
        window.grid_rowconfigure(1, weight=1, minsize=0)
    else:
        linenumbers_canvas.grid_forget()


# Todo: Change to create_text_widget 
def create_custom_text(window, linenumbers_canvas):
    global text
    text_editor_frame = Frame(window)
    text = Text(text_editor_frame, font=("Helvetica", 16), selectbackground=line_highlight,
                selectforeground="black", undo=True, padx=5, pady=5, wrap="none")

    def proxy(*args):
        cmd = (text._orig,) + args
        result = text.tk.call(cmd)

        if (
            args[0] in ("insert", "replace", "delete")
            or args[0:3] == ("mark", "set", "insert")
            or args[0:2] == ("xview", "moveto")
            or args[0:2] == ("xview", "scroll")
            or args[0:2] == ("yview", "moveto")
            or args[0:2] == ("yview", "scroll")
        ):
            text.event_generate("<<Change>>", when="tail")

        return result

    text._orig = text._w + "_orig"
    text.tk.call("rename", text._w, text._orig)
    text.tk.createcommand(text._w, proxy)
    vertical_scrollbar = Scrollbar(text_editor_frame, orient="vertical", command=text.yview)
    text.configure(yscrollcommand=vertical_scrollbar.set)
    horizontal_scrollbar = Scrollbar(text_editor_frame, orient="horizontal", command=text.xview)
    text.configure(xscrollcommand=horizontal_scrollbar.set)
    text.grid(row=0, column=0, columnspan=2, sticky="nsew")
    vertical_scrollbar.grid(row=0, column=1, sticky="ns")
    horizontal_scrollbar.grid(row=1, column=0, sticky="ew")
    text_editor_frame.grid_rowconfigure(0, weight=1)
    text_editor_frame.grid_columnconfigure(0, weight=1)
    text_editor_frame.grid(row=1, column=1, sticky="nsew", padx=2, pady=2)
    text_editor_frame.grid_rowconfigure(0, weight=1)
    text_editor_frame.grid_columnconfigure(0, weight=1)
    window.grid_rowconfigure(0, weight=0)
    window.grid_rowconfigure(1, weight=1)
    window.grid_columnconfigure(0, weight=0)
    window.grid_columnconfigure(1, weight=1)
    text.bind("<<Change>>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))
    text.bind("<<Modified>>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))
    text.bind("<Configure>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))

    return text


"""
def create_text_widget():
    # Create the text widget with a vertical scrollbar
    text_frame = Frame(window)
    text_frame.grid(row=1, column=1, sticky='nsew')

    text_area = Text(text_frame, wrap="word", undo=True)
    text_area.grid(row=0, column=0, sticky='nsew')

    text_scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_area.yview)
    text_scrollbar.grid(row=0, column=1, sticky='ns')
    text_area.config(yscrollcommand=text_scrollbar.set)

    # Configure row/column resizing
    text_frame.grid_rowconfigure(0, weight=1)
    text_frame.grid_columnconfigure(0, weight=1)
"""


# Create a function to define and return the menu bar
def create_menu():
    global status_bar_var, info_bar_var, search_bar_var
    # Initialize IntVar variables after Tk() has been created
    status_bar_var = IntVar(value=1)  # Set to 1 to make Status Bar checked by default
    info_bar_var = IntVar(value=1)    # Set to 1 to make Info Bar checked by default
    search_bar_var = IntVar()
    
    # Create the menu bar
    menu_bar = Menu(window)
    window.config(menu=menu_bar)

    # Options menu
    options_menu = Menu(menu_bar, tearoff=0)
    menu_bar.add_cascade(label="Options", menu=options_menu)

    # Add checkbuttons to the Options menu
    options_menu.add_checkbutton(label="Status Bar", variable=status_bar_var, command=toggle_status_info_bar)
    options_menu.add_checkbutton(label="Info Bar", variable=info_bar_var, command=toggle_status_info_bar)
    options_menu.add_checkbutton(label="Search Bar", variable=search_bar_var, command=toggle_search_bar)


def create_search_bar():
    global search_bar_frame

    # Create a frame for the search bar
    search_bar_frame = Frame(window, relief="flat", bd=0, padx=0, pady=2)
    search_bar_left_frame = Frame(search_bar_frame, bd=0)
    search_label = Label(search_bar_left_frame, text="Search Bar")
    search_entry = Entry(search_bar_left_frame)

    # Frame for search buttons
    search_bar_right_frame = Frame(search_bar_frame, bd=0)
    search_btn_1 = Button(search_bar_right_frame, text="Find")
    search_btn_2 = Button(search_bar_right_frame, text="Replace")
    search_btn_3 = Button(search_bar_right_frame, text="Next")
    search_btn_4 = Button(search_bar_right_frame, text="Previous")

    # Arrange the search bar's widgets
    search_bar_left_frame.grid(row=0, column=0, sticky="w")
    search_label.grid(row=0, column=0, sticky="w")
    search_entry.grid(row=0, column=1, sticky="w", padx=5)

    search_bar_right_frame.grid(row=0, column=1, sticky="e")
    search_btn_1.grid(row=0, column=0, padx=2)
    search_btn_2.grid(row=0, column=1, padx=2)
    search_btn_3.grid(row=0, column=2, padx=2)
    search_btn_4.grid(row=0, column=3, padx=2)


def create_status_bar():
    global info_bar_frame, info_label, status_bar_frame, status_label

    # Create a frame for the status bar
    status_bar_frame = Frame(window, relief="flat", bd=0)
    status_label = Label(status_bar_frame, text="Status Bar")
    info_bar_frame = Frame(window, relief="flat", bd=0)
    info_label = Label(status_bar_frame, text="Info Bar")

    # Adjust grid weights to position the Info Bar label on the far right
    status_bar_frame.grid_columnconfigure(0, weight=1)  # Expandable space for the Status Bar label
    status_bar_frame.grid_columnconfigure(1, weight=0)  # Info label remains on the right side, next to the scrollbar


# Function to toggle visibility of the status and search bars
def update_bars():
    global info_bar_frame, info_label, persistent_bottom_bar, search_bar_frame, status_label

    # Status Bar toggle
    if status_bar_var.get() and info_bar_var.get():
        # Both Status Bar and Info Bar are checked
        status_bar_frame.grid(row=3, column=1, sticky='we', padx=0, pady=15)
        status_label.grid(row=0, column=0, sticky='w', padx=(0, 5))
        info_bar_frame.grid(row=3, column=1, sticky='e', padx=0, pady=15)
        info_label.grid(row=0, column=1, sticky='e', padx=(5, 0))
        search_bar_frame.grid_forget()
    elif status_bar_var.get():
        # Only Status Bar is checked
        status_bar_frame.grid(row=3, column=1, sticky='we', padx=0, pady=15)
        status_label.grid(row=0, column=0, sticky='w', padx=(0, 5))
        info_label.grid_forget()
        search_bar_frame.grid_forget()
    elif info_bar_var.get():
        # Only Info Bar is checked
        status_bar_frame.grid(row=3, column=1, sticky='we', padx=0, pady=15)
        status_label.grid_forget()
        info_bar_frame.grid(row=0, column=1, sticky='e', padx=0, pady=15)
        search_bar_frame.grid_forget()
    elif search_bar_var.get():
        # Only Search Bar is checked
        search_bar_frame.grid(row=3, column=1, sticky='we', padx=0, pady=10) # pady 10 to compensate for buttons
        status_bar_frame.grid_forget()
        # Uncheck Status Bar and Info Bar checkbuttons
        status_bar_var.set(0)
        info_bar_var.set(0)
    else:
        # None are checked
        status_bar_frame.grid_forget()
        search_bar_frame.grid_forget()

    # If none of the bars are toggled on...
    if not (status_bar_var.get() or info_bar_var.get() or search_bar_var.get()):
        # Create a persistent bottom bar that is always visible with minimal padding
        status_bar_frame.grid_forget()
        search_bar_frame.grid_forget()
        info_bar_frame.grid_forget()
        
        persistent_bottom_bar = Frame(window, relief="flat", bd=0, padx=0, pady=10)
        persistent_bottom_bar.grid(row=3, column=1, padx=0, pady=10)  # Make sure the bar is always visible


# Function to update checkbuttons when Search Bar is toggled
def toggle_search_bar():
    global was_status_bar_visible, was_info_bar_visible

    if search_bar_var.get():  # Search Bar is toggled ON
        # Remember the current state of Status Bar and Info Bar
        was_status_bar_visible = status_bar_var.get()
        was_info_bar_visible = info_bar_var.get()

        # Hide Status Bar and Info Bar
        status_bar_var.set(0)
        info_bar_var.set(0)
    else:  # Search Bar is toggled OFF
        # Restore the previous state of Status Bar and Info Bar
        status_bar_var.set(was_status_bar_visible)
        info_bar_var.set(was_info_bar_visible)

    # Update bars to reflect changes
    update_bars()


# Function to update checkbuttons when Status Bar or Info Bar are toggled
def toggle_status_info_bar():
    if status_bar_var.get() or info_bar_var.get():
        # Uncheck Search Bar if Status Bar or Info Bar is checked
        search_bar_var.set(0)
    update_bars()


def create_window():
    global window

    # Create the main window
    window = Tk()
    window.title("Simple Notepad with Toggleable Footer Bars")

    # Configure row/column resizing
    window.grid_rowconfigure(1, weight=1)
    window.grid_columnconfigure(1, weight=1)

    # Create the interface components
    create_menu()
    create_toolbar()
    create_line_numbers()
    
    global linenumbers_canvas
    linenumbers_canvas = Canvas(window, width=40, highlightthickness=0)																				   
    linenumbers_canvas.grid(row=1, column=0, sticky="NS")
    window.grid_rowconfigure(1, minsize=linenumbers_canvas.winfo_reqheight())    
    linenumbers_canvas.grid_propagate(False)
    linenumbers_canvas.configure(width=30)

    global text_widget
    text_widget = create_custom_text(window, linenumbers_canvas)   
    text_widget.insert("end", "Type some text here...")
    text.insert("end", "one\ntwo\nthree\n")
    text.insert("end", "four\n")
    text.insert("end", "five\nsecond two\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
    
    # create_text_widget()
    create_search_bar()
    create_status_bar()

    # Ensure both Status Bar and Info Bar are visible at startup
    update_bars()

    # Run the application
    window.mainloop()


if __name__ == "__main__":
    create_window()

