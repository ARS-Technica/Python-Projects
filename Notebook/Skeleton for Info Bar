
"""
The following code is an attempt to add an Info Bar to the existing Status Bar of my Notebook
project.  The Info Bar will display the current position of the cursor on the text widget in ther
format: Line: 1 | Column: 0

If successful, the Info Bar should appear at the bottom, right-most edge of the window on what
is currently the Status Bar.  It should toggle on and off with a check box in the Options Menu.
The Info Bar should also not interfere with the Search Bar.
"""

"""
OVERHAUL OF STATUS BAR(S)
After difficulty adding a third frame to interact with the existing Info Bar and Status Bar,
I've realized that it might be better to streamline the entire code.  Info Bar would work 
better as a label that can be toggled on and off.  Then, I realized that the complexity of
the Status Bar and Search Bar's interactions could be streamlined as well.
"""


# Status Bar and Info Bar Look Good
# Search Bar needs to be moved into one column, and the width needs to expand


import os, sys
from tkinter import *
from tkinter import colorchooser, filedialog, font, messagebox, simpledialog
import tkinter.ttk as ttk
import win32print
import win32api

def create_custom_text(window, linenumbers_canvas):
    global text
    text_editor_frame = Frame(window)
    text = Text(text_editor_frame, font=("Helvetica", 16), selectbackground=line_highlight,
                selectforeground="black", undo=True, padx=5, pady=5, wrap="none")

    def proxy(*args):
        cmd = (text._orig,) + args
        result = text.tk.call(cmd)

        if (
            args[0] in ("insert", "replace", "delete")
            or args[0:3] == ("mark", "set", "insert")
            or args[0:2] == ("xview", "moveto")
            or args[0:2] == ("xview", "scroll")
            or args[0:2] == ("yview", "moveto")
            or args[0:2] == ("yview", "scroll")
        ):
            text.event_generate("<<Change>>", when="tail")

        return result

    text._orig = text._w + "_orig"
    text.tk.call("rename", text._w, text._orig)
    text.tk.createcommand(text._w, proxy)
    vertical_scrollbar = Scrollbar(text_editor_frame, orient="vertical", command=text.yview)
    text.configure(yscrollcommand=vertical_scrollbar.set)
    horizontal_scrollbar = Scrollbar(text_editor_frame, orient="horizontal", command=text.xview)
    text.configure(xscrollcommand=horizontal_scrollbar.set)
    text.grid(row=0, column=0, columnspan=2, sticky="nsew")
    vertical_scrollbar.grid(row=0, column=1, sticky="ns")
    horizontal_scrollbar.grid(row=1, column=0, sticky="ew")
    text_editor_frame.grid_rowconfigure(0, weight=1)
    text_editor_frame.grid_columnconfigure(0, weight=1)
    text_editor_frame.grid(row=1, column=1, sticky="nsew", padx=2, pady=2)
    text_editor_frame.grid_rowconfigure(0, weight=1)
    text_editor_frame.grid_columnconfigure(0, weight=1)
    window.grid_rowconfigure(0, weight=0)
    window.grid_rowconfigure(1, weight=1)
    window.grid_columnconfigure(0, weight=0)
    window.grid_columnconfigure(1, weight=1)
    text.bind("<<Change>>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))
    text.bind("<<Modified>>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))
    text.bind("<Configure>", lambda event: create_text_line_numbers(linenumbers_canvas, text, text_color))

    return text

def create_search_bar():
    # Create the search bar components
    global search_bar_label, search_entry, search_button1, search_button2, search_button3, search_button4
    search_bar_label = Label(window, text="Search Bar", bg="lightgrey")
    search_entry = Entry(window)
    search_button1 = Button(window, text="Button 1")
    search_button2 = Button(window, text="Button 2")
    search_button3 = Button(window, text="Button 3")
    search_button4 = Button(window, text="Button 4")

def create_status_bar():
    # Create the status bar labels
    global status_bar_label, info_bar_label
    status_bar_label = Label(window, text="Status Bar", bg="lightgrey")
    info_bar_label = Label(window, text="Info Bar", bg="lightgrey")

def create_text_line_numbers(canvas, text, text_color):
    def redraw(*args):
        canvas.delete("all")
        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            canvas.create_text(2, y, anchor="nw", text=linenum, fill=text_color)
            i = text_widget.index("%s+1line" % i)
    redraw()
    text.bind("<<Change>>", redraw)
    text.bind("<<Modified>>", redraw)
    text.bind("<Configure>", redraw)
    return redraw

status_bar_message = "Status Bar"

# Updates the visibility of the Status Bar(s) based on the checkbutton states
def update_bars():
    # Clear any existing footers (all widgets below row 1)
    for widget in window.grid_slaves():
        if int(widget.grid_info()["row"]) > 1:
            widget.grid_forget()

    # Check the state of the checkbuttons
    is_info_bar_visible = info_bar_checkbutton.get()
    is_search_bar_visible = search_bar_checkbutton.get()
    is_status_bar_visible = status_bar_checkbutton.get()

    if is_search_bar_visible:
        # If search bar is selected, deselect the status and info bars
        status_bar_checkbutton.set(False)
        info_bar_checkbutton.set(False)
        # Add the search bar with a label and an entry field
        search_bar_label.grid(row=2, column=1, sticky="w")  # Moved one column to the right
        search_entry.grid(row=2, column=2, sticky="ew")
        search_button1.grid(row=2, column=3, sticky="ew")
        search_button2.grid(row=2, column=4, sticky="ew")
        search_button3.grid(row=2, column=5, sticky="ew")
        search_button4.grid(row=2, column=6, sticky="ew")
    else:
        # If search bar is not selected, check for status and info bar visibility
        if is_status_bar_visible or is_info_bar_visible:
            # Display the status bar with the selected labels
            if is_status_bar_visible:
                status_bar_label.grid(row=2, column=1, sticky="w")  # Moved one column to the right
            if is_info_bar_visible:
                info_bar_label.grid(row=2, column=1, sticky="e")  # Moved one column to the right

    # If either Status Bar or Info Bar is selected, deactivate the Search Bar
    if is_status_bar_visible or is_info_bar_visible:
        search_bar_checkbutton.set(False)

def find_all(event=None):
    search_text = search_entry.get()
    if search_text:
        start_pos = "1.0"
        while True:
            pos = text_widget.search(search_text, start_pos, stopindex="end")
            if not pos:
                break
            end_pos = f"{pos}+{len(search_text)}c"
            text_widget.tag_add("found", pos, end_pos)
            start_pos = end_pos
        text_widget.tag_configure("found", background=line_highlight)
    else:
        if search_bar.winfo_ismapped():
             messagebox.showerror("Search", "Please enter text before searching")
        else:
            toggle_search_bar()
            search_entry.focus_set()

main_color = "SystemButtonFace"
second_color = "White"
selection_highlight = "#999999"
text_color = "black"
line_highlight = "yellow"

def toggle_linenumbers():
    if linenumbers_button_var.get():
        linenumbers_canvas.grid(row=1, column=0, sticky="NS")
        window.grid_rowconfigure(0, weight=0, minsize=0)
        window.grid_rowconfigure(1, weight=1, minsize=0)
    else:
        linenumbers_canvas.grid_forget()

# Create a function to define and return the menu bar
def create_menu(window):
    # Define the variables associated with the checkbuttons
    global status_bar_checkbutton, info_bar_checkbutton, search_bar_checkbutton
    status_bar_checkbutton = BooleanVar(value=True)
    info_bar_checkbutton = BooleanVar(value=True)
    search_bar_checkbutton = BooleanVar(value=False)

    # Create the menu bar and attach it to the window
    # Add the "Options" menu to the menu bar
    menubar = Menu(window)
    window.config(menu=menubar)
    options_menu = Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Options", menu=options_menu)

    # Add checkbuttons to the "Options" menu to toggle the bars
    options_menu.add_checkbutton(label="Status Bar", variable=status_bar_checkbutton, command=update_bars)
    options_menu.add_checkbutton(label="Info Bar", variable=info_bar_checkbutton, command=update_bars)
    options_menu.add_checkbutton(label="Search Bar", variable=search_bar_checkbutton, command=update_bars)

    return menubar

def create_window():
    global window
    window = Tk()
    window.geometry("1200x690")
    window.resizable(True, True)
    window.grid_columnconfigure(1, weight=1)
    window.grid_rowconfigure(0, weight=0, minsize=0)
    window.grid_rowconfigure(1, weight=1, minsize=0)
    global linenumbers_canvas
    linenumbers_canvas = Canvas(window, width=40, highlightthickness=0)																				   
    linenumbers_canvas.grid(row=1, column=0, sticky="NS")
    window.grid_rowconfigure(1, minsize=linenumbers_canvas.winfo_reqheight())    
    linenumbers_canvas.grid_propagate(False)
    linenumbers_canvas.configure(width=30)
    global text_widget
    text_widget = create_custom_text(window, linenumbers_canvas)   
    text_widget.insert("end", "Type some text here...")
    text.insert("end", "one\ntwo\nthree\n")
    text.insert("end", "four\n")
    text.insert("end", "five\nsecond two\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
    
    create_search_bar()
    create_status_bar()		  
    create_menu(window)

    update_bars()
    window.mainloop()

if __name__ == "__main__":
    create_window()

